
// Generated from /home/fils/git/makefilegen_v2/grammars/vhdlParser.g4 by ANTLR 4.11.1


#include "vhdlParserListener.h"
#include "vhdlParserVisitor.h"

#include "vhdlParser.h"


using namespace antlrcpp;
using namespace mgp_vh;

using namespace antlr4;

namespace {

struct VhdlParserStaticData final {
  VhdlParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  VhdlParserStaticData(const VhdlParserStaticData&) = delete;
  VhdlParserStaticData(VhdlParserStaticData&&) = delete;
  VhdlParserStaticData& operator=(const VhdlParserStaticData&) = delete;
  VhdlParserStaticData& operator=(VhdlParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag vhdlparserParserOnceFlag;
VhdlParserStaticData *vhdlparserParserStaticData = nullptr;

void vhdlparserParserInitialize() {
  assert(vhdlparserParserStaticData == nullptr);
  auto staticData = std::make_unique<VhdlParserStaticData>(
    std::vector<std::string>{
      "any_keyword", "name_literal", "name", "name_slice_part", "name_attribute_part", 
      "attribute_name", "suffix", "explicit_range", "selected_name", "entity_declaration", 
      "entity_declarative_item", "entity_statement", "architecture_body", 
      "block_declarative_item", "configuration_declaration", "configuration_declarative_item", 
      "block_configuration", "block_specification", "generate_specification", 
      "configuration_item", "component_configuration", "subprogram_declaration", 
      "subprogram_specification", "procedure_specification", "function_specification", 
      "subprogram_header", "designator", "operator_symbol", "formal_parameter_list", 
      "subprogram_body", "subprogram_kind", "subprogram_instantiation_declaration", 
      "signature", "package_declaration", "package_declarative_item", "package_body", 
      "package_instantiation_declaration", "scalar_type_definition", "range_constraint", 
      "range", "direction", "enumeration_type_definition", "enumeration_literal", 
      "integer_type_definition", "physical_type_definition", "primary_unit_declaration", 
      "secondary_unit_declaration", "floating_type_definition", "composite_type_definition", 
      "array_type_definition", "unbounded_array_definition", "constrained_array_definition", 
      "index_subtype_definition", "array_constraint", "array_element_constraint", 
      "index_constraint", "discrete_range", "record_type_definition", "element_declaration", 
      "identifier_list", "element_subtype_definition", "record_constraint", 
      "record_element_constraint", "access_type_definition", "incomplete_type_declaration", 
      "file_type_definition", "protected_type_definition", "protected_type_declaration", 
      "protected_type_declarative_item", "protected_type_body", "type_declaration", 
      "full_type_declaration", "type_definition", "subtype_declaration", 
      "subtype_indication", "resolution_indication", "element_resolution", 
      "array_element_resolution", "record_resolution", "record_element_resolution", 
      "type_mark", "constraint", "element_constraint", "object_declaration", 
      "constant_declaration", "signal_declaration", "signal_kind", "variable_declaration", 
      "file_declaration", "file_open_information", "file_logical_name", 
      "interface_declaration", "interface_object_declaration", "interface_constant_declaration", 
      "interface_signal_declaration", "interface_variable_declaration", 
      "interface_file_declaration", "signal_mode", "interface_type_declaration", 
      "interface_incomplete_type_declaration", "interface_subprogram_declaration", 
      "interface_subprogram_specification", "interface_procedure_specification", 
      "interface_function_specification", "interface_subprogram_default", 
      "interface_package_declaration", "interface_package_generic_map_aspect", 
      "interface_list", "interface_element", "generic_clause", "generic_list", 
      "port_clause", "port_list", "association_list", "association_element", 
      "formal_part", "actual_part", "actual_designator", "generic_map_aspect", 
      "port_map_aspect", "alias_declaration", "alias_designator", "attribute_declaration", 
      "component_declaration", "group_template_declaration", "entity_class_entry_list", 
      "entity_class_entry", "group_declaration", "group_constituent_list", 
      "group_constituent", "attribute_specification", "entity_specification", 
      "entity_class", "entity_name_list", "entity_designator", "entity_tag", 
      "configuration_specification", "simple_configuration_specification", 
      "compound_configuration_specification", "component_specification", 
      "instantiation_list", "binding_indication", "entity_aspect", "verification_unit_binding_indication", 
      "verification_unit_list", "disconnection_specification", "guarded_signal_specification", 
      "signal_list", "attribute_designator", "external_name", "external_pathname", 
      "package_pathname", "absolute_pathname", "relative_pathname", "partial_pathname", 
      "pathname_element", "expression", "simple_expression", "primary", 
      "logical_operator", "relational_operator", "shift_operator", "adding_operator", 
      "sign", "multiplying_operator", "miscellaneous_operator", "numeric_literal", 
      "physical_literal", "aggregate", "element_association", "choices", 
      "choice", "qualified_expression", "allocator", "sequence_of_statements", 
      "sequential_statement", "wait_statement", "sensitivity_clause", "sensitivity_list", 
      "condition_clause", "condition", "timeout_clause", "assertion_statement", 
      "assertion", "report_statement", "signal_assignment_statement", "simple_signal_assignment", 
      "simple_waveform_assignment", "simple_force_assignment", "simple_release_assignment", 
      "force_mode", "delay_mechanism", "target", "waveform", "waveform_element", 
      "conditional_signal_assignment", "conditional_waveform_assignment", 
      "conditional_waveforms", "conditional_force_assignment", "conditional_expressions", 
      "selected_signal_assignment", "selected_waveform_assignment", "selected_waveforms", 
      "selected_force_assignment", "selected_expressions", "variable_assignment_statement", 
      "simple_variable_assignment", "conditional_variable_assignment", "selected_variable_assignment", 
      "procedure_call_statement", "procedure_call", "if_statement", "case_statement", 
      "case_statement_alternative", "loop_statement", "iteration_scheme", 
      "parameter_specification", "next_statement", "exit_statement", "return_statement", 
      "null_statement", "concurrent_statement_with_optional_label", "concurrent_statement", 
      "block_statement", "block_header", "process_statement", "process_sensitivity_list", 
      "process_or_package_declarative_item", "process_declarative_item", 
      "concurrent_procedure_call_statement", "concurrent_assertion_statement", 
      "concurrent_signal_assignment_statement", "concurrent_signal_assignment_any", 
      "concurrent_selected_signal_assignment", "component_instantiation_statement", 
      "instantiated_unit", "generate_statement", "for_generate_statement", 
      "if_generate_statement", "case_generate_statement", "case_generate_alternative", 
      "generate_statement_body_with_begin_end", "generate_statement_body", 
      "label", "use_clause", "design_file", "design_unit", "library_unit", 
      "primary_unit", "secondary_unit", "library_clause", "logical_name_list", 
      "context_declaration", "context_clause", "context_item", "context_reference", 
      "identifier"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "'\\n'", "'\\r'", "' '", "'\"'", "'_'", "", "';'", "'('", "')'", "'['", 
      "']'", "'''", "'<<'", "'>>'", "'@'", "'#'", "','", "'.'", "'\\u003F'", 
      "':'", "'='", "'/='", "'<'", "'>'", "'>='", "'\\u003F='", "'\\u003F/='", 
      "'\\u003F<'", "'\\u003F<='", "'\\u003F>'", "'\\u003F>='", "'+'", "'-'", 
      "'&'", "'|'", "'\\'", "'*'", "'/'", "'**'", "'<='", "'`'", "'^'", 
      "':='", "'<>'", "'=>'"
    },
    std::vector<std::string>{
      "", "KW_PROCESS", "KW_CONTEXT", "KW_POSTPONED", "KW_LINKAGE", "KW_COMPONENT", 
      "KW_ABS", "KW_DEFAULT", "KW_THEN", "KW_BLOCK", "KW_REM", "KW_INERTIAL", 
      "KW_NEXT", "KW_ENTITY", "KW_ON", "KW_GROUP", "KW_XNOR", "KW_FILE", 
      "KW_PURE", "KW_GUARDED", "KW_GENERIC", "KW_RANGE", "KW_ELSE", "KW_USE", 
      "KW_SHARED", "KW_MOD", "KW_LOOP", "KW_RECORD", "KW_SIGNAL", "KW_REJECT", 
      "KW_BEGIN", "KW_SLA", "KW_DISCONNECT", "KW_OF", "KW_PROCEDURE", "KW_SRL", 
      "KW_VUNIT", "KW_ATTRIBUTE", "KW_VARIABLE", "KW_PROPERTY", "KW_UNAFFECTED", 
      "KW_XOR", "KW_REGISTER", "KW_SUBTYPE", "KW_TO", "KW_NEW", "KW_REPORT", 
      "KW_CONSTANT", "KW_BUFFER", "KW_BODY", "KW_AFTER", "KW_TRANSPORT", 
      "KW_FUNCTION", "KW_END", "KW_SELECT", "KW_OR", "KW_LIBRARY", "KW_ELSIF", 
      "KW_SLL", "KW_MAP", "KW_SRA", "KW_PROTECTED", "KW_DOWNTO", "KW_LABEL", 
      "KW_ALL", "KW_ALIAS", "KW_GENERATE", "KW_NOR", "KW_IN", "KW_RELEASE", 
      "KW_EXIT", "KW_RETURN", "KW_WITH", "KW_UNTIL", "KW_AND", "KW_INOUT", 
      "KW_WAIT", "KW_NAND", "KW_ARRAY", "KW_FORCE", "KW_WHILE", "KW_IMPURE", 
      "KW_PACKAGE", "KW_UNITS", "KW_ASSERT", "KW_PARAMETER", "KW_SEVERITY", 
      "KW_LITERAL", "KW_FOR", "KW_ROR", "KW_IF", "KW_OUT", "KW_ROL", "KW_IS", 
      "KW_SEQUENCE", "KW_OTHERS", "KW_TYPE", "KW_CASE", "KW_NOT", "KW_CONFIGURATION", 
      "KW_OPEN", "KW_ARCHITECTURE", "KW_BUS", "KW_ACCESS", "KW_WHEN", "KW_PORT", 
      "KW_NULL", "BASIC_IDENTIFIER", "EXTENDED_IDENTIFIER", "DECIMAL_LITERAL", 
      "INTEGER", "BASED_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", 
      "BIT_STRING_LITERAL", "COMMENT", "BLOCK_COMMENT", "TAB", "SPACE", 
      "NEWLINE", "CR", "SPACE_CHARACTER", "DBLQUOTE", "UNDERSCORE", "DIGIT", 
      "SEMI", "LPAREN", "RPAREN", "LSQUARE_BR", "RSQUARE_BR", "APOSTROPHE", 
      "SHIFT_LEFT", "SHIFT_RIGHT", "AT", "HASHTAG", "COMMA", "DOT", "QUESTIONMARK", 
      "COLON", "EQ", "NE", "LT", "GT", "GE", "EQ_MATCH", "NE_MATCH", "LT_MATCH", 
      "LE_MATCH", "GT_MATCH", "GE_MATCH", "PLUS", "MINUS", "AMPERSAND", 
      "BAR", "BACKSLASH", "MUL", "DIV", "DOUBLESTAR", "CONASGN", "GRAVE_ACCENT", 
      "UP", "VARASGN", "BOX", "ARROW", "COND_OP"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,164,2661,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,1,0,1,0,1,1,1,1,1,1,3,1,520,8,1,1,2,1,2,
  	1,2,3,2,525,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,533,8,2,5,2,535,8,2,10,2,
  	12,2,538,9,2,1,3,1,3,1,3,1,3,1,4,3,4,545,8,4,1,4,1,4,1,4,1,5,1,5,1,5,
  	1,6,1,6,3,6,555,8,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,5,8,564,8,8,10,8,12,8,
  	567,9,8,1,9,1,9,1,9,1,9,3,9,573,8,9,1,9,3,9,576,8,9,1,9,5,9,579,8,9,10,
  	9,12,9,582,9,9,1,9,1,9,5,9,586,8,9,10,9,12,9,589,9,9,3,9,591,8,9,1,9,
  	1,9,3,9,595,8,9,1,9,3,9,598,8,9,1,9,1,9,1,10,1,10,1,10,3,10,605,8,10,
  	1,11,1,11,1,11,3,11,610,8,11,1,11,1,11,1,11,3,11,615,8,11,1,12,1,12,1,
  	12,1,12,1,12,1,12,5,12,623,8,12,10,12,12,12,626,9,12,1,12,1,12,5,12,630,
  	8,12,10,12,12,12,633,9,12,1,12,1,12,3,12,637,8,12,1,12,3,12,640,8,12,
  	1,12,1,12,1,13,1,13,1,13,3,13,647,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
  	5,14,655,8,14,10,14,12,14,658,9,14,1,14,1,14,1,14,5,14,663,8,14,10,14,
  	12,14,666,9,14,1,14,1,14,1,14,3,14,671,8,14,1,14,3,14,674,8,14,1,14,1,
  	14,1,15,1,15,1,15,3,15,681,8,15,1,16,1,16,1,16,5,16,686,8,16,10,16,12,
  	16,689,9,16,1,16,5,16,692,8,16,10,16,12,16,695,9,16,1,16,1,16,1,16,1,
  	16,1,17,1,17,1,17,1,17,1,17,3,17,706,8,17,1,18,1,18,1,18,3,18,711,8,18,
  	1,19,1,19,3,19,715,8,19,1,20,1,20,1,20,1,20,1,20,3,20,722,8,20,1,20,1,
  	20,1,20,5,20,727,8,20,10,20,12,20,730,9,20,1,20,3,20,733,8,20,1,20,1,
  	20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,3,22,744,8,22,1,23,1,23,1,23,3,
  	23,749,8,23,1,23,3,23,752,8,23,1,23,1,23,1,23,1,23,3,23,758,8,23,1,24,
  	3,24,761,8,24,1,24,1,24,1,24,3,24,766,8,24,1,24,3,24,769,8,24,1,24,1,
  	24,1,24,1,24,3,24,775,8,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,
  	25,785,8,25,1,26,1,26,3,26,789,8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,
  	5,29,798,8,29,10,29,12,29,801,9,29,1,29,1,29,5,29,805,8,29,10,29,12,29,
  	808,9,29,1,29,1,29,3,29,812,8,29,1,29,3,29,815,8,29,1,29,1,29,1,30,1,
  	30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,827,8,31,1,31,3,31,830,8,31,1,31,
  	1,31,1,32,1,32,1,32,1,32,5,32,838,8,32,10,32,12,32,841,9,32,3,32,843,
  	8,32,1,32,1,32,3,32,847,8,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,3,33,858,8,33,3,33,860,8,33,1,33,5,33,863,8,33,10,33,12,33,866,9,
  	33,1,33,1,33,3,33,870,8,33,1,33,3,33,873,8,33,1,33,1,33,1,34,1,34,1,34,
  	1,34,3,34,881,8,34,1,35,1,35,1,35,1,35,1,35,5,35,888,8,35,10,35,12,35,
  	891,9,35,1,35,1,35,1,35,3,35,896,8,35,1,35,3,35,899,8,35,1,35,1,35,1,
  	36,1,36,1,36,1,36,1,36,1,36,3,36,909,8,36,1,36,1,36,1,37,1,37,1,37,1,
  	37,3,37,917,8,37,1,38,1,38,1,38,1,39,1,39,3,39,924,8,39,1,40,1,40,1,41,
  	1,41,1,41,1,41,5,41,932,8,41,10,41,12,41,935,9,41,1,41,1,41,1,42,1,42,
  	3,42,941,8,42,1,43,1,43,1,44,1,44,1,44,1,44,5,44,949,8,44,10,44,12,44,
  	952,9,44,1,44,1,44,1,44,3,44,957,8,44,1,45,1,45,1,45,1,46,1,46,1,46,1,
  	46,1,46,1,47,1,47,1,48,1,48,3,48,971,8,48,1,49,1,49,3,49,975,8,49,1,50,
  	1,50,1,50,1,50,1,50,5,50,982,8,50,10,50,12,50,985,9,50,1,50,1,50,1,50,
  	1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,3,53,1002,
  	8,53,1,53,1,53,1,53,1,53,3,53,1008,8,53,3,53,1010,8,53,1,54,1,54,1,55,
  	1,55,1,55,1,55,5,55,1018,8,55,10,55,12,55,1021,9,55,1,55,1,55,1,56,1,
  	56,3,56,1027,8,56,1,57,1,57,4,57,1031,8,57,11,57,12,57,1032,1,57,1,57,
  	1,57,3,57,1038,8,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,5,59,1048,
  	8,59,10,59,12,59,1051,9,59,1,60,1,60,1,61,1,61,1,61,1,61,5,61,1059,8,
  	61,10,61,12,61,1062,9,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,
  	1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,3,66,1082,8,66,1,67,1,67,
  	5,67,1086,8,67,10,67,12,67,1089,9,67,1,67,1,67,1,67,3,67,1094,8,67,1,
  	68,1,68,1,68,1,68,3,68,1100,8,68,1,69,1,69,1,69,5,69,1105,8,69,10,69,
  	12,69,1108,9,69,1,69,1,69,1,69,1,69,3,69,1114,8,69,1,70,1,70,3,70,1118,
  	8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,3,72,1131,
  	8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,74,3,74,1140,8,74,1,74,1,74,3,74,
  	1144,8,74,1,75,1,75,1,75,1,75,1,75,3,75,1151,8,75,1,76,1,76,3,76,1155,
  	8,76,1,77,1,77,1,78,1,78,1,78,5,78,1162,8,78,10,78,12,78,1165,9,78,1,
  	79,1,79,1,79,1,80,1,80,1,81,1,81,3,81,1174,8,81,1,82,1,82,3,82,1178,8,
  	82,1,83,1,83,1,83,1,83,3,83,1184,8,83,1,84,1,84,1,84,1,84,1,84,1,84,3,
  	84,1192,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,1201,8,85,1,85,1,
  	85,3,85,1205,8,85,1,85,1,85,1,86,1,86,1,87,3,87,1212,8,87,1,87,1,87,1,
  	87,1,87,1,87,1,87,3,87,1220,8,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,3,
  	88,1229,8,88,1,88,1,88,1,89,1,89,3,89,1235,8,89,1,89,1,89,3,89,1239,8,
  	89,1,89,1,89,1,90,1,90,1,91,1,91,1,91,1,91,3,91,1249,8,91,1,92,1,92,1,
  	92,1,92,3,92,1255,8,92,1,93,1,93,1,93,1,93,3,93,1261,8,93,1,93,1,93,1,
  	93,3,93,1266,8,93,1,94,3,94,1269,8,94,1,94,1,94,1,94,3,94,1274,8,94,1,
  	94,1,94,3,94,1278,8,94,1,94,1,94,3,94,1282,8,94,1,95,1,95,1,95,1,95,3,
  	95,1288,8,95,1,95,1,95,1,95,3,95,1293,8,95,1,96,1,96,1,96,1,96,1,96,1,
  	97,1,97,1,98,1,98,1,99,1,99,1,99,1,100,1,100,1,100,3,100,1310,8,100,1,
  	101,1,101,3,101,1314,8,101,1,102,1,102,1,102,3,102,1319,8,102,1,102,1,
  	102,1,102,1,102,3,102,1325,8,102,1,103,3,103,1328,8,103,1,103,1,103,1,
  	103,3,103,1333,8,103,1,103,1,103,1,103,1,103,3,103,1339,8,103,1,103,1,
  	103,1,103,1,104,1,104,3,104,1346,8,104,1,105,1,105,1,105,1,105,1,105,
  	1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
  	1,106,3,106,1366,8,106,1,107,1,107,1,107,5,107,1371,8,107,10,107,12,107,
  	1374,9,107,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,110,1,110,
  	1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,113,1,113,1,113,1,113,
  	5,113,1398,8,113,10,113,12,113,1401,9,113,1,113,1,113,1,114,1,114,1,114,
  	3,114,1408,8,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,3,115,1417,
  	8,115,1,116,1,116,1,116,1,116,1,116,1,116,3,116,1425,8,116,1,117,3,117,
  	1428,8,117,1,117,1,117,1,117,3,117,1433,8,117,1,118,1,118,1,118,1,118,
  	1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,3,120,1447,8,120,1,120,
  	1,120,1,120,3,120,1452,8,120,1,120,1,120,1,121,1,121,1,121,3,121,1459,
  	8,121,1,122,1,122,1,122,1,122,1,122,1,122,1,123,1,123,1,123,3,123,1470,
  	8,123,1,123,3,123,1473,8,123,1,123,3,123,1476,8,123,1,123,1,123,1,123,
  	3,123,1481,8,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
  	1,124,1,125,1,125,1,125,5,125,1496,8,125,10,125,12,125,1499,9,125,1,126,
  	1,126,3,126,1503,8,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
  	1,127,1,128,1,128,1,128,5,128,1517,8,128,10,128,12,128,1520,9,128,1,129,
  	1,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,
  	1,131,1,132,1,132,1,133,1,133,1,133,5,133,1541,8,133,10,133,12,133,1544,
  	9,133,1,133,1,133,3,133,1548,8,133,1,134,1,134,3,134,1552,8,134,1,135,
  	1,135,1,135,3,135,1557,8,135,1,136,1,136,3,136,1561,8,136,1,137,1,137,
  	1,137,1,137,1,137,1,137,1,137,3,137,1570,8,137,1,138,1,138,1,138,1,138,
  	1,138,1,138,1,138,4,138,1579,8,138,11,138,12,138,1580,1,138,1,138,1,138,
  	1,138,1,139,1,139,1,139,1,139,1,140,1,140,1,140,5,140,1594,8,140,10,140,
  	12,140,1597,9,140,1,140,1,140,3,140,1601,8,140,1,141,1,141,3,141,1605,
  	8,141,1,141,3,141,1608,8,141,1,141,3,141,1611,8,141,1,142,1,142,1,142,
  	1,142,1,142,1,142,3,142,1619,8,142,1,142,1,142,1,142,3,142,1624,8,142,
  	1,143,1,143,1,143,1,143,1,144,1,144,1,144,5,144,1633,8,144,10,144,12,
  	144,1636,9,144,1,145,1,145,1,145,1,145,1,145,1,145,1,146,1,146,1,146,
  	1,146,1,147,1,147,1,147,5,147,1651,8,147,10,147,12,147,1654,9,147,1,147,
  	1,147,3,147,1658,8,147,1,148,1,148,3,148,1662,8,148,1,149,1,149,1,149,
  	1,149,1,149,1,149,1,149,1,150,1,150,1,150,3,150,1674,8,150,1,151,1,151,
  	1,151,1,151,1,151,1,151,1,151,1,151,5,151,1684,8,151,10,151,12,151,1687,
  	9,151,1,152,1,152,1,152,1,153,1,153,5,153,1694,8,153,10,153,12,153,1697,
  	9,153,1,153,1,153,1,154,1,154,1,154,5,154,1704,8,154,10,154,12,154,1707,
  	9,154,1,154,1,154,1,155,1,155,1,155,1,155,1,155,3,155,1716,8,155,1,156,
  	1,156,1,156,1,156,3,156,1722,8,156,1,156,1,156,1,156,1,156,1,156,1,156,
  	1,156,1,156,1,156,1,156,1,156,1,156,5,156,1736,8,156,10,156,12,156,1739,
  	9,156,1,157,1,157,1,157,1,157,3,157,1745,8,157,1,157,1,157,1,157,3,157,
  	1750,8,157,1,157,1,157,1,157,1,157,3,157,1756,8,157,1,157,1,157,1,157,
  	1,157,1,157,1,157,1,157,1,157,5,157,1766,8,157,10,157,12,157,1769,9,157,
  	1,158,1,158,1,158,1,158,1,158,1,158,3,158,1777,8,158,1,159,1,159,1,160,
  	1,160,1,161,1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,1,166,
  	1,166,3,166,1795,8,166,1,166,1,166,3,166,1799,8,166,1,166,3,166,1802,
  	8,166,1,167,3,167,1805,8,167,1,167,1,167,1,168,1,168,1,168,1,168,5,168,
  	1813,8,168,10,168,12,168,1816,9,168,1,168,1,168,1,169,1,169,1,169,3,169,
  	1823,8,169,1,169,1,169,1,170,1,170,1,170,5,170,1830,8,170,10,170,12,170,
  	1833,9,170,1,171,1,171,1,171,3,171,1838,8,171,1,172,1,172,1,172,1,172,
  	1,173,1,173,1,173,3,173,1847,8,173,1,174,5,174,1850,8,174,10,174,12,174,
  	1853,9,174,1,175,1,175,1,175,3,175,1858,8,175,1,175,1,175,1,175,1,175,
  	1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,1873,8,175,
  	1,176,1,176,3,176,1877,8,176,1,176,3,176,1880,8,176,1,176,3,176,1883,
  	8,176,1,176,1,176,1,177,1,177,1,177,1,178,1,178,1,178,5,178,1893,8,178,
  	10,178,12,178,1896,9,178,1,179,1,179,1,179,1,180,1,180,1,181,1,181,1,
  	181,1,182,1,182,1,182,1,183,1,183,1,183,1,183,3,183,1913,8,183,1,183,
  	1,183,3,183,1917,8,183,1,184,1,184,1,184,1,184,3,184,1923,8,184,1,184,
  	1,184,1,185,1,185,1,185,3,185,1930,8,185,1,186,1,186,1,186,3,186,1935,
  	8,186,1,187,1,187,1,187,3,187,1940,8,187,1,187,1,187,1,187,1,188,1,188,
  	1,188,1,188,3,188,1949,8,188,1,188,1,188,1,188,1,189,1,189,1,189,1,189,
  	3,189,1958,8,189,1,189,1,189,1,190,1,190,1,191,1,191,1,191,3,191,1967,
  	8,191,1,191,3,191,1970,8,191,1,192,1,192,3,192,1974,8,192,1,193,1,193,
  	1,193,5,193,1979,8,193,10,193,12,193,1982,9,193,1,193,3,193,1985,8,193,
  	1,194,1,194,1,194,3,194,1990,8,194,1,194,1,194,1,194,3,194,1995,8,194,
  	3,194,1997,8,194,1,195,1,195,3,195,2001,8,195,1,196,1,196,1,196,3,196,
  	2006,8,196,1,196,1,196,1,196,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,5,197,2019,8,197,10,197,12,197,2022,9,197,1,197,1,197,1,197,3,197,
  	2027,8,197,1,198,1,198,1,198,1,198,3,198,2033,8,198,1,198,1,198,1,198,
  	1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,5,199,2046,8,199,10,199,
  	12,199,2049,9,199,1,199,1,199,1,199,3,199,2054,8,199,1,200,1,200,3,200,
  	2058,8,200,1,201,1,201,1,201,1,201,3,201,2064,8,201,1,201,1,201,1,201,
  	3,201,2069,8,201,1,201,1,201,1,201,1,202,1,202,1,202,1,202,1,202,1,202,
  	1,202,1,202,5,202,2082,8,202,10,202,12,202,2085,9,202,1,203,1,203,1,203,
  	1,203,3,203,2091,8,203,1,203,1,203,1,203,1,203,3,203,2097,8,203,1,203,
  	1,203,1,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,5,204,2110,
  	8,204,10,204,12,204,2113,9,204,1,205,1,205,1,205,3,205,2118,8,205,1,206,
  	1,206,1,206,1,206,1,206,1,207,1,207,1,207,1,207,1,207,1,208,1,208,1,208,
  	1,208,3,208,2134,8,208,1,208,1,208,1,208,1,208,1,208,1,209,1,209,1,209,
  	1,210,1,210,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,5,211,
  	2155,8,211,10,211,12,211,2158,9,211,1,211,1,211,1,211,1,211,3,211,2164,
  	8,211,1,211,1,211,1,211,3,211,2169,8,211,1,211,1,211,1,212,1,212,3,212,
  	2175,8,212,1,212,1,212,1,212,4,212,2180,8,212,11,212,12,212,2181,1,212,
  	1,212,1,212,3,212,2187,8,212,1,212,3,212,2190,8,212,1,212,1,212,1,213,
  	1,213,1,213,1,213,1,213,1,214,3,214,2200,8,214,1,214,1,214,1,214,1,214,
  	1,214,3,214,2207,8,214,1,214,1,214,1,215,1,215,1,215,1,215,3,215,2215,
  	8,215,1,216,1,216,1,216,1,216,1,217,1,217,3,217,2223,8,217,1,217,1,217,
  	3,217,2227,8,217,1,217,1,217,1,218,1,218,3,218,2233,8,218,1,218,1,218,
  	3,218,2237,8,218,1,218,1,218,1,219,1,219,3,219,2243,8,219,1,219,1,219,
  	1,220,1,220,1,220,1,221,1,221,1,221,1,221,3,221,2254,8,221,1,222,1,222,
  	1,222,1,222,1,222,1,222,3,222,2262,8,222,1,222,3,222,2265,8,222,1,223,
  	1,223,1,223,1,223,1,223,3,223,2272,8,223,1,223,3,223,2275,8,223,1,223,
  	1,223,5,223,2279,8,223,10,223,12,223,2282,9,223,1,223,1,223,5,223,2286,
  	8,223,10,223,12,223,2289,9,223,1,223,1,223,1,223,3,223,2294,8,223,1,223,
  	1,223,1,224,1,224,1,224,1,224,3,224,2302,8,224,3,224,2304,8,224,1,224,
  	1,224,1,224,1,224,3,224,2310,8,224,3,224,2312,8,224,1,225,3,225,2315,
  	8,225,1,225,1,225,1,225,1,225,1,225,3,225,2322,8,225,1,225,3,225,2325,
  	8,225,1,225,5,225,2328,8,225,10,225,12,225,2331,9,225,1,225,1,225,5,225,
  	2335,8,225,10,225,12,225,2338,9,225,1,225,1,225,3,225,2342,8,225,1,225,
  	1,225,3,225,2346,8,225,1,225,1,225,1,226,1,226,3,226,2352,8,226,1,227,
  	1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
  	1,227,1,227,3,227,2369,8,227,1,228,1,228,1,228,3,228,2374,8,228,1,229,
  	3,229,2377,8,229,1,229,1,229,1,230,3,230,2382,8,230,1,230,1,230,1,231,
  	3,231,2387,8,231,1,231,1,231,3,231,2391,8,231,1,232,1,232,1,232,3,232,
  	2396,8,232,1,232,3,232,2399,8,232,1,232,1,232,3,232,2403,8,232,1,232,
  	1,232,1,233,1,233,1,233,1,233,3,233,2411,8,233,1,233,1,233,1,233,3,233,
  	2416,8,233,1,233,3,233,2419,8,233,1,233,1,233,1,233,1,234,1,234,3,234,
  	2426,8,234,1,234,3,234,2429,8,234,1,234,1,234,1,235,3,235,2434,8,235,
  	1,235,1,235,1,235,1,235,1,235,1,235,1,235,3,235,2443,8,235,1,235,1,235,
  	3,235,2447,8,235,1,236,1,236,1,236,3,236,2452,8,236,1,237,1,237,1,237,
  	1,237,1,237,1,237,1,237,3,237,2461,8,237,1,237,1,237,1,238,1,238,1,238,
  	1,238,3,238,2469,8,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,3,238,
  	2478,8,238,1,238,1,238,1,238,1,238,5,238,2484,8,238,10,238,12,238,2487,
  	9,238,1,238,1,238,1,238,1,238,3,238,2493,8,238,1,238,1,238,1,238,3,238,
  	2498,8,238,1,238,1,238,1,238,3,238,2503,8,238,1,238,1,238,1,239,1,239,
  	1,239,1,239,4,239,2511,8,239,11,239,12,239,2512,1,239,1,239,1,239,3,239,
  	2518,8,239,1,239,1,239,1,240,1,240,1,240,1,240,3,240,2526,8,240,1,240,
  	1,240,1,240,1,240,1,241,5,241,2533,8,241,10,241,12,241,2536,9,241,1,241,
  	1,241,5,241,2540,8,241,10,241,12,241,2543,9,241,1,241,1,241,3,241,2547,
  	8,241,1,241,1,241,5,241,2551,8,241,10,241,12,241,2554,9,241,3,241,2556,
  	8,241,1,242,5,242,2559,8,242,10,242,12,242,2562,9,242,1,242,1,242,5,242,
  	2566,8,242,10,242,12,242,2569,9,242,1,242,5,242,2572,8,242,10,242,12,
  	242,2575,9,242,3,242,2577,8,242,1,243,1,243,1,244,1,244,1,244,1,244,5,
  	244,2585,8,244,10,244,12,244,2588,9,244,1,244,1,244,1,245,5,245,2593,
  	8,245,10,245,12,245,2596,9,245,1,245,1,245,1,246,1,246,1,246,1,247,1,
  	247,3,247,2605,8,247,1,248,1,248,1,248,1,248,1,248,3,248,2612,8,248,1,
  	249,1,249,3,249,2616,8,249,1,250,1,250,1,250,1,250,1,251,1,251,1,252,
  	1,252,1,252,1,252,1,252,1,252,3,252,2630,8,252,1,252,3,252,2633,8,252,
  	1,252,1,252,1,253,5,253,2638,8,253,10,253,12,253,2641,9,253,1,254,1,254,
  	1,254,3,254,2646,8,254,1,255,1,255,1,255,1,255,5,255,2652,8,255,10,255,
  	12,255,2655,9,255,1,255,1,255,1,256,1,256,1,256,0,3,4,312,314,257,0,2,
  	4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
  	52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
  	98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
  	134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
  	170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
  	206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
  	242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,
  	278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
  	314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,
  	350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,
  	386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,
  	422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,
  	458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,
  	494,496,498,500,502,504,506,508,510,512,0,18,1,0,1,106,2,0,18,18,81,81,
  	2,0,34,34,52,52,2,0,44,44,62,62,2,0,42,42,102,102,2,0,68,68,91,91,5,0,
  	4,4,48,48,68,68,75,75,91,91,17,0,5,5,13,13,15,15,17,17,28,28,34,34,38,
  	39,43,43,47,47,52,52,63,63,82,83,87,87,94,94,96,96,99,99,101,101,3,0,
  	28,28,38,38,47,47,6,0,16,16,41,41,55,55,67,67,74,74,77,77,2,0,139,149,
  	158,158,6,0,31,31,35,35,58,58,60,60,89,89,92,92,1,0,150,152,1,0,150,151,
  	3,0,10,10,25,25,155,156,3,0,6,6,98,98,157,157,2,0,109,109,111,111,1,0,
  	107,108,2787,0,514,1,0,0,0,2,519,1,0,0,0,4,524,1,0,0,0,6,539,1,0,0,0,
  	8,544,1,0,0,0,10,549,1,0,0,0,12,554,1,0,0,0,14,556,1,0,0,0,16,560,1,0,
  	0,0,18,568,1,0,0,0,20,604,1,0,0,0,22,609,1,0,0,0,24,616,1,0,0,0,26,646,
  	1,0,0,0,28,648,1,0,0,0,30,680,1,0,0,0,32,682,1,0,0,0,34,700,1,0,0,0,36,
  	710,1,0,0,0,38,714,1,0,0,0,40,716,1,0,0,0,42,738,1,0,0,0,44,743,1,0,0,
  	0,46,745,1,0,0,0,48,760,1,0,0,0,50,779,1,0,0,0,52,788,1,0,0,0,54,790,
  	1,0,0,0,56,792,1,0,0,0,58,794,1,0,0,0,60,818,1,0,0,0,62,820,1,0,0,0,64,
  	833,1,0,0,0,66,850,1,0,0,0,68,880,1,0,0,0,70,882,1,0,0,0,72,902,1,0,0,
  	0,74,916,1,0,0,0,76,918,1,0,0,0,78,923,1,0,0,0,80,925,1,0,0,0,82,927,
  	1,0,0,0,84,940,1,0,0,0,86,942,1,0,0,0,88,944,1,0,0,0,90,958,1,0,0,0,92,
  	961,1,0,0,0,94,966,1,0,0,0,96,970,1,0,0,0,98,974,1,0,0,0,100,976,1,0,
  	0,0,102,990,1,0,0,0,104,995,1,0,0,0,106,1009,1,0,0,0,108,1011,1,0,0,0,
  	110,1013,1,0,0,0,112,1026,1,0,0,0,114,1028,1,0,0,0,116,1039,1,0,0,0,118,
  	1044,1,0,0,0,120,1052,1,0,0,0,122,1054,1,0,0,0,124,1065,1,0,0,0,126,1068,
  	1,0,0,0,128,1071,1,0,0,0,130,1075,1,0,0,0,132,1081,1,0,0,0,134,1083,1,
  	0,0,0,136,1099,1,0,0,0,138,1101,1,0,0,0,140,1117,1,0,0,0,142,1119,1,0,
  	0,0,144,1130,1,0,0,0,146,1132,1,0,0,0,148,1139,1,0,0,0,150,1150,1,0,0,
  	0,152,1154,1,0,0,0,154,1156,1,0,0,0,156,1158,1,0,0,0,158,1166,1,0,0,0,
  	160,1169,1,0,0,0,162,1173,1,0,0,0,164,1177,1,0,0,0,166,1183,1,0,0,0,168,
  	1185,1,0,0,0,170,1195,1,0,0,0,172,1208,1,0,0,0,174,1211,1,0,0,0,176,1223,
  	1,0,0,0,178,1234,1,0,0,0,180,1242,1,0,0,0,182,1248,1,0,0,0,184,1254,1,
  	0,0,0,186,1256,1,0,0,0,188,1268,1,0,0,0,190,1283,1,0,0,0,192,1294,1,0,
  	0,0,194,1299,1,0,0,0,196,1301,1,0,0,0,198,1303,1,0,0,0,200,1306,1,0,0,
  	0,202,1313,1,0,0,0,204,1315,1,0,0,0,206,1327,1,0,0,0,208,1345,1,0,0,0,
  	210,1347,1,0,0,0,212,1365,1,0,0,0,214,1367,1,0,0,0,216,1375,1,0,0,0,218,
  	1377,1,0,0,0,220,1383,1,0,0,0,222,1385,1,0,0,0,224,1391,1,0,0,0,226,1393,
  	1,0,0,0,228,1407,1,0,0,0,230,1411,1,0,0,0,232,1424,1,0,0,0,234,1432,1,
  	0,0,0,236,1434,1,0,0,0,238,1438,1,0,0,0,240,1442,1,0,0,0,242,1458,1,0,
  	0,0,244,1460,1,0,0,0,246,1466,1,0,0,0,248,1484,1,0,0,0,250,1492,1,0,0,
  	0,252,1500,1,0,0,0,254,1504,1,0,0,0,256,1513,1,0,0,0,258,1521,1,0,0,0,
  	260,1523,1,0,0,0,262,1531,1,0,0,0,264,1535,1,0,0,0,266,1547,1,0,0,0,268,
  	1549,1,0,0,0,270,1556,1,0,0,0,272,1560,1,0,0,0,274,1562,1,0,0,0,276,1571,
  	1,0,0,0,278,1586,1,0,0,0,280,1600,1,0,0,0,282,1604,1,0,0,0,284,1623,1,
  	0,0,0,286,1625,1,0,0,0,288,1629,1,0,0,0,290,1637,1,0,0,0,292,1643,1,0,
  	0,0,294,1657,1,0,0,0,296,1661,1,0,0,0,298,1663,1,0,0,0,300,1673,1,0,0,
  	0,302,1675,1,0,0,0,304,1688,1,0,0,0,306,1695,1,0,0,0,308,1705,1,0,0,0,
  	310,1710,1,0,0,0,312,1721,1,0,0,0,314,1755,1,0,0,0,316,1776,1,0,0,0,318,
  	1778,1,0,0,0,320,1780,1,0,0,0,322,1782,1,0,0,0,324,1784,1,0,0,0,326,1786,
  	1,0,0,0,328,1788,1,0,0,0,330,1790,1,0,0,0,332,1801,1,0,0,0,334,1804,1,
  	0,0,0,336,1808,1,0,0,0,338,1822,1,0,0,0,340,1826,1,0,0,0,342,1837,1,0,
  	0,0,344,1839,1,0,0,0,346,1843,1,0,0,0,348,1851,1,0,0,0,350,1857,1,0,0,
  	0,352,1874,1,0,0,0,354,1886,1,0,0,0,356,1889,1,0,0,0,358,1897,1,0,0,0,
  	360,1900,1,0,0,0,362,1902,1,0,0,0,364,1905,1,0,0,0,366,1908,1,0,0,0,368,
  	1918,1,0,0,0,370,1929,1,0,0,0,372,1934,1,0,0,0,374,1936,1,0,0,0,376,1944,
  	1,0,0,0,378,1953,1,0,0,0,380,1961,1,0,0,0,382,1969,1,0,0,0,384,1973,1,
  	0,0,0,386,1984,1,0,0,0,388,1996,1,0,0,0,390,2000,1,0,0,0,392,2002,1,0,
  	0,0,394,2010,1,0,0,0,396,2028,1,0,0,0,398,2037,1,0,0,0,400,2057,1,0,0,
  	0,402,2059,1,0,0,0,404,2073,1,0,0,0,406,2086,1,0,0,0,408,2101,1,0,0,0,
  	410,2117,1,0,0,0,412,2119,1,0,0,0,414,2124,1,0,0,0,416,2129,1,0,0,0,418,
  	2140,1,0,0,0,420,2143,1,0,0,0,422,2145,1,0,0,0,424,2172,1,0,0,0,426,2193,
  	1,0,0,0,428,2199,1,0,0,0,430,2214,1,0,0,0,432,2216,1,0,0,0,434,2220,1,
  	0,0,0,436,2230,1,0,0,0,438,2240,1,0,0,0,440,2246,1,0,0,0,442,2253,1,0,
  	0,0,444,2264,1,0,0,0,446,2266,1,0,0,0,448,2303,1,0,0,0,450,2314,1,0,0,
  	0,452,2351,1,0,0,0,454,2368,1,0,0,0,456,2373,1,0,0,0,458,2376,1,0,0,0,
  	460,2381,1,0,0,0,462,2386,1,0,0,0,464,2392,1,0,0,0,466,2406,1,0,0,0,468,
  	2423,1,0,0,0,470,2446,1,0,0,0,472,2451,1,0,0,0,474,2453,1,0,0,0,476,2464,
  	1,0,0,0,478,2506,1,0,0,0,480,2521,1,0,0,0,482,2555,1,0,0,0,484,2576,1,
  	0,0,0,486,2578,1,0,0,0,488,2580,1,0,0,0,490,2594,1,0,0,0,492,2599,1,0,
  	0,0,494,2604,1,0,0,0,496,2611,1,0,0,0,498,2615,1,0,0,0,500,2617,1,0,0,
  	0,502,2621,1,0,0,0,504,2623,1,0,0,0,506,2639,1,0,0,0,508,2645,1,0,0,0,
  	510,2647,1,0,0,0,512,2658,1,0,0,0,514,515,7,0,0,0,515,1,1,0,0,0,516,520,
  	3,512,256,0,517,520,3,54,27,0,518,520,5,112,0,0,519,516,1,0,0,0,519,517,
  	1,0,0,0,519,518,1,0,0,0,520,3,1,0,0,0,521,522,6,2,-1,0,522,525,3,2,1,
  	0,523,525,3,298,149,0,524,521,1,0,0,0,524,523,1,0,0,0,525,536,1,0,0,0,
  	526,532,10,2,0,0,527,533,3,6,3,0,528,533,3,8,4,0,529,533,3,226,113,0,
  	530,531,5,136,0,0,531,533,3,12,6,0,532,527,1,0,0,0,532,528,1,0,0,0,532,
  	529,1,0,0,0,532,530,1,0,0,0,533,535,1,0,0,0,534,526,1,0,0,0,535,538,1,
  	0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,5,1,0,0,0,538,536,1,0,0,0,539,
  	540,5,126,0,0,540,541,3,14,7,0,541,542,5,127,0,0,542,7,1,0,0,0,543,545,
  	3,64,32,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,547,5,130,
  	0,0,547,548,3,296,148,0,548,9,1,0,0,0,549,550,3,4,2,0,550,551,3,8,4,0,
  	551,11,1,0,0,0,552,555,3,2,1,0,553,555,5,64,0,0,554,552,1,0,0,0,554,553,
  	1,0,0,0,555,13,1,0,0,0,556,557,3,314,157,0,557,558,3,80,40,0,558,559,
  	3,314,157,0,559,15,1,0,0,0,560,565,3,512,256,0,561,562,5,136,0,0,562,
  	564,3,12,6,0,563,561,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,
  	1,0,0,0,566,17,1,0,0,0,567,565,1,0,0,0,568,569,5,13,0,0,569,570,3,512,
  	256,0,570,572,5,93,0,0,571,573,3,218,109,0,572,571,1,0,0,0,572,573,1,
  	0,0,0,573,575,1,0,0,0,574,576,3,222,111,0,575,574,1,0,0,0,575,576,1,0,
  	0,0,576,580,1,0,0,0,577,579,3,20,10,0,578,577,1,0,0,0,579,582,1,0,0,0,
  	580,578,1,0,0,0,580,581,1,0,0,0,581,590,1,0,0,0,582,580,1,0,0,0,583,587,
  	5,30,0,0,584,586,3,22,11,0,585,584,1,0,0,0,586,589,1,0,0,0,587,585,1,
  	0,0,0,587,588,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,590,583,1,0,0,0,
  	590,591,1,0,0,0,591,592,1,0,0,0,592,594,5,53,0,0,593,595,5,13,0,0,594,
  	593,1,0,0,0,594,595,1,0,0,0,595,597,1,0,0,0,596,598,3,512,256,0,597,596,
  	1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,5,125,0,0,600,19,1,0,
  	0,0,601,605,3,170,85,0,602,605,3,456,228,0,603,605,3,290,145,0,604,601,
  	1,0,0,0,604,602,1,0,0,0,604,603,1,0,0,0,605,21,1,0,0,0,606,607,3,486,
  	243,0,607,608,5,138,0,0,608,610,1,0,0,0,609,606,1,0,0,0,609,610,1,0,0,
  	0,610,614,1,0,0,0,611,615,3,460,230,0,612,615,3,458,229,0,613,615,3,450,
  	225,0,614,611,1,0,0,0,614,612,1,0,0,0,614,613,1,0,0,0,615,23,1,0,0,0,
  	616,617,5,101,0,0,617,618,3,512,256,0,618,619,5,33,0,0,619,620,3,4,2,
  	0,620,624,5,93,0,0,621,623,3,26,13,0,622,621,1,0,0,0,623,626,1,0,0,0,
  	624,622,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,624,1,0,0,0,627,631,
  	5,30,0,0,628,630,3,444,222,0,629,628,1,0,0,0,630,633,1,0,0,0,631,629,
  	1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,0,633,631,1,0,0,0,634,636,5,53,
  	0,0,635,637,5,101,0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,
  	638,640,3,512,256,0,639,638,1,0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,
  	642,5,125,0,0,642,25,1,0,0,0,643,647,3,20,10,0,644,647,3,246,123,0,645,
  	647,3,272,136,0,646,643,1,0,0,0,646,644,1,0,0,0,646,645,1,0,0,0,647,27,
  	1,0,0,0,648,649,5,99,0,0,649,650,3,512,256,0,650,651,5,33,0,0,651,652,
  	3,4,2,0,652,656,5,93,0,0,653,655,3,30,15,0,654,653,1,0,0,0,655,658,1,
  	0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,664,1,0,0,0,658,656,1,0,0,0,
  	659,660,3,286,143,0,660,661,5,125,0,0,661,663,1,0,0,0,662,659,1,0,0,0,
  	663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,666,664,
  	1,0,0,0,667,668,3,32,16,0,668,670,5,53,0,0,669,671,5,99,0,0,670,669,1,
  	0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,672,674,3,512,256,0,673,672,1,0,
  	0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,676,5,125,0,0,676,29,1,0,0,0,
  	677,681,3,488,244,0,678,681,3,260,130,0,679,681,3,254,127,0,680,677,1,
  	0,0,0,680,678,1,0,0,0,680,679,1,0,0,0,681,31,1,0,0,0,682,683,5,88,0,0,
  	683,687,3,34,17,0,684,686,3,488,244,0,685,684,1,0,0,0,686,689,1,0,0,0,
  	687,685,1,0,0,0,687,688,1,0,0,0,688,693,1,0,0,0,689,687,1,0,0,0,690,692,
  	3,38,19,0,691,690,1,0,0,0,692,695,1,0,0,0,693,691,1,0,0,0,693,694,1,0,
  	0,0,694,696,1,0,0,0,695,693,1,0,0,0,696,697,5,53,0,0,697,698,5,88,0,0,
  	698,699,5,125,0,0,699,33,1,0,0,0,700,705,3,486,243,0,701,702,5,126,0,
  	0,702,703,3,36,18,0,703,704,5,127,0,0,704,706,1,0,0,0,705,701,1,0,0,0,
  	705,706,1,0,0,0,706,35,1,0,0,0,707,711,3,112,56,0,708,711,3,312,156,0,
  	709,711,3,486,243,0,710,707,1,0,0,0,710,708,1,0,0,0,710,709,1,0,0,0,711,
  	37,1,0,0,0,712,715,3,32,16,0,713,715,3,40,20,0,714,712,1,0,0,0,714,713,
  	1,0,0,0,715,39,1,0,0,0,716,717,5,88,0,0,717,721,3,278,139,0,718,719,3,
  	282,141,0,719,720,5,125,0,0,720,722,1,0,0,0,721,718,1,0,0,0,721,722,1,
  	0,0,0,722,728,1,0,0,0,723,724,3,286,143,0,724,725,5,125,0,0,725,727,1,
  	0,0,0,726,723,1,0,0,0,727,730,1,0,0,0,728,726,1,0,0,0,728,729,1,0,0,0,
  	729,732,1,0,0,0,730,728,1,0,0,0,731,733,3,32,16,0,732,731,1,0,0,0,732,
  	733,1,0,0,0,733,734,1,0,0,0,734,735,5,53,0,0,735,736,5,88,0,0,736,737,
  	5,125,0,0,737,41,1,0,0,0,738,739,3,44,22,0,739,740,5,125,0,0,740,43,1,
  	0,0,0,741,744,3,46,23,0,742,744,3,48,24,0,743,741,1,0,0,0,743,742,1,0,
  	0,0,744,45,1,0,0,0,745,746,5,34,0,0,746,748,3,52,26,0,747,749,3,50,25,
  	0,748,747,1,0,0,0,748,749,1,0,0,0,749,757,1,0,0,0,750,752,5,85,0,0,751,
  	750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,754,5,126,0,0,754,755,
  	3,56,28,0,755,756,5,127,0,0,756,758,1,0,0,0,757,751,1,0,0,0,757,758,1,
  	0,0,0,758,47,1,0,0,0,759,761,7,1,0,0,760,759,1,0,0,0,760,761,1,0,0,0,
  	761,762,1,0,0,0,762,763,5,52,0,0,763,765,3,52,26,0,764,766,3,50,25,0,
  	765,764,1,0,0,0,765,766,1,0,0,0,766,774,1,0,0,0,767,769,5,85,0,0,768,
  	767,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,5,126,0,0,771,772,
  	3,56,28,0,772,773,5,127,0,0,773,775,1,0,0,0,774,768,1,0,0,0,774,775,1,
  	0,0,0,775,776,1,0,0,0,776,777,5,71,0,0,777,778,3,160,80,0,778,49,1,0,
  	0,0,779,780,5,20,0,0,780,781,5,126,0,0,781,782,3,220,110,0,782,784,5,
  	127,0,0,783,785,3,236,118,0,784,783,1,0,0,0,784,785,1,0,0,0,785,51,1,
  	0,0,0,786,789,3,512,256,0,787,789,3,54,27,0,788,786,1,0,0,0,788,787,1,
  	0,0,0,789,53,1,0,0,0,790,791,5,113,0,0,791,55,1,0,0,0,792,793,3,214,107,
  	0,793,57,1,0,0,0,794,795,3,44,22,0,795,799,5,93,0,0,796,798,3,456,228,
  	0,797,796,1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,
  	802,1,0,0,0,801,799,1,0,0,0,802,806,5,30,0,0,803,805,3,350,175,0,804,
  	803,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,809,1,
  	0,0,0,808,806,1,0,0,0,809,811,5,53,0,0,810,812,3,60,30,0,811,810,1,0,
  	0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,815,3,52,26,0,814,813,1,0,0,0,
  	814,815,1,0,0,0,815,816,1,0,0,0,816,817,5,125,0,0,817,59,1,0,0,0,818,
  	819,7,2,0,0,819,61,1,0,0,0,820,821,3,60,30,0,821,822,3,52,26,0,822,823,
  	5,93,0,0,823,824,5,45,0,0,824,826,3,4,2,0,825,827,3,64,32,0,826,825,1,
  	0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,830,3,236,118,0,829,828,1,0,
  	0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,5,125,0,0,832,63,1,0,0,0,
  	833,842,5,128,0,0,834,839,3,160,80,0,835,836,5,135,0,0,836,838,3,160,
  	80,0,837,835,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,
  	840,843,1,0,0,0,841,839,1,0,0,0,842,834,1,0,0,0,842,843,1,0,0,0,843,846,
  	1,0,0,0,844,845,5,71,0,0,845,847,3,160,80,0,846,844,1,0,0,0,846,847,1,
  	0,0,0,847,848,1,0,0,0,848,849,5,129,0,0,849,65,1,0,0,0,850,851,5,82,0,
  	0,851,852,3,512,256,0,852,859,5,93,0,0,853,857,3,218,109,0,854,855,3,
  	236,118,0,855,856,5,125,0,0,856,858,1,0,0,0,857,854,1,0,0,0,857,858,1,
  	0,0,0,858,860,1,0,0,0,859,853,1,0,0,0,859,860,1,0,0,0,860,864,1,0,0,0,
  	861,863,3,68,34,0,862,861,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,864,
  	865,1,0,0,0,865,867,1,0,0,0,866,864,1,0,0,0,867,869,5,53,0,0,868,870,
  	5,82,0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,873,3,512,
  	256,0,872,871,1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,0,874,875,5,125,0,
  	0,875,67,1,0,0,0,876,881,3,454,227,0,877,881,3,170,85,0,878,881,3,246,
  	123,0,879,881,3,290,145,0,880,876,1,0,0,0,880,877,1,0,0,0,880,878,1,0,
  	0,0,880,879,1,0,0,0,881,69,1,0,0,0,882,883,5,82,0,0,883,884,5,49,0,0,
  	884,885,3,512,256,0,885,889,5,93,0,0,886,888,3,456,228,0,887,886,1,0,
  	0,0,888,891,1,0,0,0,889,887,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,
  	889,1,0,0,0,892,895,5,53,0,0,893,894,5,82,0,0,894,896,5,49,0,0,895,893,
  	1,0,0,0,895,896,1,0,0,0,896,898,1,0,0,0,897,899,3,512,256,0,898,897,1,
  	0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,901,5,125,0,0,901,71,1,0,0,
  	0,902,903,5,82,0,0,903,904,3,512,256,0,904,905,5,93,0,0,905,906,5,45,
  	0,0,906,908,3,4,2,0,907,909,3,236,118,0,908,907,1,0,0,0,908,909,1,0,0,
  	0,909,910,1,0,0,0,910,911,5,125,0,0,911,73,1,0,0,0,912,917,3,82,41,0,
  	913,917,3,86,43,0,914,917,3,94,47,0,915,917,3,88,44,0,916,912,1,0,0,0,
  	916,913,1,0,0,0,916,914,1,0,0,0,916,915,1,0,0,0,917,75,1,0,0,0,918,919,
  	5,21,0,0,919,920,3,78,39,0,920,77,1,0,0,0,921,924,3,10,5,0,922,924,3,
  	14,7,0,923,921,1,0,0,0,923,922,1,0,0,0,924,79,1,0,0,0,925,926,7,3,0,0,
  	926,81,1,0,0,0,927,928,5,126,0,0,928,933,3,84,42,0,929,930,5,135,0,0,
  	930,932,3,84,42,0,931,929,1,0,0,0,932,935,1,0,0,0,933,931,1,0,0,0,933,
  	934,1,0,0,0,934,936,1,0,0,0,935,933,1,0,0,0,936,937,5,127,0,0,937,83,
  	1,0,0,0,938,941,3,512,256,0,939,941,5,112,0,0,940,938,1,0,0,0,940,939,
  	1,0,0,0,941,85,1,0,0,0,942,943,3,76,38,0,943,87,1,0,0,0,944,945,3,76,
  	38,0,945,946,5,83,0,0,946,950,3,90,45,0,947,949,3,92,46,0,948,947,1,0,
  	0,0,949,952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,
  	950,1,0,0,0,953,954,5,53,0,0,954,956,5,83,0,0,955,957,3,512,256,0,956,
  	955,1,0,0,0,956,957,1,0,0,0,957,89,1,0,0,0,958,959,3,512,256,0,959,960,
  	5,125,0,0,960,91,1,0,0,0,961,962,3,512,256,0,962,963,5,139,0,0,963,964,
  	3,334,167,0,964,965,5,125,0,0,965,93,1,0,0,0,966,967,3,76,38,0,967,95,
  	1,0,0,0,968,971,3,98,49,0,969,971,3,114,57,0,970,968,1,0,0,0,970,969,
  	1,0,0,0,971,97,1,0,0,0,972,975,3,100,50,0,973,975,3,102,51,0,974,972,
  	1,0,0,0,974,973,1,0,0,0,975,99,1,0,0,0,976,977,5,78,0,0,977,978,5,126,
  	0,0,978,983,3,104,52,0,979,980,5,135,0,0,980,982,3,104,52,0,981,979,1,
  	0,0,0,982,985,1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,
  	985,983,1,0,0,0,986,987,5,127,0,0,987,988,5,33,0,0,988,989,3,148,74,0,
  	989,101,1,0,0,0,990,991,5,78,0,0,991,992,3,110,55,0,992,993,5,33,0,0,
  	993,994,3,148,74,0,994,103,1,0,0,0,995,996,3,160,80,0,996,997,5,21,0,
  	0,997,998,5,162,0,0,998,105,1,0,0,0,999,1001,3,110,55,0,1000,1002,3,108,
  	54,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1010,1,0,0,0,1003,1004,
  	5,126,0,0,1004,1005,5,100,0,0,1005,1007,5,127,0,0,1006,1008,3,108,54,
  	0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1010,1,0,0,0,1009,999,1,0,
  	0,0,1009,1003,1,0,0,0,1010,107,1,0,0,0,1011,1012,3,164,82,0,1012,109,
  	1,0,0,0,1013,1014,5,126,0,0,1014,1019,3,112,56,0,1015,1016,5,135,0,0,
  	1016,1018,3,112,56,0,1017,1015,1,0,0,0,1018,1021,1,0,0,0,1019,1017,1,
  	0,0,0,1019,1020,1,0,0,0,1020,1022,1,0,0,0,1021,1019,1,0,0,0,1022,1023,
  	5,127,0,0,1023,111,1,0,0,0,1024,1027,3,148,74,0,1025,1027,3,78,39,0,1026,
  	1024,1,0,0,0,1026,1025,1,0,0,0,1027,113,1,0,0,0,1028,1030,5,27,0,0,1029,
  	1031,3,116,58,0,1030,1029,1,0,0,0,1031,1032,1,0,0,0,1032,1030,1,0,0,0,
  	1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1035,5,53,0,0,1035,1037,5,27,
  	0,0,1036,1038,3,512,256,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,115,
  	1,0,0,0,1039,1040,3,118,59,0,1040,1041,5,138,0,0,1041,1042,3,120,60,0,
  	1042,1043,5,125,0,0,1043,117,1,0,0,0,1044,1049,3,512,256,0,1045,1046,
  	5,135,0,0,1046,1048,3,512,256,0,1047,1045,1,0,0,0,1048,1051,1,0,0,0,1049,
  	1047,1,0,0,0,1049,1050,1,0,0,0,1050,119,1,0,0,0,1051,1049,1,0,0,0,1052,
  	1053,3,148,74,0,1053,121,1,0,0,0,1054,1055,5,126,0,0,1055,1060,3,124,
  	62,0,1056,1057,5,135,0,0,1057,1059,3,124,62,0,1058,1056,1,0,0,0,1059,
  	1062,1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,0,1062,
  	1060,1,0,0,0,1063,1064,5,127,0,0,1064,123,1,0,0,0,1065,1066,3,512,256,
  	0,1066,1067,3,164,82,0,1067,125,1,0,0,0,1068,1069,5,103,0,0,1069,1070,
  	3,148,74,0,1070,127,1,0,0,0,1071,1072,5,96,0,0,1072,1073,3,512,256,0,
  	1073,1074,5,125,0,0,1074,129,1,0,0,0,1075,1076,5,17,0,0,1076,1077,5,33,
  	0,0,1077,1078,3,160,80,0,1078,131,1,0,0,0,1079,1082,3,134,67,0,1080,1082,
  	3,138,69,0,1081,1079,1,0,0,0,1081,1080,1,0,0,0,1082,133,1,0,0,0,1083,
  	1087,5,61,0,0,1084,1086,3,136,68,0,1085,1084,1,0,0,0,1086,1089,1,0,0,
  	0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1090,1,0,0,0,1089,1087,1,0,
  	0,0,1090,1091,5,53,0,0,1091,1093,5,61,0,0,1092,1094,3,512,256,0,1093,
  	1092,1,0,0,0,1093,1094,1,0,0,0,1094,135,1,0,0,0,1095,1100,3,42,21,0,1096,
  	1100,3,62,31,0,1097,1100,3,260,130,0,1098,1100,3,488,244,0,1099,1095,
  	1,0,0,0,1099,1096,1,0,0,0,1099,1097,1,0,0,0,1099,1098,1,0,0,0,1100,137,
  	1,0,0,0,1101,1102,5,61,0,0,1102,1106,5,49,0,0,1103,1105,3,456,228,0,1104,
  	1103,1,0,0,0,1105,1108,1,0,0,0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,
  	1109,1,0,0,0,1108,1106,1,0,0,0,1109,1110,5,53,0,0,1110,1111,5,61,0,0,
  	1111,1113,5,49,0,0,1112,1114,3,512,256,0,1113,1112,1,0,0,0,1113,1114,
  	1,0,0,0,1114,139,1,0,0,0,1115,1118,3,142,71,0,1116,1118,3,128,64,0,1117,
  	1115,1,0,0,0,1117,1116,1,0,0,0,1118,141,1,0,0,0,1119,1120,5,96,0,0,1120,
  	1121,3,512,256,0,1121,1122,5,93,0,0,1122,1123,3,144,72,0,1123,1124,5,
  	125,0,0,1124,143,1,0,0,0,1125,1131,3,74,37,0,1126,1131,3,96,48,0,1127,
  	1131,3,126,63,0,1128,1131,3,130,65,0,1129,1131,3,132,66,0,1130,1125,1,
  	0,0,0,1130,1126,1,0,0,0,1130,1127,1,0,0,0,1130,1128,1,0,0,0,1130,1129,
  	1,0,0,0,1131,145,1,0,0,0,1132,1133,5,43,0,0,1133,1134,3,512,256,0,1134,
  	1135,5,93,0,0,1135,1136,3,148,74,0,1136,1137,5,125,0,0,1137,147,1,0,0,
  	0,1138,1140,3,150,75,0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,1141,
  	1,0,0,0,1141,1143,3,160,80,0,1142,1144,3,162,81,0,1143,1142,1,0,0,0,1143,
  	1144,1,0,0,0,1144,149,1,0,0,0,1145,1151,3,4,2,0,1146,1147,5,126,0,0,1147,
  	1148,3,152,76,0,1148,1149,5,127,0,0,1149,1151,1,0,0,0,1150,1145,1,0,0,
  	0,1150,1146,1,0,0,0,1151,151,1,0,0,0,1152,1155,3,154,77,0,1153,1155,3,
  	156,78,0,1154,1152,1,0,0,0,1154,1153,1,0,0,0,1155,153,1,0,0,0,1156,1157,
  	3,150,75,0,1157,155,1,0,0,0,1158,1163,3,158,79,0,1159,1160,5,135,0,0,
  	1160,1162,3,158,79,0,1161,1159,1,0,0,0,1162,1165,1,0,0,0,1163,1161,1,
  	0,0,0,1163,1164,1,0,0,0,1164,157,1,0,0,0,1165,1163,1,0,0,0,1166,1167,
  	3,512,256,0,1167,1168,3,150,75,0,1168,159,1,0,0,0,1169,1170,3,4,2,0,1170,
  	161,1,0,0,0,1171,1174,3,76,38,0,1172,1174,3,164,82,0,1173,1171,1,0,0,
  	0,1173,1172,1,0,0,0,1174,163,1,0,0,0,1175,1178,3,106,53,0,1176,1178,3,
  	122,61,0,1177,1175,1,0,0,0,1177,1176,1,0,0,0,1178,165,1,0,0,0,1179,1184,
  	3,168,84,0,1180,1184,3,170,85,0,1181,1184,3,174,87,0,1182,1184,3,176,
  	88,0,1183,1179,1,0,0,0,1183,1180,1,0,0,0,1183,1181,1,0,0,0,1183,1182,
  	1,0,0,0,1184,167,1,0,0,0,1185,1186,5,47,0,0,1186,1187,3,118,59,0,1187,
  	1188,5,138,0,0,1188,1191,3,148,74,0,1189,1190,5,161,0,0,1190,1192,3,312,
  	156,0,1191,1189,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,1193,1194,
  	5,125,0,0,1194,169,1,0,0,0,1195,1196,5,28,0,0,1196,1197,3,118,59,0,1197,
  	1198,5,138,0,0,1198,1200,3,148,74,0,1199,1201,3,172,86,0,1200,1199,1,
  	0,0,0,1200,1201,1,0,0,0,1201,1204,1,0,0,0,1202,1203,5,161,0,0,1203,1205,
  	3,312,156,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,1206,1,0,0,0,1206,
  	1207,5,125,0,0,1207,171,1,0,0,0,1208,1209,7,4,0,0,1209,173,1,0,0,0,1210,
  	1212,5,24,0,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,
  	1214,5,38,0,0,1214,1215,3,118,59,0,1215,1216,5,138,0,0,1216,1219,3,148,
  	74,0,1217,1218,5,161,0,0,1218,1220,3,312,156,0,1219,1217,1,0,0,0,1219,
  	1220,1,0,0,0,1220,1221,1,0,0,0,1221,1222,5,125,0,0,1222,175,1,0,0,0,1223,
  	1224,5,17,0,0,1224,1225,3,118,59,0,1225,1226,5,138,0,0,1226,1228,3,148,
  	74,0,1227,1229,3,178,89,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,1230,
  	1,0,0,0,1230,1231,5,125,0,0,1231,177,1,0,0,0,1232,1233,5,100,0,0,1233,
  	1235,3,312,156,0,1234,1232,1,0,0,0,1234,1235,1,0,0,0,1235,1236,1,0,0,
  	0,1236,1238,5,93,0,0,1237,1239,7,5,0,0,1238,1237,1,0,0,0,1238,1239,1,
  	0,0,0,1239,1240,1,0,0,0,1240,1241,3,180,90,0,1241,179,1,0,0,0,1242,1243,
  	3,312,156,0,1243,181,1,0,0,0,1244,1249,3,184,92,0,1245,1249,3,196,98,
  	0,1246,1249,3,200,100,0,1247,1249,3,210,105,0,1248,1244,1,0,0,0,1248,
  	1245,1,0,0,0,1248,1246,1,0,0,0,1248,1247,1,0,0,0,1249,183,1,0,0,0,1250,
  	1255,3,186,93,0,1251,1255,3,188,94,0,1252,1255,3,190,95,0,1253,1255,3,
  	192,96,0,1254,1250,1,0,0,0,1254,1251,1,0,0,0,1254,1252,1,0,0,0,1254,1253,
  	1,0,0,0,1255,185,1,0,0,0,1256,1257,5,47,0,0,1257,1258,3,118,59,0,1258,
  	1260,5,138,0,0,1259,1261,5,68,0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,
  	1261,1262,1,0,0,0,1262,1265,3,148,74,0,1263,1264,5,161,0,0,1264,1266,
  	3,312,156,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,187,1,0,0,0,1267,
  	1269,5,28,0,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1270,1,0,0,0,1270,
  	1271,3,118,59,0,1271,1273,5,138,0,0,1272,1274,3,194,97,0,1273,1272,1,
  	0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1277,3,148,74,0,1276,1278,
  	5,102,0,0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,1278,1281,1,0,0,0,1279,
  	1280,5,161,0,0,1280,1282,3,312,156,0,1281,1279,1,0,0,0,1281,1282,1,0,
  	0,0,1282,189,1,0,0,0,1283,1284,5,38,0,0,1284,1285,3,118,59,0,1285,1287,
  	5,138,0,0,1286,1288,3,194,97,0,1287,1286,1,0,0,0,1287,1288,1,0,0,0,1288,
  	1289,1,0,0,0,1289,1292,3,148,74,0,1290,1291,5,161,0,0,1291,1293,3,312,
  	156,0,1292,1290,1,0,0,0,1292,1293,1,0,0,0,1293,191,1,0,0,0,1294,1295,
  	5,17,0,0,1295,1296,3,118,59,0,1296,1297,5,138,0,0,1297,1298,3,148,74,
  	0,1298,193,1,0,0,0,1299,1300,7,6,0,0,1300,195,1,0,0,0,1301,1302,3,198,
  	99,0,1302,197,1,0,0,0,1303,1304,5,96,0,0,1304,1305,3,512,256,0,1305,199,
  	1,0,0,0,1306,1309,3,202,101,0,1307,1308,5,93,0,0,1308,1310,3,208,104,
  	0,1309,1307,1,0,0,0,1309,1310,1,0,0,0,1310,201,1,0,0,0,1311,1314,3,204,
  	102,0,1312,1314,3,206,103,0,1313,1311,1,0,0,0,1313,1312,1,0,0,0,1314,
  	203,1,0,0,0,1315,1316,5,34,0,0,1316,1324,3,52,26,0,1317,1319,5,85,0,0,
  	1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1321,5,126,
  	0,0,1321,1322,3,56,28,0,1322,1323,5,127,0,0,1323,1325,1,0,0,0,1324,1318,
  	1,0,0,0,1324,1325,1,0,0,0,1325,205,1,0,0,0,1326,1328,7,1,0,0,1327,1326,
  	1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,1330,5,52,0,0,1330,1338,
  	3,52,26,0,1331,1333,5,85,0,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,
  	1334,1,0,0,0,1334,1335,5,126,0,0,1335,1336,3,56,28,0,1336,1337,5,127,
  	0,0,1337,1339,1,0,0,0,1338,1332,1,0,0,0,1338,1339,1,0,0,0,1339,1340,1,
  	0,0,0,1340,1341,5,71,0,0,1341,1342,3,160,80,0,1342,207,1,0,0,0,1343,1346,
  	3,4,2,0,1344,1346,5,162,0,0,1345,1343,1,0,0,0,1345,1344,1,0,0,0,1346,
  	209,1,0,0,0,1347,1348,5,82,0,0,1348,1349,3,512,256,0,1349,1350,5,93,0,
  	0,1350,1351,5,45,0,0,1351,1352,3,4,2,0,1352,1353,3,212,106,0,1353,211,
  	1,0,0,0,1354,1366,3,236,118,0,1355,1356,5,20,0,0,1356,1357,5,59,0,0,1357,
  	1358,5,126,0,0,1358,1359,5,162,0,0,1359,1366,5,127,0,0,1360,1361,5,20,
  	0,0,1361,1362,5,59,0,0,1362,1363,5,126,0,0,1363,1364,5,7,0,0,1364,1366,
  	5,127,0,0,1365,1354,1,0,0,0,1365,1355,1,0,0,0,1365,1360,1,0,0,0,1366,
  	213,1,0,0,0,1367,1372,3,216,108,0,1368,1369,5,125,0,0,1369,1371,3,216,
  	108,0,1370,1368,1,0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,1372,1373,
  	1,0,0,0,1373,215,1,0,0,0,1374,1372,1,0,0,0,1375,1376,3,182,91,0,1376,
  	217,1,0,0,0,1377,1378,5,20,0,0,1378,1379,5,126,0,0,1379,1380,3,220,110,
  	0,1380,1381,5,127,0,0,1381,1382,5,125,0,0,1382,219,1,0,0,0,1383,1384,
  	3,214,107,0,1384,221,1,0,0,0,1385,1386,5,105,0,0,1386,1387,5,126,0,0,
  	1387,1388,3,224,112,0,1388,1389,5,127,0,0,1389,1390,5,125,0,0,1390,223,
  	1,0,0,0,1391,1392,3,214,107,0,1392,225,1,0,0,0,1393,1394,5,126,0,0,1394,
  	1399,3,228,114,0,1395,1396,5,135,0,0,1396,1398,3,228,114,0,1397,1395,
  	1,0,0,0,1398,1401,1,0,0,0,1399,1397,1,0,0,0,1399,1400,1,0,0,0,1400,1402,
  	1,0,0,0,1401,1399,1,0,0,0,1402,1403,5,127,0,0,1403,227,1,0,0,0,1404,1405,
  	3,230,115,0,1405,1406,5,163,0,0,1406,1408,1,0,0,0,1407,1404,1,0,0,0,1407,
  	1408,1,0,0,0,1408,1409,1,0,0,0,1409,1410,3,232,116,0,1410,229,1,0,0,0,
  	1411,1416,3,4,2,0,1412,1413,5,126,0,0,1413,1414,3,4,2,0,1414,1415,5,127,
  	0,0,1415,1417,1,0,0,0,1416,1412,1,0,0,0,1416,1417,1,0,0,0,1417,231,1,
  	0,0,0,1418,1419,3,4,2,0,1419,1420,5,126,0,0,1420,1421,3,234,117,0,1421,
  	1422,5,127,0,0,1422,1425,1,0,0,0,1423,1425,3,234,117,0,1424,1418,1,0,
  	0,0,1424,1423,1,0,0,0,1425,233,1,0,0,0,1426,1428,5,11,0,0,1427,1426,1,
  	0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1433,3,312,156,0,1430,
  	1433,3,148,74,0,1431,1433,5,100,0,0,1432,1427,1,0,0,0,1432,1430,1,0,0,
  	0,1432,1431,1,0,0,0,1433,235,1,0,0,0,1434,1435,5,20,0,0,1435,1436,5,59,
  	0,0,1436,1437,3,226,113,0,1437,237,1,0,0,0,1438,1439,5,105,0,0,1439,1440,
  	5,59,0,0,1440,1441,3,226,113,0,1441,239,1,0,0,0,1442,1443,5,65,0,0,1443,
  	1446,3,242,121,0,1444,1445,5,138,0,0,1445,1447,3,148,74,0,1446,1444,1,
  	0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,1449,5,93,0,0,1449,1451,
  	3,4,2,0,1450,1452,3,64,32,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,
  	1453,1,0,0,0,1453,1454,5,125,0,0,1454,241,1,0,0,0,1455,1459,3,512,256,
  	0,1456,1459,5,112,0,0,1457,1459,3,54,27,0,1458,1455,1,0,0,0,1458,1456,
  	1,0,0,0,1458,1457,1,0,0,0,1459,243,1,0,0,0,1460,1461,5,37,0,0,1461,1462,
  	3,512,256,0,1462,1463,5,138,0,0,1463,1464,3,160,80,0,1464,1465,5,125,
  	0,0,1465,245,1,0,0,0,1466,1467,5,5,0,0,1467,1469,3,512,256,0,1468,1470,
  	5,93,0,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,1472,1,0,0,0,1471,1473,
  	3,218,109,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1475,1,0,0,0,1474,
  	1476,3,222,111,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1477,1,0,0,
  	0,1477,1478,5,53,0,0,1478,1480,5,5,0,0,1479,1481,3,512,256,0,1480,1479,
  	1,0,0,0,1480,1481,1,0,0,0,1481,1482,1,0,0,0,1482,1483,5,125,0,0,1483,
  	247,1,0,0,0,1484,1485,5,15,0,0,1485,1486,3,512,256,0,1486,1487,5,93,0,
  	0,1487,1488,5,126,0,0,1488,1489,3,250,125,0,1489,1490,5,127,0,0,1490,
  	1491,5,125,0,0,1491,249,1,0,0,0,1492,1497,3,252,126,0,1493,1494,5,135,
  	0,0,1494,1496,3,252,126,0,1495,1493,1,0,0,0,1496,1499,1,0,0,0,1497,1495,
  	1,0,0,0,1497,1498,1,0,0,0,1498,251,1,0,0,0,1499,1497,1,0,0,0,1500,1502,
  	3,264,132,0,1501,1503,5,162,0,0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,
  	253,1,0,0,0,1504,1505,5,15,0,0,1505,1506,3,512,256,0,1506,1507,5,138,
  	0,0,1507,1508,3,4,2,0,1508,1509,5,126,0,0,1509,1510,3,256,128,0,1510,
  	1511,5,127,0,0,1511,1512,5,125,0,0,1512,255,1,0,0,0,1513,1518,3,258,129,
  	0,1514,1515,5,135,0,0,1515,1517,3,258,129,0,1516,1514,1,0,0,0,1517,1520,
  	1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,1519,257,1,0,0,0,1520,1518,
  	1,0,0,0,1521,1522,3,4,2,0,1522,259,1,0,0,0,1523,1524,5,37,0,0,1524,1525,
  	3,296,148,0,1525,1526,5,33,0,0,1526,1527,3,262,131,0,1527,1528,5,93,0,
  	0,1528,1529,3,312,156,0,1529,1530,5,125,0,0,1530,261,1,0,0,0,1531,1532,
  	3,266,133,0,1532,1533,5,138,0,0,1533,1534,3,264,132,0,1534,263,1,0,0,
  	0,1535,1536,7,7,0,0,1536,265,1,0,0,0,1537,1542,3,268,134,0,1538,1539,
  	5,135,0,0,1539,1541,3,268,134,0,1540,1538,1,0,0,0,1541,1544,1,0,0,0,1542,
  	1540,1,0,0,0,1542,1543,1,0,0,0,1543,1548,1,0,0,0,1544,1542,1,0,0,0,1545,
  	1548,5,95,0,0,1546,1548,5,64,0,0,1547,1537,1,0,0,0,1547,1545,1,0,0,0,
  	1547,1546,1,0,0,0,1548,267,1,0,0,0,1549,1551,3,270,135,0,1550,1552,3,
  	64,32,0,1551,1550,1,0,0,0,1551,1552,1,0,0,0,1552,269,1,0,0,0,1553,1557,
  	3,512,256,0,1554,1557,5,112,0,0,1555,1557,3,54,27,0,1556,1553,1,0,0,0,
  	1556,1554,1,0,0,0,1556,1555,1,0,0,0,1557,271,1,0,0,0,1558,1561,3,274,
  	137,0,1559,1561,3,276,138,0,1560,1558,1,0,0,0,1560,1559,1,0,0,0,1561,
  	273,1,0,0,0,1562,1563,5,88,0,0,1563,1564,3,278,139,0,1564,1565,3,282,
  	141,0,1565,1569,5,125,0,0,1566,1567,5,53,0,0,1567,1568,5,88,0,0,1568,
  	1570,5,125,0,0,1569,1566,1,0,0,0,1569,1570,1,0,0,0,1570,275,1,0,0,0,1571,
  	1572,5,88,0,0,1572,1573,3,278,139,0,1573,1574,3,282,141,0,1574,1578,5,
  	125,0,0,1575,1576,3,286,143,0,1576,1577,5,125,0,0,1577,1579,1,0,0,0,1578,
  	1575,1,0,0,0,1579,1580,1,0,0,0,1580,1578,1,0,0,0,1580,1581,1,0,0,0,1581,
  	1582,1,0,0,0,1582,1583,5,53,0,0,1583,1584,5,88,0,0,1584,1585,5,125,0,
  	0,1585,277,1,0,0,0,1586,1587,3,280,140,0,1587,1588,5,138,0,0,1588,1589,
  	3,4,2,0,1589,279,1,0,0,0,1590,1595,3,486,243,0,1591,1592,5,135,0,0,1592,
  	1594,3,486,243,0,1593,1591,1,0,0,0,1594,1597,1,0,0,0,1595,1593,1,0,0,
  	0,1595,1596,1,0,0,0,1596,1601,1,0,0,0,1597,1595,1,0,0,0,1598,1601,5,95,
  	0,0,1599,1601,5,64,0,0,1600,1590,1,0,0,0,1600,1598,1,0,0,0,1600,1599,
  	1,0,0,0,1601,281,1,0,0,0,1602,1603,5,23,0,0,1603,1605,3,284,142,0,1604,
  	1602,1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,1608,3,236,118,
  	0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,1610,1,0,0,0,1609,1611,3,238,
  	119,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,283,1,0,0,0,1612,1613,
  	5,13,0,0,1613,1618,3,4,2,0,1614,1615,5,126,0,0,1615,1616,3,512,256,0,
  	1616,1617,5,127,0,0,1617,1619,1,0,0,0,1618,1614,1,0,0,0,1618,1619,1,0,
  	0,0,1619,1624,1,0,0,0,1620,1621,5,99,0,0,1621,1624,3,4,2,0,1622,1624,
  	5,100,0,0,1623,1612,1,0,0,0,1623,1620,1,0,0,0,1623,1622,1,0,0,0,1624,
  	285,1,0,0,0,1625,1626,5,23,0,0,1626,1627,5,36,0,0,1627,1628,3,288,144,
  	0,1628,287,1,0,0,0,1629,1634,3,4,2,0,1630,1631,5,135,0,0,1631,1633,3,
  	4,2,0,1632,1630,1,0,0,0,1633,1636,1,0,0,0,1634,1632,1,0,0,0,1634,1635,
  	1,0,0,0,1635,289,1,0,0,0,1636,1634,1,0,0,0,1637,1638,5,32,0,0,1638,1639,
  	3,292,146,0,1639,1640,5,50,0,0,1640,1641,3,312,156,0,1641,1642,5,125,
  	0,0,1642,291,1,0,0,0,1643,1644,3,294,147,0,1644,1645,5,138,0,0,1645,1646,
  	3,160,80,0,1646,293,1,0,0,0,1647,1652,3,4,2,0,1648,1649,5,135,0,0,1649,
  	1651,3,4,2,0,1650,1648,1,0,0,0,1651,1654,1,0,0,0,1652,1650,1,0,0,0,1652,
  	1653,1,0,0,0,1653,1658,1,0,0,0,1654,1652,1,0,0,0,1655,1658,5,95,0,0,1656,
  	1658,5,64,0,0,1657,1647,1,0,0,0,1657,1655,1,0,0,0,1657,1656,1,0,0,0,1658,
  	295,1,0,0,0,1659,1662,3,512,256,0,1660,1662,3,0,0,0,1661,1659,1,0,0,0,
  	1661,1660,1,0,0,0,1662,297,1,0,0,0,1663,1664,5,131,0,0,1664,1665,7,8,
  	0,0,1665,1666,3,300,150,0,1666,1667,5,138,0,0,1667,1668,3,148,74,0,1668,
  	1669,5,132,0,0,1669,299,1,0,0,0,1670,1674,3,302,151,0,1671,1674,3,304,
  	152,0,1672,1674,3,306,153,0,1673,1670,1,0,0,0,1673,1671,1,0,0,0,1673,
  	1672,1,0,0,0,1674,301,1,0,0,0,1675,1676,5,133,0,0,1676,1677,3,512,256,
  	0,1677,1678,5,136,0,0,1678,1679,3,512,256,0,1679,1680,5,136,0,0,1680,
  	1685,3,512,256,0,1681,1682,5,136,0,0,1682,1684,3,512,256,0,1683,1681,
  	1,0,0,0,1684,1687,1,0,0,0,1685,1683,1,0,0,0,1685,1686,1,0,0,0,1686,303,
  	1,0,0,0,1687,1685,1,0,0,0,1688,1689,5,136,0,0,1689,1690,3,308,154,0,1690,
  	305,1,0,0,0,1691,1692,5,160,0,0,1692,1694,5,136,0,0,1693,1691,1,0,0,0,
  	1694,1697,1,0,0,0,1695,1693,1,0,0,0,1695,1696,1,0,0,0,1696,1698,1,0,0,
  	0,1697,1695,1,0,0,0,1698,1699,3,308,154,0,1699,307,1,0,0,0,1700,1701,
  	3,310,155,0,1701,1702,5,136,0,0,1702,1704,1,0,0,0,1703,1700,1,0,0,0,1704,
  	1707,1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,1708,1,0,0,0,1707,
  	1705,1,0,0,0,1708,1709,3,512,256,0,1709,309,1,0,0,0,1710,1715,3,486,243,
  	0,1711,1712,5,126,0,0,1712,1713,3,312,156,0,1713,1714,5,127,0,0,1714,
  	1716,1,0,0,0,1715,1711,1,0,0,0,1715,1716,1,0,0,0,1716,311,1,0,0,0,1717,
  	1718,6,156,-1,0,1718,1719,5,164,0,0,1719,1722,3,316,158,0,1720,1722,3,
  	314,157,0,1721,1717,1,0,0,0,1721,1720,1,0,0,0,1722,1737,1,0,0,0,1723,
  	1724,10,3,0,0,1724,1725,3,322,161,0,1725,1726,3,312,156,4,1726,1736,1,
  	0,0,0,1727,1728,10,2,0,0,1728,1729,3,320,160,0,1729,1730,3,312,156,3,
  	1730,1736,1,0,0,0,1731,1732,10,1,0,0,1732,1733,3,318,159,0,1733,1734,
  	3,312,156,2,1734,1736,1,0,0,0,1735,1723,1,0,0,0,1735,1727,1,0,0,0,1735,
  	1731,1,0,0,0,1736,1739,1,0,0,0,1737,1735,1,0,0,0,1737,1738,1,0,0,0,1738,
  	313,1,0,0,0,1739,1737,1,0,0,0,1740,1741,6,157,-1,0,1741,1744,3,316,158,
  	0,1742,1743,5,157,0,0,1743,1745,3,316,158,0,1744,1742,1,0,0,0,1744,1745,
  	1,0,0,0,1745,1756,1,0,0,0,1746,1750,5,6,0,0,1747,1750,5,98,0,0,1748,1750,
  	3,318,159,0,1749,1746,1,0,0,0,1749,1747,1,0,0,0,1749,1748,1,0,0,0,1750,
  	1751,1,0,0,0,1751,1756,3,314,157,4,1752,1753,3,326,163,0,1753,1754,3,
  	314,157,2,1754,1756,1,0,0,0,1755,1740,1,0,0,0,1755,1749,1,0,0,0,1755,
  	1752,1,0,0,0,1756,1767,1,0,0,0,1757,1758,10,3,0,0,1758,1759,3,328,164,
  	0,1759,1760,3,314,157,4,1760,1766,1,0,0,0,1761,1762,10,1,0,0,1762,1763,
  	3,324,162,0,1763,1764,3,314,157,2,1764,1766,1,0,0,0,1765,1757,1,0,0,0,
  	1765,1761,1,0,0,0,1766,1769,1,0,0,0,1767,1765,1,0,0,0,1767,1768,1,0,0,
  	0,1768,315,1,0,0,0,1769,1767,1,0,0,0,1770,1777,3,332,166,0,1771,1777,
  	5,114,0,0,1772,1777,5,106,0,0,1773,1777,3,346,173,0,1774,1777,3,336,168,
  	0,1775,1777,3,344,172,0,1776,1770,1,0,0,0,1776,1771,1,0,0,0,1776,1772,
  	1,0,0,0,1776,1773,1,0,0,0,1776,1774,1,0,0,0,1776,1775,1,0,0,0,1777,317,
  	1,0,0,0,1778,1779,7,9,0,0,1779,319,1,0,0,0,1780,1781,7,10,0,0,1781,321,
  	1,0,0,0,1782,1783,7,11,0,0,1783,323,1,0,0,0,1784,1785,7,12,0,0,1785,325,
  	1,0,0,0,1786,1787,7,13,0,0,1787,327,1,0,0,0,1788,1789,7,14,0,0,1789,329,
  	1,0,0,0,1790,1791,7,15,0,0,1791,331,1,0,0,0,1792,1794,5,109,0,0,1793,
  	1795,3,4,2,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1802,1,0,0,0,1796,
  	1798,5,111,0,0,1797,1799,3,4,2,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,
  	1799,1802,1,0,0,0,1800,1802,3,4,2,0,1801,1792,1,0,0,0,1801,1796,1,0,0,
  	0,1801,1800,1,0,0,0,1802,333,1,0,0,0,1803,1805,7,16,0,0,1804,1803,1,0,
  	0,0,1804,1805,1,0,0,0,1805,1806,1,0,0,0,1806,1807,3,4,2,0,1807,335,1,
  	0,0,0,1808,1809,5,126,0,0,1809,1814,3,338,169,0,1810,1811,5,135,0,0,1811,
  	1813,3,338,169,0,1812,1810,1,0,0,0,1813,1816,1,0,0,0,1814,1812,1,0,0,
  	0,1814,1815,1,0,0,0,1815,1817,1,0,0,0,1816,1814,1,0,0,0,1817,1818,5,127,
  	0,0,1818,337,1,0,0,0,1819,1820,3,340,170,0,1820,1821,5,163,0,0,1821,1823,
  	1,0,0,0,1822,1819,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1825,
  	3,312,156,0,1825,339,1,0,0,0,1826,1831,3,342,171,0,1827,1828,5,153,0,
  	0,1828,1830,3,342,171,0,1829,1827,1,0,0,0,1830,1833,1,0,0,0,1831,1829,
  	1,0,0,0,1831,1832,1,0,0,0,1832,341,1,0,0,0,1833,1831,1,0,0,0,1834,1838,
  	3,112,56,0,1835,1838,3,314,157,0,1836,1838,5,95,0,0,1837,1834,1,0,0,0,
  	1837,1835,1,0,0,0,1837,1836,1,0,0,0,1838,343,1,0,0,0,1839,1840,3,160,
  	80,0,1840,1841,5,130,0,0,1841,1842,3,336,168,0,1842,345,1,0,0,0,1843,
  	1846,5,45,0,0,1844,1847,3,148,74,0,1845,1847,3,344,172,0,1846,1844,1,
  	0,0,0,1846,1845,1,0,0,0,1847,347,1,0,0,0,1848,1850,3,350,175,0,1849,1848,
  	1,0,0,0,1850,1853,1,0,0,0,1851,1849,1,0,0,0,1851,1852,1,0,0,0,1852,349,
  	1,0,0,0,1853,1851,1,0,0,0,1854,1855,3,486,243,0,1855,1856,5,138,0,0,1856,
  	1858,1,0,0,0,1857,1854,1,0,0,0,1857,1858,1,0,0,0,1858,1872,1,0,0,0,1859,
  	1873,3,352,176,0,1860,1873,3,364,182,0,1861,1873,3,368,184,0,1862,1873,
  	3,370,185,0,1863,1873,3,410,205,0,1864,1873,3,418,209,0,1865,1873,3,422,
  	211,0,1866,1873,3,424,212,0,1867,1873,3,428,214,0,1868,1873,3,434,217,
  	0,1869,1873,3,436,218,0,1870,1873,3,438,219,0,1871,1873,3,440,220,0,1872,
  	1859,1,0,0,0,1872,1860,1,0,0,0,1872,1861,1,0,0,0,1872,1862,1,0,0,0,1872,
  	1863,1,0,0,0,1872,1864,1,0,0,0,1872,1865,1,0,0,0,1872,1866,1,0,0,0,1872,
  	1867,1,0,0,0,1872,1868,1,0,0,0,1872,1869,1,0,0,0,1872,1870,1,0,0,0,1872,
  	1871,1,0,0,0,1873,351,1,0,0,0,1874,1876,5,76,0,0,1875,1877,3,354,177,
  	0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1879,1,0,0,0,1878,1880,3,358,
  	179,0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,1880,1882,1,0,0,0,1881,1883,
  	3,362,181,0,1882,1881,1,0,0,0,1882,1883,1,0,0,0,1883,1884,1,0,0,0,1884,
  	1885,5,125,0,0,1885,353,1,0,0,0,1886,1887,5,14,0,0,1887,1888,3,356,178,
  	0,1888,355,1,0,0,0,1889,1894,3,4,2,0,1890,1891,5,135,0,0,1891,1893,3,
  	4,2,0,1892,1890,1,0,0,0,1893,1896,1,0,0,0,1894,1892,1,0,0,0,1894,1895,
  	1,0,0,0,1895,357,1,0,0,0,1896,1894,1,0,0,0,1897,1898,5,73,0,0,1898,1899,
  	3,360,180,0,1899,359,1,0,0,0,1900,1901,3,312,156,0,1901,361,1,0,0,0,1902,
  	1903,5,88,0,0,1903,1904,3,312,156,0,1904,363,1,0,0,0,1905,1906,3,366,
  	183,0,1906,1907,5,125,0,0,1907,365,1,0,0,0,1908,1909,5,84,0,0,1909,1912,
  	3,360,180,0,1910,1911,5,46,0,0,1911,1913,3,312,156,0,1912,1910,1,0,0,
  	0,1912,1913,1,0,0,0,1913,1916,1,0,0,0,1914,1915,5,86,0,0,1915,1917,3,
  	312,156,0,1916,1914,1,0,0,0,1916,1917,1,0,0,0,1917,367,1,0,0,0,1918,1919,
  	5,46,0,0,1919,1922,3,312,156,0,1920,1921,5,86,0,0,1921,1923,3,312,156,
  	0,1922,1920,1,0,0,0,1922,1923,1,0,0,0,1923,1924,1,0,0,0,1924,1925,5,125,
  	0,0,1925,369,1,0,0,0,1926,1930,3,372,186,0,1927,1930,3,390,195,0,1928,
  	1930,3,400,200,0,1929,1926,1,0,0,0,1929,1927,1,0,0,0,1929,1928,1,0,0,
  	0,1930,371,1,0,0,0,1931,1935,3,374,187,0,1932,1935,3,376,188,0,1933,1935,
  	3,378,189,0,1934,1931,1,0,0,0,1934,1932,1,0,0,0,1934,1933,1,0,0,0,1935,
  	373,1,0,0,0,1936,1937,3,384,192,0,1937,1939,5,158,0,0,1938,1940,3,382,
  	191,0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,0,0,0,1941,1942,
  	3,386,193,0,1942,1943,5,125,0,0,1943,375,1,0,0,0,1944,1945,3,384,192,
  	0,1945,1946,5,158,0,0,1946,1948,5,79,0,0,1947,1949,3,380,190,0,1948,1947,
  	1,0,0,0,1948,1949,1,0,0,0,1949,1950,1,0,0,0,1950,1951,3,312,156,0,1951,
  	1952,5,125,0,0,1952,377,1,0,0,0,1953,1954,3,384,192,0,1954,1955,5,158,
  	0,0,1955,1957,5,69,0,0,1956,1958,3,380,190,0,1957,1956,1,0,0,0,1957,1958,
  	1,0,0,0,1958,1959,1,0,0,0,1959,1960,5,125,0,0,1960,379,1,0,0,0,1961,1962,
  	7,5,0,0,1962,381,1,0,0,0,1963,1970,5,51,0,0,1964,1965,5,29,0,0,1965,1967,
  	3,312,156,0,1966,1964,1,0,0,0,1966,1967,1,0,0,0,1967,1968,1,0,0,0,1968,
  	1970,5,11,0,0,1969,1963,1,0,0,0,1969,1966,1,0,0,0,1970,383,1,0,0,0,1971,
  	1974,3,4,2,0,1972,1974,3,336,168,0,1973,1971,1,0,0,0,1973,1972,1,0,0,
  	0,1974,385,1,0,0,0,1975,1980,3,388,194,0,1976,1977,5,135,0,0,1977,1979,
  	3,388,194,0,1978,1976,1,0,0,0,1979,1982,1,0,0,0,1980,1978,1,0,0,0,1980,
  	1981,1,0,0,0,1981,1985,1,0,0,0,1982,1980,1,0,0,0,1983,1985,5,40,0,0,1984,
  	1975,1,0,0,0,1984,1983,1,0,0,0,1985,387,1,0,0,0,1986,1989,3,312,156,0,
  	1987,1988,5,50,0,0,1988,1990,3,312,156,0,1989,1987,1,0,0,0,1989,1990,
  	1,0,0,0,1990,1997,1,0,0,0,1991,1994,5,106,0,0,1992,1993,5,50,0,0,1993,
  	1995,3,312,156,0,1994,1992,1,0,0,0,1994,1995,1,0,0,0,1995,1997,1,0,0,
  	0,1996,1986,1,0,0,0,1996,1991,1,0,0,0,1997,389,1,0,0,0,1998,2001,3,392,
  	196,0,1999,2001,3,396,198,0,2000,1998,1,0,0,0,2000,1999,1,0,0,0,2001,
  	391,1,0,0,0,2002,2003,3,384,192,0,2003,2005,5,158,0,0,2004,2006,3,382,
  	191,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,0,0,0,2007,2008,
  	3,394,197,0,2008,2009,5,125,0,0,2009,393,1,0,0,0,2010,2011,3,386,193,
  	0,2011,2012,5,104,0,0,2012,2020,3,360,180,0,2013,2014,5,22,0,0,2014,2015,
  	3,386,193,0,2015,2016,5,104,0,0,2016,2017,3,360,180,0,2017,2019,1,0,0,
  	0,2018,2013,1,0,0,0,2019,2022,1,0,0,0,2020,2018,1,0,0,0,2020,2021,1,0,
  	0,0,2021,2026,1,0,0,0,2022,2020,1,0,0,0,2023,2024,5,22,0,0,2024,2027,
  	3,386,193,0,2025,2027,4,197,6,0,2026,2023,1,0,0,0,2026,2025,1,0,0,0,2027,
  	395,1,0,0,0,2028,2029,3,384,192,0,2029,2030,5,158,0,0,2030,2032,5,79,
  	0,0,2031,2033,3,380,190,0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,2034,
  	1,0,0,0,2034,2035,3,398,199,0,2035,2036,5,125,0,0,2036,397,1,0,0,0,2037,
  	2038,3,312,156,0,2038,2039,5,104,0,0,2039,2047,3,360,180,0,2040,2041,
  	5,22,0,0,2041,2042,3,312,156,0,2042,2043,5,104,0,0,2043,2044,3,360,180,
  	0,2044,2046,1,0,0,0,2045,2040,1,0,0,0,2046,2049,1,0,0,0,2047,2045,1,0,
  	0,0,2047,2048,1,0,0,0,2048,2053,1,0,0,0,2049,2047,1,0,0,0,2050,2051,5,
  	22,0,0,2051,2054,3,312,156,0,2052,2054,4,199,7,0,2053,2050,1,0,0,0,2053,
  	2052,1,0,0,0,2054,399,1,0,0,0,2055,2058,3,402,201,0,2056,2058,3,406,203,
  	0,2057,2055,1,0,0,0,2057,2056,1,0,0,0,2058,401,1,0,0,0,2059,2060,5,72,
  	0,0,2060,2061,3,312,156,0,2061,2063,5,54,0,0,2062,2064,5,137,0,0,2063,
  	2062,1,0,0,0,2063,2064,1,0,0,0,2064,2065,1,0,0,0,2065,2066,3,384,192,
  	0,2066,2068,5,158,0,0,2067,2069,3,382,191,0,2068,2067,1,0,0,0,2068,2069,
  	1,0,0,0,2069,2070,1,0,0,0,2070,2071,3,404,202,0,2071,2072,5,125,0,0,2072,
  	403,1,0,0,0,2073,2074,3,386,193,0,2074,2075,5,104,0,0,2075,2083,3,340,
  	170,0,2076,2077,5,135,0,0,2077,2078,3,386,193,0,2078,2079,5,104,0,0,2079,
  	2080,3,340,170,0,2080,2082,1,0,0,0,2081,2076,1,0,0,0,2082,2085,1,0,0,
  	0,2083,2081,1,0,0,0,2083,2084,1,0,0,0,2084,405,1,0,0,0,2085,2083,1,0,
  	0,0,2086,2087,5,72,0,0,2087,2088,3,312,156,0,2088,2090,5,54,0,0,2089,
  	2091,5,137,0,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,2092,1,0,0,0,
  	2092,2093,3,384,192,0,2093,2094,5,158,0,0,2094,2096,5,79,0,0,2095,2097,
  	3,380,190,0,2096,2095,1,0,0,0,2096,2097,1,0,0,0,2097,2098,1,0,0,0,2098,
  	2099,3,408,204,0,2099,2100,5,125,0,0,2100,407,1,0,0,0,2101,2102,3,312,
  	156,0,2102,2103,5,104,0,0,2103,2111,3,340,170,0,2104,2105,5,135,0,0,2105,
  	2106,3,312,156,0,2106,2107,5,104,0,0,2107,2108,3,340,170,0,2108,2110,
  	1,0,0,0,2109,2104,1,0,0,0,2110,2113,1,0,0,0,2111,2109,1,0,0,0,2111,2112,
  	1,0,0,0,2112,409,1,0,0,0,2113,2111,1,0,0,0,2114,2118,3,412,206,0,2115,
  	2118,3,414,207,0,2116,2118,3,416,208,0,2117,2114,1,0,0,0,2117,2115,1,
  	0,0,0,2117,2116,1,0,0,0,2118,411,1,0,0,0,2119,2120,3,384,192,0,2120,2121,
  	5,161,0,0,2121,2122,3,312,156,0,2122,2123,5,125,0,0,2123,413,1,0,0,0,
  	2124,2125,3,384,192,0,2125,2126,5,161,0,0,2126,2127,3,398,199,0,2127,
  	2128,5,125,0,0,2128,415,1,0,0,0,2129,2130,5,72,0,0,2130,2131,3,312,156,
  	0,2131,2133,5,54,0,0,2132,2134,5,137,0,0,2133,2132,1,0,0,0,2133,2134,
  	1,0,0,0,2134,2135,1,0,0,0,2135,2136,3,384,192,0,2136,2137,5,161,0,0,2137,
  	2138,3,408,204,0,2138,2139,5,125,0,0,2139,417,1,0,0,0,2140,2141,3,420,
  	210,0,2141,2142,5,125,0,0,2142,419,1,0,0,0,2143,2144,3,4,2,0,2144,421,
  	1,0,0,0,2145,2146,5,90,0,0,2146,2147,3,360,180,0,2147,2148,5,8,0,0,2148,
  	2156,3,348,174,0,2149,2150,5,57,0,0,2150,2151,3,360,180,0,2151,2152,5,
  	8,0,0,2152,2153,3,348,174,0,2153,2155,1,0,0,0,2154,2149,1,0,0,0,2155,
  	2158,1,0,0,0,2156,2154,1,0,0,0,2156,2157,1,0,0,0,2157,2163,1,0,0,0,2158,
  	2156,1,0,0,0,2159,2160,5,22,0,0,2160,2164,3,348,174,0,2161,2164,1,0,0,
  	0,2162,2164,4,211,8,0,2163,2159,1,0,0,0,2163,2161,1,0,0,0,2163,2162,1,
  	0,0,0,2164,2165,1,0,0,0,2165,2166,5,53,0,0,2166,2168,5,90,0,0,2167,2169,
  	3,486,243,0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,2169,2170,1,0,0,0,2170,
  	2171,5,125,0,0,2171,423,1,0,0,0,2172,2174,5,97,0,0,2173,2175,5,137,0,
  	0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,2176,1,0,0,0,2176,2177,3,312,
  	156,0,2177,2179,5,93,0,0,2178,2180,3,426,213,0,2179,2178,1,0,0,0,2180,
  	2181,1,0,0,0,2181,2179,1,0,0,0,2181,2182,1,0,0,0,2182,2183,1,0,0,0,2183,
  	2184,5,53,0,0,2184,2186,5,97,0,0,2185,2187,5,137,0,0,2186,2185,1,0,0,
  	0,2186,2187,1,0,0,0,2187,2189,1,0,0,0,2188,2190,3,486,243,0,2189,2188,
  	1,0,0,0,2189,2190,1,0,0,0,2190,2191,1,0,0,0,2191,2192,5,125,0,0,2192,
  	425,1,0,0,0,2193,2194,5,104,0,0,2194,2195,3,340,170,0,2195,2196,5,163,
  	0,0,2196,2197,3,348,174,0,2197,427,1,0,0,0,2198,2200,3,430,215,0,2199,
  	2198,1,0,0,0,2199,2200,1,0,0,0,2200,2201,1,0,0,0,2201,2202,5,26,0,0,2202,
  	2203,3,348,174,0,2203,2204,5,53,0,0,2204,2206,5,26,0,0,2205,2207,3,486,
  	243,0,2206,2205,1,0,0,0,2206,2207,1,0,0,0,2207,2208,1,0,0,0,2208,2209,
  	5,125,0,0,2209,429,1,0,0,0,2210,2211,5,80,0,0,2211,2215,3,360,180,0,2212,
  	2213,5,88,0,0,2213,2215,3,432,216,0,2214,2210,1,0,0,0,2214,2212,1,0,0,
  	0,2215,431,1,0,0,0,2216,2217,3,512,256,0,2217,2218,5,68,0,0,2218,2219,
  	3,112,56,0,2219,433,1,0,0,0,2220,2222,5,12,0,0,2221,2223,3,486,243,0,
  	2222,2221,1,0,0,0,2222,2223,1,0,0,0,2223,2226,1,0,0,0,2224,2225,5,104,
  	0,0,2225,2227,3,360,180,0,2226,2224,1,0,0,0,2226,2227,1,0,0,0,2227,2228,
  	1,0,0,0,2228,2229,5,125,0,0,2229,435,1,0,0,0,2230,2232,5,70,0,0,2231,
  	2233,3,486,243,0,2232,2231,1,0,0,0,2232,2233,1,0,0,0,2233,2236,1,0,0,
  	0,2234,2235,5,104,0,0,2235,2237,3,360,180,0,2236,2234,1,0,0,0,2236,2237,
  	1,0,0,0,2237,2238,1,0,0,0,2238,2239,5,125,0,0,2239,437,1,0,0,0,2240,2242,
  	5,71,0,0,2241,2243,3,312,156,0,2242,2241,1,0,0,0,2242,2243,1,0,0,0,2243,
  	2244,1,0,0,0,2244,2245,5,125,0,0,2245,439,1,0,0,0,2246,2247,5,106,0,0,
  	2247,2248,5,125,0,0,2248,441,1,0,0,0,2249,2254,3,450,225,0,2250,2254,
  	3,458,229,0,2251,2254,3,460,230,0,2252,2254,3,462,231,0,2253,2249,1,0,
  	0,0,2253,2250,1,0,0,0,2253,2251,1,0,0,0,2253,2252,1,0,0,0,2254,443,1,
  	0,0,0,2255,2256,3,486,243,0,2256,2261,5,138,0,0,2257,2262,3,446,223,0,
  	2258,2262,3,468,234,0,2259,2262,3,472,236,0,2260,2262,3,442,221,0,2261,
  	2257,1,0,0,0,2261,2258,1,0,0,0,2261,2259,1,0,0,0,2261,2260,1,0,0,0,2262,
  	2265,1,0,0,0,2263,2265,3,442,221,0,2264,2255,1,0,0,0,2264,2263,1,0,0,
  	0,2265,445,1,0,0,0,2266,2271,5,9,0,0,2267,2268,5,126,0,0,2268,2269,3,
  	360,180,0,2269,2270,5,127,0,0,2270,2272,1,0,0,0,2271,2267,1,0,0,0,2271,
  	2272,1,0,0,0,2272,2274,1,0,0,0,2273,2275,5,93,0,0,2274,2273,1,0,0,0,2274,
  	2275,1,0,0,0,2275,2276,1,0,0,0,2276,2280,3,448,224,0,2277,2279,3,26,13,
  	0,2278,2277,1,0,0,0,2279,2282,1,0,0,0,2280,2278,1,0,0,0,2280,2281,1,0,
  	0,0,2281,2283,1,0,0,0,2282,2280,1,0,0,0,2283,2287,5,30,0,0,2284,2286,
  	3,444,222,0,2285,2284,1,0,0,0,2286,2289,1,0,0,0,2287,2285,1,0,0,0,2287,
  	2288,1,0,0,0,2288,2290,1,0,0,0,2289,2287,1,0,0,0,2290,2291,5,53,0,0,2291,
  	2293,5,9,0,0,2292,2294,3,486,243,0,2293,2292,1,0,0,0,2293,2294,1,0,0,
  	0,2294,2295,1,0,0,0,2295,2296,5,125,0,0,2296,447,1,0,0,0,2297,2301,3,
  	218,109,0,2298,2299,3,236,118,0,2299,2300,5,125,0,0,2300,2302,1,0,0,0,
  	2301,2298,1,0,0,0,2301,2302,1,0,0,0,2302,2304,1,0,0,0,2303,2297,1,0,0,
  	0,2303,2304,1,0,0,0,2304,2311,1,0,0,0,2305,2309,3,222,111,0,2306,2307,
  	3,238,119,0,2307,2308,5,125,0,0,2308,2310,1,0,0,0,2309,2306,1,0,0,0,2309,
  	2310,1,0,0,0,2310,2312,1,0,0,0,2311,2305,1,0,0,0,2311,2312,1,0,0,0,2312,
  	449,1,0,0,0,2313,2315,5,3,0,0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,2315,
  	2316,1,0,0,0,2316,2321,5,1,0,0,2317,2318,5,126,0,0,2318,2319,3,452,226,
  	0,2319,2320,5,127,0,0,2320,2322,1,0,0,0,2321,2317,1,0,0,0,2321,2322,1,
  	0,0,0,2322,2324,1,0,0,0,2323,2325,5,93,0,0,2324,2323,1,0,0,0,2324,2325,
  	1,0,0,0,2325,2329,1,0,0,0,2326,2328,3,456,228,0,2327,2326,1,0,0,0,2328,
  	2331,1,0,0,0,2329,2327,1,0,0,0,2329,2330,1,0,0,0,2330,2332,1,0,0,0,2331,
  	2329,1,0,0,0,2332,2336,5,30,0,0,2333,2335,3,350,175,0,2334,2333,1,0,0,
  	0,2335,2338,1,0,0,0,2336,2334,1,0,0,0,2336,2337,1,0,0,0,2337,2339,1,0,
  	0,0,2338,2336,1,0,0,0,2339,2341,5,53,0,0,2340,2342,5,3,0,0,2341,2340,
  	1,0,0,0,2341,2342,1,0,0,0,2342,2343,1,0,0,0,2343,2345,5,1,0,0,2344,2346,
  	3,486,243,0,2345,2344,1,0,0,0,2345,2346,1,0,0,0,2346,2347,1,0,0,0,2347,
  	2348,5,125,0,0,2348,451,1,0,0,0,2349,2352,5,64,0,0,2350,2352,3,356,178,
  	0,2351,2349,1,0,0,0,2351,2350,1,0,0,0,2352,453,1,0,0,0,2353,2369,3,42,
  	21,0,2354,2369,3,62,31,0,2355,2369,3,66,33,0,2356,2369,3,72,36,0,2357,
  	2369,3,140,70,0,2358,2369,3,146,73,0,2359,2369,3,168,84,0,2360,2369,3,
  	174,87,0,2361,2369,3,176,88,0,2362,2369,3,240,120,0,2363,2369,3,244,122,
  	0,2364,2369,3,260,130,0,2365,2369,3,488,244,0,2366,2369,3,248,124,0,2367,
  	2369,3,254,127,0,2368,2353,1,0,0,0,2368,2354,1,0,0,0,2368,2355,1,0,0,
  	0,2368,2356,1,0,0,0,2368,2357,1,0,0,0,2368,2358,1,0,0,0,2368,2359,1,0,
  	0,0,2368,2360,1,0,0,0,2368,2361,1,0,0,0,2368,2362,1,0,0,0,2368,2363,1,
  	0,0,0,2368,2364,1,0,0,0,2368,2365,1,0,0,0,2368,2366,1,0,0,0,2368,2367,
  	1,0,0,0,2369,455,1,0,0,0,2370,2374,3,454,227,0,2371,2374,3,58,29,0,2372,
  	2374,3,70,35,0,2373,2370,1,0,0,0,2373,2371,1,0,0,0,2373,2372,1,0,0,0,
  	2374,457,1,0,0,0,2375,2377,5,3,0,0,2376,2375,1,0,0,0,2376,2377,1,0,0,
  	0,2377,2378,1,0,0,0,2378,2379,3,418,209,0,2379,459,1,0,0,0,2380,2382,
  	5,3,0,0,2381,2380,1,0,0,0,2381,2382,1,0,0,0,2382,2383,1,0,0,0,2383,2384,
  	3,364,182,0,2384,461,1,0,0,0,2385,2387,5,3,0,0,2386,2385,1,0,0,0,2386,
  	2387,1,0,0,0,2387,2390,1,0,0,0,2388,2391,3,464,232,0,2389,2391,3,466,
  	233,0,2390,2388,1,0,0,0,2390,2389,1,0,0,0,2391,463,1,0,0,0,2392,2393,
  	3,384,192,0,2393,2395,5,158,0,0,2394,2396,5,19,0,0,2395,2394,1,0,0,0,
  	2395,2396,1,0,0,0,2396,2398,1,0,0,0,2397,2399,3,382,191,0,2398,2397,1,
  	0,0,0,2398,2399,1,0,0,0,2399,2402,1,0,0,0,2400,2403,3,386,193,0,2401,
  	2403,3,394,197,0,2402,2400,1,0,0,0,2402,2401,1,0,0,0,2403,2404,1,0,0,
  	0,2404,2405,5,125,0,0,2405,465,1,0,0,0,2406,2407,5,72,0,0,2407,2408,3,
  	312,156,0,2408,2410,5,54,0,0,2409,2411,5,137,0,0,2410,2409,1,0,0,0,2410,
  	2411,1,0,0,0,2411,2412,1,0,0,0,2412,2413,3,384,192,0,2413,2415,5,158,
  	0,0,2414,2416,5,19,0,0,2415,2414,1,0,0,0,2415,2416,1,0,0,0,2416,2418,
  	1,0,0,0,2417,2419,3,382,191,0,2418,2417,1,0,0,0,2418,2419,1,0,0,0,2419,
  	2420,1,0,0,0,2420,2421,3,404,202,0,2421,2422,5,125,0,0,2422,467,1,0,0,
  	0,2423,2425,3,470,235,0,2424,2426,3,236,118,0,2425,2424,1,0,0,0,2425,
  	2426,1,0,0,0,2426,2428,1,0,0,0,2427,2429,3,238,119,0,2428,2427,1,0,0,
  	0,2428,2429,1,0,0,0,2429,2430,1,0,0,0,2430,2431,5,125,0,0,2431,469,1,
  	0,0,0,2432,2434,5,5,0,0,2433,2432,1,0,0,0,2433,2434,1,0,0,0,2434,2435,
  	1,0,0,0,2435,2447,3,4,2,0,2436,2437,5,13,0,0,2437,2442,3,4,2,0,2438,2439,
  	5,126,0,0,2439,2440,3,512,256,0,2440,2441,5,127,0,0,2441,2443,1,0,0,0,
  	2442,2438,1,0,0,0,2442,2443,1,0,0,0,2443,2447,1,0,0,0,2444,2445,5,99,
  	0,0,2445,2447,3,4,2,0,2446,2433,1,0,0,0,2446,2436,1,0,0,0,2446,2444,1,
  	0,0,0,2447,471,1,0,0,0,2448,2452,3,474,237,0,2449,2452,3,476,238,0,2450,
  	2452,3,478,239,0,2451,2448,1,0,0,0,2451,2449,1,0,0,0,2451,2450,1,0,0,
  	0,2452,473,1,0,0,0,2453,2454,5,88,0,0,2454,2455,3,432,216,0,2455,2456,
  	5,66,0,0,2456,2457,3,484,242,0,2457,2458,5,53,0,0,2458,2460,5,66,0,0,
  	2459,2461,3,486,243,0,2460,2459,1,0,0,0,2460,2461,1,0,0,0,2461,2462,1,
  	0,0,0,2462,2463,5,125,0,0,2463,475,1,0,0,0,2464,2468,5,90,0,0,2465,2466,
  	3,486,243,0,2466,2467,5,138,0,0,2467,2469,1,0,0,0,2468,2465,1,0,0,0,2468,
  	2469,1,0,0,0,2469,2470,1,0,0,0,2470,2471,3,360,180,0,2471,2472,5,66,0,
  	0,2472,2485,3,484,242,0,2473,2477,5,57,0,0,2474,2475,3,486,243,0,2475,
  	2476,5,138,0,0,2476,2478,1,0,0,0,2477,2474,1,0,0,0,2477,2478,1,0,0,0,
  	2478,2479,1,0,0,0,2479,2480,3,360,180,0,2480,2481,5,66,0,0,2481,2482,
  	3,484,242,0,2482,2484,1,0,0,0,2483,2473,1,0,0,0,2484,2487,1,0,0,0,2485,
  	2483,1,0,0,0,2485,2486,1,0,0,0,2486,2497,1,0,0,0,2487,2485,1,0,0,0,2488,
  	2492,5,22,0,0,2489,2490,3,486,243,0,2490,2491,5,138,0,0,2491,2493,1,0,
  	0,0,2492,2489,1,0,0,0,2492,2493,1,0,0,0,2493,2494,1,0,0,0,2494,2495,5,
  	66,0,0,2495,2498,3,484,242,0,2496,2498,4,238,9,0,2497,2488,1,0,0,0,2497,
  	2496,1,0,0,0,2498,2499,1,0,0,0,2499,2500,5,53,0,0,2500,2502,5,66,0,0,
  	2501,2503,3,486,243,0,2502,2501,1,0,0,0,2502,2503,1,0,0,0,2503,2504,1,
  	0,0,0,2504,2505,5,125,0,0,2505,477,1,0,0,0,2506,2507,5,97,0,0,2507,2508,
  	3,312,156,0,2508,2510,5,66,0,0,2509,2511,3,480,240,0,2510,2509,1,0,0,
  	0,2511,2512,1,0,0,0,2512,2510,1,0,0,0,2512,2513,1,0,0,0,2513,2514,1,0,
  	0,0,2514,2515,5,53,0,0,2515,2517,5,66,0,0,2516,2518,3,486,243,0,2517,
  	2516,1,0,0,0,2517,2518,1,0,0,0,2518,2519,1,0,0,0,2519,2520,5,125,0,0,
  	2520,479,1,0,0,0,2521,2525,5,104,0,0,2522,2523,3,486,243,0,2523,2524,
  	5,138,0,0,2524,2526,1,0,0,0,2525,2522,1,0,0,0,2525,2526,1,0,0,0,2526,
  	2527,1,0,0,0,2527,2528,3,340,170,0,2528,2529,5,163,0,0,2529,2530,3,482,
  	241,0,2530,481,1,0,0,0,2531,2533,3,26,13,0,2532,2531,1,0,0,0,2533,2536,
  	1,0,0,0,2534,2532,1,0,0,0,2534,2535,1,0,0,0,2535,2537,1,0,0,0,2536,2534,
  	1,0,0,0,2537,2541,5,30,0,0,2538,2540,3,444,222,0,2539,2538,1,0,0,0,2540,
  	2543,1,0,0,0,2541,2539,1,0,0,0,2541,2542,1,0,0,0,2542,2544,1,0,0,0,2543,
  	2541,1,0,0,0,2544,2546,5,53,0,0,2545,2547,3,486,243,0,2546,2545,1,0,0,
  	0,2546,2547,1,0,0,0,2547,2548,1,0,0,0,2548,2556,5,125,0,0,2549,2551,3,
  	444,222,0,2550,2549,1,0,0,0,2551,2554,1,0,0,0,2552,2550,1,0,0,0,2552,
  	2553,1,0,0,0,2553,2556,1,0,0,0,2554,2552,1,0,0,0,2555,2534,1,0,0,0,2555,
  	2552,1,0,0,0,2556,483,1,0,0,0,2557,2559,3,26,13,0,2558,2557,1,0,0,0,2559,
  	2562,1,0,0,0,2560,2558,1,0,0,0,2560,2561,1,0,0,0,2561,2563,1,0,0,0,2562,
  	2560,1,0,0,0,2563,2567,5,30,0,0,2564,2566,3,444,222,0,2565,2564,1,0,0,
  	0,2566,2569,1,0,0,0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,2577,1,0,
  	0,0,2569,2567,1,0,0,0,2570,2572,3,444,222,0,2571,2570,1,0,0,0,2572,2575,
  	1,0,0,0,2573,2571,1,0,0,0,2573,2574,1,0,0,0,2574,2577,1,0,0,0,2575,2573,
  	1,0,0,0,2576,2560,1,0,0,0,2576,2573,1,0,0,0,2577,485,1,0,0,0,2578,2579,
  	3,512,256,0,2579,487,1,0,0,0,2580,2581,5,23,0,0,2581,2586,3,16,8,0,2582,
  	2583,5,135,0,0,2583,2585,3,16,8,0,2584,2582,1,0,0,0,2585,2588,1,0,0,0,
  	2586,2584,1,0,0,0,2586,2587,1,0,0,0,2587,2589,1,0,0,0,2588,2586,1,0,0,
  	0,2589,2590,5,125,0,0,2590,489,1,0,0,0,2591,2593,3,492,246,0,2592,2591,
  	1,0,0,0,2593,2596,1,0,0,0,2594,2592,1,0,0,0,2594,2595,1,0,0,0,2595,2597,
  	1,0,0,0,2596,2594,1,0,0,0,2597,2598,5,0,0,1,2598,491,1,0,0,0,2599,2600,
  	3,506,253,0,2600,2601,3,494,247,0,2601,493,1,0,0,0,2602,2605,3,496,248,
  	0,2603,2605,3,498,249,0,2604,2602,1,0,0,0,2604,2603,1,0,0,0,2605,495,
  	1,0,0,0,2606,2612,3,18,9,0,2607,2612,3,28,14,0,2608,2612,3,66,33,0,2609,
  	2612,3,72,36,0,2610,2612,3,504,252,0,2611,2606,1,0,0,0,2611,2607,1,0,
  	0,0,2611,2608,1,0,0,0,2611,2609,1,0,0,0,2611,2610,1,0,0,0,2612,497,1,
  	0,0,0,2613,2616,3,24,12,0,2614,2616,3,70,35,0,2615,2613,1,0,0,0,2615,
  	2614,1,0,0,0,2616,499,1,0,0,0,2617,2618,5,56,0,0,2618,2619,3,502,251,
  	0,2619,2620,5,125,0,0,2620,501,1,0,0,0,2621,2622,3,118,59,0,2622,503,
  	1,0,0,0,2623,2624,5,2,0,0,2624,2625,3,512,256,0,2625,2626,5,93,0,0,2626,
  	2627,3,506,253,0,2627,2629,5,53,0,0,2628,2630,5,2,0,0,2629,2628,1,0,0,
  	0,2629,2630,1,0,0,0,2630,2632,1,0,0,0,2631,2633,3,512,256,0,2632,2631,
  	1,0,0,0,2632,2633,1,0,0,0,2633,2634,1,0,0,0,2634,2635,5,125,0,0,2635,
  	505,1,0,0,0,2636,2638,3,508,254,0,2637,2636,1,0,0,0,2638,2641,1,0,0,0,
  	2639,2637,1,0,0,0,2639,2640,1,0,0,0,2640,507,1,0,0,0,2641,2639,1,0,0,
  	0,2642,2646,3,500,250,0,2643,2646,3,488,244,0,2644,2646,3,510,255,0,2645,
  	2642,1,0,0,0,2645,2643,1,0,0,0,2645,2644,1,0,0,0,2646,509,1,0,0,0,2647,
  	2648,5,2,0,0,2648,2653,3,16,8,0,2649,2650,5,135,0,0,2650,2652,3,16,8,
  	0,2651,2649,1,0,0,0,2652,2655,1,0,0,0,2653,2651,1,0,0,0,2653,2654,1,0,
  	0,0,2654,2656,1,0,0,0,2655,2653,1,0,0,0,2656,2657,5,125,0,0,2657,511,
  	1,0,0,0,2658,2659,7,17,0,0,2659,513,1,0,0,0,304,519,524,532,536,544,554,
  	565,572,575,580,587,590,594,597,604,609,614,624,631,636,639,646,656,664,
  	670,673,680,687,693,705,710,714,721,728,732,743,748,751,757,760,765,768,
  	774,784,788,799,806,811,814,826,829,839,842,846,857,859,864,869,872,880,
  	889,895,898,908,916,923,933,940,950,956,970,974,983,1001,1007,1009,1019,
  	1026,1032,1037,1049,1060,1081,1087,1093,1099,1106,1113,1117,1130,1139,
  	1143,1150,1154,1163,1173,1177,1183,1191,1200,1204,1211,1219,1228,1234,
  	1238,1248,1254,1260,1265,1268,1273,1277,1281,1287,1292,1309,1313,1318,
  	1324,1327,1332,1338,1345,1365,1372,1399,1407,1416,1424,1427,1432,1446,
  	1451,1458,1469,1472,1475,1480,1497,1502,1518,1542,1547,1551,1556,1560,
  	1569,1580,1595,1600,1604,1607,1610,1618,1623,1634,1652,1657,1661,1673,
  	1685,1695,1705,1715,1721,1735,1737,1744,1749,1755,1765,1767,1776,1794,
  	1798,1801,1804,1814,1822,1831,1837,1846,1851,1857,1872,1876,1879,1882,
  	1894,1912,1916,1922,1929,1934,1939,1948,1957,1966,1969,1973,1980,1984,
  	1989,1994,1996,2000,2005,2020,2026,2032,2047,2053,2057,2063,2068,2083,
  	2090,2096,2111,2117,2133,2156,2163,2168,2174,2181,2186,2189,2199,2206,
  	2214,2222,2226,2232,2236,2242,2253,2261,2264,2271,2274,2280,2287,2293,
  	2301,2303,2309,2311,2314,2321,2324,2329,2336,2341,2345,2351,2368,2373,
  	2376,2381,2386,2390,2395,2398,2402,2410,2415,2418,2425,2428,2433,2442,
  	2446,2451,2460,2468,2477,2485,2492,2497,2502,2512,2517,2525,2534,2541,
  	2546,2552,2555,2560,2567,2573,2576,2586,2594,2604,2611,2615,2629,2632,
  	2639,2645,2653
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  vhdlparserParserStaticData = staticData.release();
}

}

vhdlParser::vhdlParser(TokenStream *input) : vhdlParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

vhdlParser::vhdlParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  vhdlParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *vhdlparserParserStaticData->atn, vhdlparserParserStaticData->decisionToDFA, vhdlparserParserStaticData->sharedContextCache, options);
}

vhdlParser::~vhdlParser() {
  delete _interpreter;
}

const atn::ATN& vhdlParser::getATN() const {
  return *vhdlparserParserStaticData->atn;
}

std::string vhdlParser::getGrammarFileName() const {
  return "vhdlParser.g4";
}

const std::vector<std::string>& vhdlParser::getRuleNames() const {
  return vhdlparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& vhdlParser::getVocabulary() const {
  return vhdlparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView vhdlParser::getSerializedATN() const {
  return vhdlparserParserStaticData->serializedATN;
}


//----------------- Any_keywordContext ------------------------------------------------------------------

vhdlParser::Any_keywordContext::Any_keywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_PROCESS() {
  return getToken(vhdlParser::KW_PROCESS, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_CONTEXT() {
  return getToken(vhdlParser::KW_CONTEXT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_POSTPONED() {
  return getToken(vhdlParser::KW_POSTPONED, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_LINKAGE() {
  return getToken(vhdlParser::KW_LINKAGE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_COMPONENT() {
  return getToken(vhdlParser::KW_COMPONENT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ABS() {
  return getToken(vhdlParser::KW_ABS, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_DEFAULT() {
  return getToken(vhdlParser::KW_DEFAULT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_THEN() {
  return getToken(vhdlParser::KW_THEN, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_BLOCK() {
  return getToken(vhdlParser::KW_BLOCK, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_REM() {
  return getToken(vhdlParser::KW_REM, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_INERTIAL() {
  return getToken(vhdlParser::KW_INERTIAL, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_NEXT() {
  return getToken(vhdlParser::KW_NEXT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ENTITY() {
  return getToken(vhdlParser::KW_ENTITY, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ON() {
  return getToken(vhdlParser::KW_ON, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_GROUP() {
  return getToken(vhdlParser::KW_GROUP, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_XNOR() {
  return getToken(vhdlParser::KW_XNOR, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_FILE() {
  return getToken(vhdlParser::KW_FILE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_PURE() {
  return getToken(vhdlParser::KW_PURE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_GUARDED() {
  return getToken(vhdlParser::KW_GUARDED, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_GENERIC() {
  return getToken(vhdlParser::KW_GENERIC, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_RANGE() {
  return getToken(vhdlParser::KW_RANGE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ELSE() {
  return getToken(vhdlParser::KW_ELSE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_USE() {
  return getToken(vhdlParser::KW_USE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SHARED() {
  return getToken(vhdlParser::KW_SHARED, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_MOD() {
  return getToken(vhdlParser::KW_MOD, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_LOOP() {
  return getToken(vhdlParser::KW_LOOP, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_RECORD() {
  return getToken(vhdlParser::KW_RECORD, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SIGNAL() {
  return getToken(vhdlParser::KW_SIGNAL, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_REJECT() {
  return getToken(vhdlParser::KW_REJECT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_BEGIN() {
  return getToken(vhdlParser::KW_BEGIN, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SLA() {
  return getToken(vhdlParser::KW_SLA, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_DISCONNECT() {
  return getToken(vhdlParser::KW_DISCONNECT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_OF() {
  return getToken(vhdlParser::KW_OF, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_PROCEDURE() {
  return getToken(vhdlParser::KW_PROCEDURE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SRL() {
  return getToken(vhdlParser::KW_SRL, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_VUNIT() {
  return getToken(vhdlParser::KW_VUNIT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ATTRIBUTE() {
  return getToken(vhdlParser::KW_ATTRIBUTE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_VARIABLE() {
  return getToken(vhdlParser::KW_VARIABLE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_PROPERTY() {
  return getToken(vhdlParser::KW_PROPERTY, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_UNAFFECTED() {
  return getToken(vhdlParser::KW_UNAFFECTED, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_XOR() {
  return getToken(vhdlParser::KW_XOR, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_REGISTER() {
  return getToken(vhdlParser::KW_REGISTER, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SUBTYPE() {
  return getToken(vhdlParser::KW_SUBTYPE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_TO() {
  return getToken(vhdlParser::KW_TO, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_NEW() {
  return getToken(vhdlParser::KW_NEW, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_REPORT() {
  return getToken(vhdlParser::KW_REPORT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_CONSTANT() {
  return getToken(vhdlParser::KW_CONSTANT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_BUFFER() {
  return getToken(vhdlParser::KW_BUFFER, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_BODY() {
  return getToken(vhdlParser::KW_BODY, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_AFTER() {
  return getToken(vhdlParser::KW_AFTER, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_TRANSPORT() {
  return getToken(vhdlParser::KW_TRANSPORT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_FUNCTION() {
  return getToken(vhdlParser::KW_FUNCTION, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SELECT() {
  return getToken(vhdlParser::KW_SELECT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_OR() {
  return getToken(vhdlParser::KW_OR, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_LIBRARY() {
  return getToken(vhdlParser::KW_LIBRARY, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ELSIF() {
  return getToken(vhdlParser::KW_ELSIF, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SLL() {
  return getToken(vhdlParser::KW_SLL, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_MAP() {
  return getToken(vhdlParser::KW_MAP, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SRA() {
  return getToken(vhdlParser::KW_SRA, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_PROTECTED() {
  return getToken(vhdlParser::KW_PROTECTED, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_DOWNTO() {
  return getToken(vhdlParser::KW_DOWNTO, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_LABEL() {
  return getToken(vhdlParser::KW_LABEL, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ALL() {
  return getToken(vhdlParser::KW_ALL, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ALIAS() {
  return getToken(vhdlParser::KW_ALIAS, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_GENERATE() {
  return getToken(vhdlParser::KW_GENERATE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_NOR() {
  return getToken(vhdlParser::KW_NOR, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_IN() {
  return getToken(vhdlParser::KW_IN, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_RELEASE() {
  return getToken(vhdlParser::KW_RELEASE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_EXIT() {
  return getToken(vhdlParser::KW_EXIT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_RETURN() {
  return getToken(vhdlParser::KW_RETURN, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_WITH() {
  return getToken(vhdlParser::KW_WITH, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_UNTIL() {
  return getToken(vhdlParser::KW_UNTIL, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_AND() {
  return getToken(vhdlParser::KW_AND, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_INOUT() {
  return getToken(vhdlParser::KW_INOUT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_WAIT() {
  return getToken(vhdlParser::KW_WAIT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_NAND() {
  return getToken(vhdlParser::KW_NAND, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ARRAY() {
  return getToken(vhdlParser::KW_ARRAY, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_FORCE() {
  return getToken(vhdlParser::KW_FORCE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_WHILE() {
  return getToken(vhdlParser::KW_WHILE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_IMPURE() {
  return getToken(vhdlParser::KW_IMPURE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_PACKAGE() {
  return getToken(vhdlParser::KW_PACKAGE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_UNITS() {
  return getToken(vhdlParser::KW_UNITS, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ASSERT() {
  return getToken(vhdlParser::KW_ASSERT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_PARAMETER() {
  return getToken(vhdlParser::KW_PARAMETER, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SEVERITY() {
  return getToken(vhdlParser::KW_SEVERITY, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_LITERAL() {
  return getToken(vhdlParser::KW_LITERAL, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_FOR() {
  return getToken(vhdlParser::KW_FOR, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ROR() {
  return getToken(vhdlParser::KW_ROR, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_IF() {
  return getToken(vhdlParser::KW_IF, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_OUT() {
  return getToken(vhdlParser::KW_OUT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ROL() {
  return getToken(vhdlParser::KW_ROL, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_SEQUENCE() {
  return getToken(vhdlParser::KW_SEQUENCE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_OTHERS() {
  return getToken(vhdlParser::KW_OTHERS, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_TYPE() {
  return getToken(vhdlParser::KW_TYPE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_CASE() {
  return getToken(vhdlParser::KW_CASE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_NOT() {
  return getToken(vhdlParser::KW_NOT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_CONFIGURATION() {
  return getToken(vhdlParser::KW_CONFIGURATION, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_OPEN() {
  return getToken(vhdlParser::KW_OPEN, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ARCHITECTURE() {
  return getToken(vhdlParser::KW_ARCHITECTURE, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_BUS() {
  return getToken(vhdlParser::KW_BUS, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_ACCESS() {
  return getToken(vhdlParser::KW_ACCESS, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_WHEN() {
  return getToken(vhdlParser::KW_WHEN, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_PORT() {
  return getToken(vhdlParser::KW_PORT, 0);
}

tree::TerminalNode* vhdlParser::Any_keywordContext::KW_NULL() {
  return getToken(vhdlParser::KW_NULL, 0);
}


size_t vhdlParser::Any_keywordContext::getRuleIndex() const {
  return vhdlParser::RuleAny_keyword;
}

void vhdlParser::Any_keywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAny_keyword(this);
}

void vhdlParser::Any_keywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAny_keyword(this);
}


std::any vhdlParser::Any_keywordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAny_keyword(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Any_keywordContext* vhdlParser::any_keyword() {
  Any_keywordContext *_localctx = _tracker.createInstance<Any_keywordContext>(_ctx, getState());
  enterRule(_localctx, 0, vhdlParser::RuleAny_keyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    _la = _input->LA(1);
    if (!(((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8796093022207) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Name_literalContext ------------------------------------------------------------------

vhdlParser::Name_literalContext::Name_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Name_literalContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

vhdlParser::Operator_symbolContext* vhdlParser::Name_literalContext::operator_symbol() {
  return getRuleContext<vhdlParser::Operator_symbolContext>(0);
}

tree::TerminalNode* vhdlParser::Name_literalContext::CHARACTER_LITERAL() {
  return getToken(vhdlParser::CHARACTER_LITERAL, 0);
}


size_t vhdlParser::Name_literalContext::getRuleIndex() const {
  return vhdlParser::RuleName_literal;
}

void vhdlParser::Name_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName_literal(this);
}

void vhdlParser::Name_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName_literal(this);
}


std::any vhdlParser::Name_literalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitName_literal(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Name_literalContext* vhdlParser::name_literal() {
  Name_literalContext *_localctx = _tracker.createInstance<Name_literalContext>(_ctx, getState());
  enterRule(_localctx, 2, vhdlParser::RuleName_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(519);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(516);
        identifier();
        break;
      }

      case vhdlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(517);
        operator_symbol();
        break;
      }

      case vhdlParser::CHARACTER_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(518);
        match(vhdlParser::CHARACTER_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameContext ------------------------------------------------------------------

vhdlParser::NameContext::NameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Name_literalContext* vhdlParser::NameContext::name_literal() {
  return getRuleContext<vhdlParser::Name_literalContext>(0);
}

vhdlParser::External_nameContext* vhdlParser::NameContext::external_name() {
  return getRuleContext<vhdlParser::External_nameContext>(0);
}

vhdlParser::NameContext* vhdlParser::NameContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

vhdlParser::Name_slice_partContext* vhdlParser::NameContext::name_slice_part() {
  return getRuleContext<vhdlParser::Name_slice_partContext>(0);
}

vhdlParser::Name_attribute_partContext* vhdlParser::NameContext::name_attribute_part() {
  return getRuleContext<vhdlParser::Name_attribute_partContext>(0);
}

vhdlParser::Association_listContext* vhdlParser::NameContext::association_list() {
  return getRuleContext<vhdlParser::Association_listContext>(0);
}

tree::TerminalNode* vhdlParser::NameContext::DOT() {
  return getToken(vhdlParser::DOT, 0);
}

vhdlParser::SuffixContext* vhdlParser::NameContext::suffix() {
  return getRuleContext<vhdlParser::SuffixContext>(0);
}


size_t vhdlParser::NameContext::getRuleIndex() const {
  return vhdlParser::RuleName;
}

void vhdlParser::NameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName(this);
}

void vhdlParser::NameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName(this);
}


std::any vhdlParser::NameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitName(this);
  else
    return visitor->visitChildren(this);
}


vhdlParser::NameContext* vhdlParser::name() {
   return name(0);
}

vhdlParser::NameContext* vhdlParser::name(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  vhdlParser::NameContext *_localctx = _tracker.createInstance<NameContext>(_ctx, parentState);
  vhdlParser::NameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 4;
  enterRecursionRule(_localctx, 4, vhdlParser::RuleName, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(524);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL: {
        setState(522);
        name_literal();
        break;
      }

      case vhdlParser::SHIFT_LEFT: {
        setState(523);
        external_name();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(536);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<NameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleName);
        setState(526);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(532);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
        case 1: {
          setState(527);
          name_slice_part();
          break;
        }

        case 2: {
          setState(528);
          name_attribute_part();
          break;
        }

        case 3: {
          setState(529);
          association_list();
          break;
        }

        case 4: {
          setState(530);
          match(vhdlParser::DOT);
          setState(531);
          suffix();
          break;
        }

        default:
          break;
        } 
      }
      setState(538);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Name_slice_partContext ------------------------------------------------------------------

vhdlParser::Name_slice_partContext::Name_slice_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Name_slice_partContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Explicit_rangeContext* vhdlParser::Name_slice_partContext::explicit_range() {
  return getRuleContext<vhdlParser::Explicit_rangeContext>(0);
}

tree::TerminalNode* vhdlParser::Name_slice_partContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}


size_t vhdlParser::Name_slice_partContext::getRuleIndex() const {
  return vhdlParser::RuleName_slice_part;
}

void vhdlParser::Name_slice_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName_slice_part(this);
}

void vhdlParser::Name_slice_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName_slice_part(this);
}


std::any vhdlParser::Name_slice_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitName_slice_part(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Name_slice_partContext* vhdlParser::name_slice_part() {
  Name_slice_partContext *_localctx = _tracker.createInstance<Name_slice_partContext>(_ctx, getState());
  enterRule(_localctx, 6, vhdlParser::RuleName_slice_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(539);
    match(vhdlParser::LPAREN);
    setState(540);
    explicit_range();
    setState(541);
    match(vhdlParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Name_attribute_partContext ------------------------------------------------------------------

vhdlParser::Name_attribute_partContext::Name_attribute_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Name_attribute_partContext::APOSTROPHE() {
  return getToken(vhdlParser::APOSTROPHE, 0);
}

vhdlParser::Attribute_designatorContext* vhdlParser::Name_attribute_partContext::attribute_designator() {
  return getRuleContext<vhdlParser::Attribute_designatorContext>(0);
}

vhdlParser::SignatureContext* vhdlParser::Name_attribute_partContext::signature() {
  return getRuleContext<vhdlParser::SignatureContext>(0);
}


size_t vhdlParser::Name_attribute_partContext::getRuleIndex() const {
  return vhdlParser::RuleName_attribute_part;
}

void vhdlParser::Name_attribute_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName_attribute_part(this);
}

void vhdlParser::Name_attribute_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName_attribute_part(this);
}


std::any vhdlParser::Name_attribute_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitName_attribute_part(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Name_attribute_partContext* vhdlParser::name_attribute_part() {
  Name_attribute_partContext *_localctx = _tracker.createInstance<Name_attribute_partContext>(_ctx, getState());
  enterRule(_localctx, 8, vhdlParser::RuleName_attribute_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(544);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::LSQUARE_BR) {
      setState(543);
      signature();
    }
    setState(546);
    match(vhdlParser::APOSTROPHE);
    setState(547);
    attribute_designator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_nameContext ------------------------------------------------------------------

vhdlParser::Attribute_nameContext::Attribute_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::Attribute_nameContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

vhdlParser::Name_attribute_partContext* vhdlParser::Attribute_nameContext::name_attribute_part() {
  return getRuleContext<vhdlParser::Name_attribute_partContext>(0);
}


size_t vhdlParser::Attribute_nameContext::getRuleIndex() const {
  return vhdlParser::RuleAttribute_name;
}

void vhdlParser::Attribute_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_name(this);
}

void vhdlParser::Attribute_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_name(this);
}


std::any vhdlParser::Attribute_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAttribute_name(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Attribute_nameContext* vhdlParser::attribute_name() {
  Attribute_nameContext *_localctx = _tracker.createInstance<Attribute_nameContext>(_ctx, getState());
  enterRule(_localctx, 10, vhdlParser::RuleAttribute_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(549);
    name(0);
    setState(550);
    name_attribute_part();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuffixContext ------------------------------------------------------------------

vhdlParser::SuffixContext::SuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Name_literalContext* vhdlParser::SuffixContext::name_literal() {
  return getRuleContext<vhdlParser::Name_literalContext>(0);
}

tree::TerminalNode* vhdlParser::SuffixContext::KW_ALL() {
  return getToken(vhdlParser::KW_ALL, 0);
}


size_t vhdlParser::SuffixContext::getRuleIndex() const {
  return vhdlParser::RuleSuffix;
}

void vhdlParser::SuffixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuffix(this);
}

void vhdlParser::SuffixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuffix(this);
}


std::any vhdlParser::SuffixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSuffix(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::SuffixContext* vhdlParser::suffix() {
  SuffixContext *_localctx = _tracker.createInstance<SuffixContext>(_ctx, getState());
  enterRule(_localctx, 12, vhdlParser::RuleSuffix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(554);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(552);
        name_literal();
        break;
      }

      case vhdlParser::KW_ALL: {
        enterOuterAlt(_localctx, 2);
        setState(553);
        match(vhdlParser::KW_ALL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explicit_rangeContext ------------------------------------------------------------------

vhdlParser::Explicit_rangeContext::Explicit_rangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::Simple_expressionContext *> vhdlParser::Explicit_rangeContext::simple_expression() {
  return getRuleContexts<vhdlParser::Simple_expressionContext>();
}

vhdlParser::Simple_expressionContext* vhdlParser::Explicit_rangeContext::simple_expression(size_t i) {
  return getRuleContext<vhdlParser::Simple_expressionContext>(i);
}

vhdlParser::DirectionContext* vhdlParser::Explicit_rangeContext::direction() {
  return getRuleContext<vhdlParser::DirectionContext>(0);
}


size_t vhdlParser::Explicit_rangeContext::getRuleIndex() const {
  return vhdlParser::RuleExplicit_range;
}

void vhdlParser::Explicit_rangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicit_range(this);
}

void vhdlParser::Explicit_rangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicit_range(this);
}


std::any vhdlParser::Explicit_rangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitExplicit_range(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Explicit_rangeContext* vhdlParser::explicit_range() {
  Explicit_rangeContext *_localctx = _tracker.createInstance<Explicit_rangeContext>(_ctx, getState());
  enterRule(_localctx, 14, vhdlParser::RuleExplicit_range);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(556);
    simple_expression(0);
    setState(557);
    direction();
    setState(558);
    simple_expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selected_nameContext ------------------------------------------------------------------

vhdlParser::Selected_nameContext::Selected_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Selected_nameContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> vhdlParser::Selected_nameContext::DOT() {
  return getTokens(vhdlParser::DOT);
}

tree::TerminalNode* vhdlParser::Selected_nameContext::DOT(size_t i) {
  return getToken(vhdlParser::DOT, i);
}

std::vector<vhdlParser::SuffixContext *> vhdlParser::Selected_nameContext::suffix() {
  return getRuleContexts<vhdlParser::SuffixContext>();
}

vhdlParser::SuffixContext* vhdlParser::Selected_nameContext::suffix(size_t i) {
  return getRuleContext<vhdlParser::SuffixContext>(i);
}


size_t vhdlParser::Selected_nameContext::getRuleIndex() const {
  return vhdlParser::RuleSelected_name;
}

void vhdlParser::Selected_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelected_name(this);
}

void vhdlParser::Selected_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelected_name(this);
}


std::any vhdlParser::Selected_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSelected_name(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Selected_nameContext* vhdlParser::selected_name() {
  Selected_nameContext *_localctx = _tracker.createInstance<Selected_nameContext>(_ctx, getState());
  enterRule(_localctx, 16, vhdlParser::RuleSelected_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(560);
    identifier();
    setState(565);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::DOT) {
      setState(561);
      match(vhdlParser::DOT);
      setState(562);
      suffix();
      setState(567);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_declarationContext ------------------------------------------------------------------

vhdlParser::Entity_declarationContext::Entity_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Entity_declarationContext::KW_ENTITY() {
  return getTokens(vhdlParser::KW_ENTITY);
}

tree::TerminalNode* vhdlParser::Entity_declarationContext::KW_ENTITY(size_t i) {
  return getToken(vhdlParser::KW_ENTITY, i);
}

std::vector<vhdlParser::IdentifierContext *> vhdlParser::Entity_declarationContext::identifier() {
  return getRuleContexts<vhdlParser::IdentifierContext>();
}

vhdlParser::IdentifierContext* vhdlParser::Entity_declarationContext::identifier(size_t i) {
  return getRuleContext<vhdlParser::IdentifierContext>(i);
}

tree::TerminalNode* vhdlParser::Entity_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Entity_declarationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Entity_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Generic_clauseContext* vhdlParser::Entity_declarationContext::generic_clause() {
  return getRuleContext<vhdlParser::Generic_clauseContext>(0);
}

vhdlParser::Port_clauseContext* vhdlParser::Entity_declarationContext::port_clause() {
  return getRuleContext<vhdlParser::Port_clauseContext>(0);
}

std::vector<vhdlParser::Entity_declarative_itemContext *> vhdlParser::Entity_declarationContext::entity_declarative_item() {
  return getRuleContexts<vhdlParser::Entity_declarative_itemContext>();
}

vhdlParser::Entity_declarative_itemContext* vhdlParser::Entity_declarationContext::entity_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Entity_declarative_itemContext>(i);
}

tree::TerminalNode* vhdlParser::Entity_declarationContext::KW_BEGIN() {
  return getToken(vhdlParser::KW_BEGIN, 0);
}

std::vector<vhdlParser::Entity_statementContext *> vhdlParser::Entity_declarationContext::entity_statement() {
  return getRuleContexts<vhdlParser::Entity_statementContext>();
}

vhdlParser::Entity_statementContext* vhdlParser::Entity_declarationContext::entity_statement(size_t i) {
  return getRuleContext<vhdlParser::Entity_statementContext>(i);
}


size_t vhdlParser::Entity_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_declaration;
}

void vhdlParser::Entity_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_declaration(this);
}

void vhdlParser::Entity_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_declaration(this);
}


std::any vhdlParser::Entity_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_declarationContext* vhdlParser::entity_declaration() {
  Entity_declarationContext *_localctx = _tracker.createInstance<Entity_declarationContext>(_ctx, getState());
  enterRule(_localctx, 18, vhdlParser::RuleEntity_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(568);
    match(vhdlParser::KW_ENTITY);
    setState(569);
    identifier();
    setState(570);
    match(vhdlParser::KW_IS);
    setState(572);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(571);
      generic_clause();
    }
    setState(575);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PORT) {
      setState(574);
      port_clause();
    }
    setState(580);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4653567294472192) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2147680257) != 0) {
      setState(577);
      entity_declarative_item();
      setState(582);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(590);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_BEGIN) {
      setState(583);
      match(vhdlParser::KW_BEGIN);
      setState(587);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == vhdlParser::KW_PROCESS

      || _la == vhdlParser::KW_POSTPONED || (((_la - 84) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 84)) & 140738318827521) != 0) {
        setState(584);
        entity_statement();
        setState(589);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(592);
    match(vhdlParser::KW_END);
    setState(594);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_ENTITY) {
      setState(593);
      match(vhdlParser::KW_ENTITY);
    }
    setState(597);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(596);
      identifier();
    }
    setState(599);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_declarative_itemContext ------------------------------------------------------------------

vhdlParser::Entity_declarative_itemContext::Entity_declarative_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Signal_declarationContext* vhdlParser::Entity_declarative_itemContext::signal_declaration() {
  return getRuleContext<vhdlParser::Signal_declarationContext>(0);
}

vhdlParser::Process_declarative_itemContext* vhdlParser::Entity_declarative_itemContext::process_declarative_item() {
  return getRuleContext<vhdlParser::Process_declarative_itemContext>(0);
}

vhdlParser::Disconnection_specificationContext* vhdlParser::Entity_declarative_itemContext::disconnection_specification() {
  return getRuleContext<vhdlParser::Disconnection_specificationContext>(0);
}


size_t vhdlParser::Entity_declarative_itemContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_declarative_item;
}

void vhdlParser::Entity_declarative_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_declarative_item(this);
}

void vhdlParser::Entity_declarative_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_declarative_item(this);
}


std::any vhdlParser::Entity_declarative_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_declarative_item(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_declarative_itemContext* vhdlParser::entity_declarative_item() {
  Entity_declarative_itemContext *_localctx = _tracker.createInstance<Entity_declarative_itemContext>(_ctx, getState());
  enterRule(_localctx, 20, vhdlParser::RuleEntity_declarative_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(604);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_SIGNAL: {
        enterOuterAlt(_localctx, 1);
        setState(601);
        signal_declaration();
        break;
      }

      case vhdlParser::KW_GROUP:
      case vhdlParser::KW_FILE:
      case vhdlParser::KW_PURE:
      case vhdlParser::KW_USE:
      case vhdlParser::KW_SHARED:
      case vhdlParser::KW_PROCEDURE:
      case vhdlParser::KW_ATTRIBUTE:
      case vhdlParser::KW_VARIABLE:
      case vhdlParser::KW_SUBTYPE:
      case vhdlParser::KW_CONSTANT:
      case vhdlParser::KW_FUNCTION:
      case vhdlParser::KW_ALIAS:
      case vhdlParser::KW_IMPURE:
      case vhdlParser::KW_PACKAGE:
      case vhdlParser::KW_TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(602);
        process_declarative_item();
        break;
      }

      case vhdlParser::KW_DISCONNECT: {
        enterOuterAlt(_localctx, 3);
        setState(603);
        disconnection_specification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_statementContext ------------------------------------------------------------------

vhdlParser::Entity_statementContext::Entity_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Concurrent_assertion_statementContext* vhdlParser::Entity_statementContext::concurrent_assertion_statement() {
  return getRuleContext<vhdlParser::Concurrent_assertion_statementContext>(0);
}

vhdlParser::Concurrent_procedure_call_statementContext* vhdlParser::Entity_statementContext::concurrent_procedure_call_statement() {
  return getRuleContext<vhdlParser::Concurrent_procedure_call_statementContext>(0);
}

vhdlParser::Process_statementContext* vhdlParser::Entity_statementContext::process_statement() {
  return getRuleContext<vhdlParser::Process_statementContext>(0);
}

vhdlParser::LabelContext* vhdlParser::Entity_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}

tree::TerminalNode* vhdlParser::Entity_statementContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}


size_t vhdlParser::Entity_statementContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_statement;
}

void vhdlParser::Entity_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_statement(this);
}

void vhdlParser::Entity_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_statement(this);
}


std::any vhdlParser::Entity_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_statementContext* vhdlParser::entity_statement() {
  Entity_statementContext *_localctx = _tracker.createInstance<Entity_statementContext>(_ctx, getState());
  enterRule(_localctx, 22, vhdlParser::RuleEntity_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(609);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      setState(606);
      label();
      setState(607);
      match(vhdlParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(614);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(611);
      concurrent_assertion_statement();
      break;
    }

    case 2: {
      setState(612);
      concurrent_procedure_call_statement();
      break;
    }

    case 3: {
      setState(613);
      process_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Architecture_bodyContext ------------------------------------------------------------------

vhdlParser::Architecture_bodyContext::Architecture_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Architecture_bodyContext::KW_ARCHITECTURE() {
  return getTokens(vhdlParser::KW_ARCHITECTURE);
}

tree::TerminalNode* vhdlParser::Architecture_bodyContext::KW_ARCHITECTURE(size_t i) {
  return getToken(vhdlParser::KW_ARCHITECTURE, i);
}

std::vector<vhdlParser::IdentifierContext *> vhdlParser::Architecture_bodyContext::identifier() {
  return getRuleContexts<vhdlParser::IdentifierContext>();
}

vhdlParser::IdentifierContext* vhdlParser::Architecture_bodyContext::identifier(size_t i) {
  return getRuleContext<vhdlParser::IdentifierContext>(i);
}

tree::TerminalNode* vhdlParser::Architecture_bodyContext::KW_OF() {
  return getToken(vhdlParser::KW_OF, 0);
}

vhdlParser::NameContext* vhdlParser::Architecture_bodyContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Architecture_bodyContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Architecture_bodyContext::KW_BEGIN() {
  return getToken(vhdlParser::KW_BEGIN, 0);
}

tree::TerminalNode* vhdlParser::Architecture_bodyContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Architecture_bodyContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<vhdlParser::Block_declarative_itemContext *> vhdlParser::Architecture_bodyContext::block_declarative_item() {
  return getRuleContexts<vhdlParser::Block_declarative_itemContext>();
}

vhdlParser::Block_declarative_itemContext* vhdlParser::Architecture_bodyContext::block_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Block_declarative_itemContext>(i);
}

std::vector<vhdlParser::Concurrent_statementContext *> vhdlParser::Architecture_bodyContext::concurrent_statement() {
  return getRuleContexts<vhdlParser::Concurrent_statementContext>();
}

vhdlParser::Concurrent_statementContext* vhdlParser::Architecture_bodyContext::concurrent_statement(size_t i) {
  return getRuleContext<vhdlParser::Concurrent_statementContext>(i);
}


size_t vhdlParser::Architecture_bodyContext::getRuleIndex() const {
  return vhdlParser::RuleArchitecture_body;
}

void vhdlParser::Architecture_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArchitecture_body(this);
}

void vhdlParser::Architecture_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArchitecture_body(this);
}


std::any vhdlParser::Architecture_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitArchitecture_body(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Architecture_bodyContext* vhdlParser::architecture_body() {
  Architecture_bodyContext *_localctx = _tracker.createInstance<Architecture_bodyContext>(_ctx, getState());
  enterRule(_localctx, 24, vhdlParser::RuleArchitecture_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(616);
    match(vhdlParser::KW_ARCHITECTURE);
    setState(617);
    identifier();
    setState(618);
    match(vhdlParser::KW_OF);
    setState(619);
    name(0);
    setState(620);
    match(vhdlParser::KW_IS);
    setState(624);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4653567294472224) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2156068865) != 0) {
      setState(621);
      block_declarative_item();
      setState(626);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(627);
    match(vhdlParser::KW_BEGIN);
    setState(631);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::KW_PROCESS

    || _la == vhdlParser::KW_POSTPONED || (((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 594478552427008001) != 0) {
      setState(628);
      concurrent_statement();
      setState(633);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(634);
    match(vhdlParser::KW_END);
    setState(636);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_ARCHITECTURE) {
      setState(635);
      match(vhdlParser::KW_ARCHITECTURE);
    }
    setState(639);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(638);
      identifier();
    }
    setState(641);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_declarative_itemContext ------------------------------------------------------------------

vhdlParser::Block_declarative_itemContext::Block_declarative_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Entity_declarative_itemContext* vhdlParser::Block_declarative_itemContext::entity_declarative_item() {
  return getRuleContext<vhdlParser::Entity_declarative_itemContext>(0);
}

vhdlParser::Component_declarationContext* vhdlParser::Block_declarative_itemContext::component_declaration() {
  return getRuleContext<vhdlParser::Component_declarationContext>(0);
}

vhdlParser::Configuration_specificationContext* vhdlParser::Block_declarative_itemContext::configuration_specification() {
  return getRuleContext<vhdlParser::Configuration_specificationContext>(0);
}


size_t vhdlParser::Block_declarative_itemContext::getRuleIndex() const {
  return vhdlParser::RuleBlock_declarative_item;
}

void vhdlParser::Block_declarative_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_declarative_item(this);
}

void vhdlParser::Block_declarative_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_declarative_item(this);
}


std::any vhdlParser::Block_declarative_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitBlock_declarative_item(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Block_declarative_itemContext* vhdlParser::block_declarative_item() {
  Block_declarative_itemContext *_localctx = _tracker.createInstance<Block_declarative_itemContext>(_ctx, getState());
  enterRule(_localctx, 26, vhdlParser::RuleBlock_declarative_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(646);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_GROUP:
      case vhdlParser::KW_FILE:
      case vhdlParser::KW_PURE:
      case vhdlParser::KW_USE:
      case vhdlParser::KW_SHARED:
      case vhdlParser::KW_SIGNAL:
      case vhdlParser::KW_DISCONNECT:
      case vhdlParser::KW_PROCEDURE:
      case vhdlParser::KW_ATTRIBUTE:
      case vhdlParser::KW_VARIABLE:
      case vhdlParser::KW_SUBTYPE:
      case vhdlParser::KW_CONSTANT:
      case vhdlParser::KW_FUNCTION:
      case vhdlParser::KW_ALIAS:
      case vhdlParser::KW_IMPURE:
      case vhdlParser::KW_PACKAGE:
      case vhdlParser::KW_TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(643);
        entity_declarative_item();
        break;
      }

      case vhdlParser::KW_COMPONENT: {
        enterOuterAlt(_localctx, 2);
        setState(644);
        component_declaration();
        break;
      }

      case vhdlParser::KW_FOR: {
        enterOuterAlt(_localctx, 3);
        setState(645);
        configuration_specification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Configuration_declarationContext ------------------------------------------------------------------

vhdlParser::Configuration_declarationContext::Configuration_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Configuration_declarationContext::KW_CONFIGURATION() {
  return getTokens(vhdlParser::KW_CONFIGURATION);
}

tree::TerminalNode* vhdlParser::Configuration_declarationContext::KW_CONFIGURATION(size_t i) {
  return getToken(vhdlParser::KW_CONFIGURATION, i);
}

std::vector<vhdlParser::IdentifierContext *> vhdlParser::Configuration_declarationContext::identifier() {
  return getRuleContexts<vhdlParser::IdentifierContext>();
}

vhdlParser::IdentifierContext* vhdlParser::Configuration_declarationContext::identifier(size_t i) {
  return getRuleContext<vhdlParser::IdentifierContext>(i);
}

tree::TerminalNode* vhdlParser::Configuration_declarationContext::KW_OF() {
  return getToken(vhdlParser::KW_OF, 0);
}

vhdlParser::NameContext* vhdlParser::Configuration_declarationContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Configuration_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

vhdlParser::Block_configurationContext* vhdlParser::Configuration_declarationContext::block_configuration() {
  return getRuleContext<vhdlParser::Block_configurationContext>(0);
}

tree::TerminalNode* vhdlParser::Configuration_declarationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Configuration_declarationContext::SEMI() {
  return getTokens(vhdlParser::SEMI);
}

tree::TerminalNode* vhdlParser::Configuration_declarationContext::SEMI(size_t i) {
  return getToken(vhdlParser::SEMI, i);
}

std::vector<vhdlParser::Configuration_declarative_itemContext *> vhdlParser::Configuration_declarationContext::configuration_declarative_item() {
  return getRuleContexts<vhdlParser::Configuration_declarative_itemContext>();
}

vhdlParser::Configuration_declarative_itemContext* vhdlParser::Configuration_declarationContext::configuration_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Configuration_declarative_itemContext>(i);
}

std::vector<vhdlParser::Verification_unit_binding_indicationContext *> vhdlParser::Configuration_declarationContext::verification_unit_binding_indication() {
  return getRuleContexts<vhdlParser::Verification_unit_binding_indicationContext>();
}

vhdlParser::Verification_unit_binding_indicationContext* vhdlParser::Configuration_declarationContext::verification_unit_binding_indication(size_t i) {
  return getRuleContext<vhdlParser::Verification_unit_binding_indicationContext>(i);
}


size_t vhdlParser::Configuration_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleConfiguration_declaration;
}

void vhdlParser::Configuration_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfiguration_declaration(this);
}

void vhdlParser::Configuration_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfiguration_declaration(this);
}


std::any vhdlParser::Configuration_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConfiguration_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Configuration_declarationContext* vhdlParser::configuration_declaration() {
  Configuration_declarationContext *_localctx = _tracker.createInstance<Configuration_declarationContext>(_ctx, getState());
  enterRule(_localctx, 28, vhdlParser::RuleConfiguration_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(648);
    match(vhdlParser::KW_CONFIGURATION);
    setState(649);
    identifier();
    setState(650);
    match(vhdlParser::KW_OF);
    setState(651);
    name(0);
    setState(652);
    match(vhdlParser::KW_IS);
    setState(656);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(653);
        configuration_declarative_item(); 
      }
      setState(658);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    }
    setState(664);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::KW_USE) {
      setState(659);
      verification_unit_binding_indication();
      setState(660);
      match(vhdlParser::SEMI);
      setState(666);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(667);
    block_configuration();
    setState(668);
    match(vhdlParser::KW_END);
    setState(670);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_CONFIGURATION) {
      setState(669);
      match(vhdlParser::KW_CONFIGURATION);
    }
    setState(673);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(672);
      identifier();
    }
    setState(675);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Configuration_declarative_itemContext ------------------------------------------------------------------

vhdlParser::Configuration_declarative_itemContext::Configuration_declarative_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Use_clauseContext* vhdlParser::Configuration_declarative_itemContext::use_clause() {
  return getRuleContext<vhdlParser::Use_clauseContext>(0);
}

vhdlParser::Attribute_specificationContext* vhdlParser::Configuration_declarative_itemContext::attribute_specification() {
  return getRuleContext<vhdlParser::Attribute_specificationContext>(0);
}

vhdlParser::Group_declarationContext* vhdlParser::Configuration_declarative_itemContext::group_declaration() {
  return getRuleContext<vhdlParser::Group_declarationContext>(0);
}


size_t vhdlParser::Configuration_declarative_itemContext::getRuleIndex() const {
  return vhdlParser::RuleConfiguration_declarative_item;
}

void vhdlParser::Configuration_declarative_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfiguration_declarative_item(this);
}

void vhdlParser::Configuration_declarative_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfiguration_declarative_item(this);
}


std::any vhdlParser::Configuration_declarative_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConfiguration_declarative_item(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Configuration_declarative_itemContext* vhdlParser::configuration_declarative_item() {
  Configuration_declarative_itemContext *_localctx = _tracker.createInstance<Configuration_declarative_itemContext>(_ctx, getState());
  enterRule(_localctx, 30, vhdlParser::RuleConfiguration_declarative_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(680);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_USE: {
        enterOuterAlt(_localctx, 1);
        setState(677);
        use_clause();
        break;
      }

      case vhdlParser::KW_ATTRIBUTE: {
        enterOuterAlt(_localctx, 2);
        setState(678);
        attribute_specification();
        break;
      }

      case vhdlParser::KW_GROUP: {
        enterOuterAlt(_localctx, 3);
        setState(679);
        group_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_configurationContext ------------------------------------------------------------------

vhdlParser::Block_configurationContext::Block_configurationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Block_configurationContext::KW_FOR() {
  return getTokens(vhdlParser::KW_FOR);
}

tree::TerminalNode* vhdlParser::Block_configurationContext::KW_FOR(size_t i) {
  return getToken(vhdlParser::KW_FOR, i);
}

vhdlParser::Block_specificationContext* vhdlParser::Block_configurationContext::block_specification() {
  return getRuleContext<vhdlParser::Block_specificationContext>(0);
}

tree::TerminalNode* vhdlParser::Block_configurationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Block_configurationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<vhdlParser::Use_clauseContext *> vhdlParser::Block_configurationContext::use_clause() {
  return getRuleContexts<vhdlParser::Use_clauseContext>();
}

vhdlParser::Use_clauseContext* vhdlParser::Block_configurationContext::use_clause(size_t i) {
  return getRuleContext<vhdlParser::Use_clauseContext>(i);
}

std::vector<vhdlParser::Configuration_itemContext *> vhdlParser::Block_configurationContext::configuration_item() {
  return getRuleContexts<vhdlParser::Configuration_itemContext>();
}

vhdlParser::Configuration_itemContext* vhdlParser::Block_configurationContext::configuration_item(size_t i) {
  return getRuleContext<vhdlParser::Configuration_itemContext>(i);
}


size_t vhdlParser::Block_configurationContext::getRuleIndex() const {
  return vhdlParser::RuleBlock_configuration;
}

void vhdlParser::Block_configurationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_configuration(this);
}

void vhdlParser::Block_configurationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_configuration(this);
}


std::any vhdlParser::Block_configurationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitBlock_configuration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Block_configurationContext* vhdlParser::block_configuration() {
  Block_configurationContext *_localctx = _tracker.createInstance<Block_configurationContext>(_ctx, getState());
  enterRule(_localctx, 32, vhdlParser::RuleBlock_configuration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(682);
    match(vhdlParser::KW_FOR);
    setState(683);
    block_specification();
    setState(687);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::KW_USE) {
      setState(684);
      use_clause();
      setState(689);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(693);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::KW_FOR) {
      setState(690);
      configuration_item();
      setState(695);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(696);
    match(vhdlParser::KW_END);
    setState(697);
    match(vhdlParser::KW_FOR);
    setState(698);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_specificationContext ------------------------------------------------------------------

vhdlParser::Block_specificationContext::Block_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::LabelContext* vhdlParser::Block_specificationContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}

tree::TerminalNode* vhdlParser::Block_specificationContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Generate_specificationContext* vhdlParser::Block_specificationContext::generate_specification() {
  return getRuleContext<vhdlParser::Generate_specificationContext>(0);
}

tree::TerminalNode* vhdlParser::Block_specificationContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}


size_t vhdlParser::Block_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleBlock_specification;
}

void vhdlParser::Block_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_specification(this);
}

void vhdlParser::Block_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_specification(this);
}


std::any vhdlParser::Block_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitBlock_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Block_specificationContext* vhdlParser::block_specification() {
  Block_specificationContext *_localctx = _tracker.createInstance<Block_specificationContext>(_ctx, getState());
  enterRule(_localctx, 34, vhdlParser::RuleBlock_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(700);
    label();
    setState(705);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::LPAREN) {
      setState(701);
      match(vhdlParser::LPAREN);
      setState(702);
      generate_specification();
      setState(703);
      match(vhdlParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generate_specificationContext ------------------------------------------------------------------

vhdlParser::Generate_specificationContext::Generate_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Discrete_rangeContext* vhdlParser::Generate_specificationContext::discrete_range() {
  return getRuleContext<vhdlParser::Discrete_rangeContext>(0);
}

vhdlParser::ExpressionContext* vhdlParser::Generate_specificationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

vhdlParser::LabelContext* vhdlParser::Generate_specificationContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}


size_t vhdlParser::Generate_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleGenerate_specification;
}

void vhdlParser::Generate_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerate_specification(this);
}

void vhdlParser::Generate_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerate_specification(this);
}


std::any vhdlParser::Generate_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGenerate_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Generate_specificationContext* vhdlParser::generate_specification() {
  Generate_specificationContext *_localctx = _tracker.createInstance<Generate_specificationContext>(_ctx, getState());
  enterRule(_localctx, 36, vhdlParser::RuleGenerate_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(710);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(707);
      discrete_range();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(708);
      expression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(709);
      label();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Configuration_itemContext ------------------------------------------------------------------

vhdlParser::Configuration_itemContext::Configuration_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Block_configurationContext* vhdlParser::Configuration_itemContext::block_configuration() {
  return getRuleContext<vhdlParser::Block_configurationContext>(0);
}

vhdlParser::Component_configurationContext* vhdlParser::Configuration_itemContext::component_configuration() {
  return getRuleContext<vhdlParser::Component_configurationContext>(0);
}


size_t vhdlParser::Configuration_itemContext::getRuleIndex() const {
  return vhdlParser::RuleConfiguration_item;
}

void vhdlParser::Configuration_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfiguration_item(this);
}

void vhdlParser::Configuration_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfiguration_item(this);
}


std::any vhdlParser::Configuration_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConfiguration_item(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Configuration_itemContext* vhdlParser::configuration_item() {
  Configuration_itemContext *_localctx = _tracker.createInstance<Configuration_itemContext>(_ctx, getState());
  enterRule(_localctx, 38, vhdlParser::RuleConfiguration_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(714);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(712);
      block_configuration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(713);
      component_configuration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_configurationContext ------------------------------------------------------------------

vhdlParser::Component_configurationContext::Component_configurationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Component_configurationContext::KW_FOR() {
  return getTokens(vhdlParser::KW_FOR);
}

tree::TerminalNode* vhdlParser::Component_configurationContext::KW_FOR(size_t i) {
  return getToken(vhdlParser::KW_FOR, i);
}

vhdlParser::Component_specificationContext* vhdlParser::Component_configurationContext::component_specification() {
  return getRuleContext<vhdlParser::Component_specificationContext>(0);
}

tree::TerminalNode* vhdlParser::Component_configurationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Component_configurationContext::SEMI() {
  return getTokens(vhdlParser::SEMI);
}

tree::TerminalNode* vhdlParser::Component_configurationContext::SEMI(size_t i) {
  return getToken(vhdlParser::SEMI, i);
}

vhdlParser::Binding_indicationContext* vhdlParser::Component_configurationContext::binding_indication() {
  return getRuleContext<vhdlParser::Binding_indicationContext>(0);
}

std::vector<vhdlParser::Verification_unit_binding_indicationContext *> vhdlParser::Component_configurationContext::verification_unit_binding_indication() {
  return getRuleContexts<vhdlParser::Verification_unit_binding_indicationContext>();
}

vhdlParser::Verification_unit_binding_indicationContext* vhdlParser::Component_configurationContext::verification_unit_binding_indication(size_t i) {
  return getRuleContext<vhdlParser::Verification_unit_binding_indicationContext>(i);
}

vhdlParser::Block_configurationContext* vhdlParser::Component_configurationContext::block_configuration() {
  return getRuleContext<vhdlParser::Block_configurationContext>(0);
}


size_t vhdlParser::Component_configurationContext::getRuleIndex() const {
  return vhdlParser::RuleComponent_configuration;
}

void vhdlParser::Component_configurationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_configuration(this);
}

void vhdlParser::Component_configurationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_configuration(this);
}


std::any vhdlParser::Component_configurationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitComponent_configuration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Component_configurationContext* vhdlParser::component_configuration() {
  Component_configurationContext *_localctx = _tracker.createInstance<Component_configurationContext>(_ctx, getState());
  enterRule(_localctx, 40, vhdlParser::RuleComponent_configuration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(716);
    match(vhdlParser::KW_FOR);
    setState(717);
    component_specification();
    setState(721);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(718);
      binding_indication();
      setState(719);
      match(vhdlParser::SEMI);
      break;
    }

    default:
      break;
    }
    setState(728);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::KW_USE) {
      setState(723);
      verification_unit_binding_indication();
      setState(724);
      match(vhdlParser::SEMI);
      setState(730);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(732);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_FOR) {
      setState(731);
      block_configuration();
    }
    setState(734);
    match(vhdlParser::KW_END);
    setState(735);
    match(vhdlParser::KW_FOR);
    setState(736);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_declarationContext ------------------------------------------------------------------

vhdlParser::Subprogram_declarationContext::Subprogram_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Subprogram_specificationContext* vhdlParser::Subprogram_declarationContext::subprogram_specification() {
  return getRuleContext<vhdlParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* vhdlParser::Subprogram_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Subprogram_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleSubprogram_declaration;
}

void vhdlParser::Subprogram_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_declaration(this);
}

void vhdlParser::Subprogram_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_declaration(this);
}


std::any vhdlParser::Subprogram_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSubprogram_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Subprogram_declarationContext* vhdlParser::subprogram_declaration() {
  Subprogram_declarationContext *_localctx = _tracker.createInstance<Subprogram_declarationContext>(_ctx, getState());
  enterRule(_localctx, 42, vhdlParser::RuleSubprogram_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(738);
    subprogram_specification();
    setState(739);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_specificationContext ------------------------------------------------------------------

vhdlParser::Subprogram_specificationContext::Subprogram_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Procedure_specificationContext* vhdlParser::Subprogram_specificationContext::procedure_specification() {
  return getRuleContext<vhdlParser::Procedure_specificationContext>(0);
}

vhdlParser::Function_specificationContext* vhdlParser::Subprogram_specificationContext::function_specification() {
  return getRuleContext<vhdlParser::Function_specificationContext>(0);
}


size_t vhdlParser::Subprogram_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleSubprogram_specification;
}

void vhdlParser::Subprogram_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_specification(this);
}

void vhdlParser::Subprogram_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_specification(this);
}


std::any vhdlParser::Subprogram_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSubprogram_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Subprogram_specificationContext* vhdlParser::subprogram_specification() {
  Subprogram_specificationContext *_localctx = _tracker.createInstance<Subprogram_specificationContext>(_ctx, getState());
  enterRule(_localctx, 44, vhdlParser::RuleSubprogram_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(743);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(741);
        procedure_specification();
        break;
      }

      case vhdlParser::KW_PURE:
      case vhdlParser::KW_FUNCTION:
      case vhdlParser::KW_IMPURE: {
        enterOuterAlt(_localctx, 2);
        setState(742);
        function_specification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_specificationContext ------------------------------------------------------------------

vhdlParser::Procedure_specificationContext::Procedure_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Procedure_specificationContext::KW_PROCEDURE() {
  return getToken(vhdlParser::KW_PROCEDURE, 0);
}

vhdlParser::DesignatorContext* vhdlParser::Procedure_specificationContext::designator() {
  return getRuleContext<vhdlParser::DesignatorContext>(0);
}

vhdlParser::Subprogram_headerContext* vhdlParser::Procedure_specificationContext::subprogram_header() {
  return getRuleContext<vhdlParser::Subprogram_headerContext>(0);
}

tree::TerminalNode* vhdlParser::Procedure_specificationContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Formal_parameter_listContext* vhdlParser::Procedure_specificationContext::formal_parameter_list() {
  return getRuleContext<vhdlParser::Formal_parameter_listContext>(0);
}

tree::TerminalNode* vhdlParser::Procedure_specificationContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Procedure_specificationContext::KW_PARAMETER() {
  return getToken(vhdlParser::KW_PARAMETER, 0);
}


size_t vhdlParser::Procedure_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleProcedure_specification;
}

void vhdlParser::Procedure_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedure_specification(this);
}

void vhdlParser::Procedure_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedure_specification(this);
}


std::any vhdlParser::Procedure_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProcedure_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Procedure_specificationContext* vhdlParser::procedure_specification() {
  Procedure_specificationContext *_localctx = _tracker.createInstance<Procedure_specificationContext>(_ctx, getState());
  enterRule(_localctx, 46, vhdlParser::RuleProcedure_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(745);
    match(vhdlParser::KW_PROCEDURE);
    setState(746);
    designator();
    setState(748);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(747);
      subprogram_header();
    }
    setState(757);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PARAMETER

    || _la == vhdlParser::LPAREN) {
      setState(751);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_PARAMETER) {
        setState(750);
        match(vhdlParser::KW_PARAMETER);
      }
      setState(753);
      match(vhdlParser::LPAREN);
      setState(754);
      formal_parameter_list();
      setState(755);
      match(vhdlParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_specificationContext ------------------------------------------------------------------

vhdlParser::Function_specificationContext::Function_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Function_specificationContext::KW_FUNCTION() {
  return getToken(vhdlParser::KW_FUNCTION, 0);
}

vhdlParser::DesignatorContext* vhdlParser::Function_specificationContext::designator() {
  return getRuleContext<vhdlParser::DesignatorContext>(0);
}

tree::TerminalNode* vhdlParser::Function_specificationContext::KW_RETURN() {
  return getToken(vhdlParser::KW_RETURN, 0);
}

vhdlParser::Type_markContext* vhdlParser::Function_specificationContext::type_mark() {
  return getRuleContext<vhdlParser::Type_markContext>(0);
}

vhdlParser::Subprogram_headerContext* vhdlParser::Function_specificationContext::subprogram_header() {
  return getRuleContext<vhdlParser::Subprogram_headerContext>(0);
}

tree::TerminalNode* vhdlParser::Function_specificationContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Formal_parameter_listContext* vhdlParser::Function_specificationContext::formal_parameter_list() {
  return getRuleContext<vhdlParser::Formal_parameter_listContext>(0);
}

tree::TerminalNode* vhdlParser::Function_specificationContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Function_specificationContext::KW_PURE() {
  return getToken(vhdlParser::KW_PURE, 0);
}

tree::TerminalNode* vhdlParser::Function_specificationContext::KW_IMPURE() {
  return getToken(vhdlParser::KW_IMPURE, 0);
}

tree::TerminalNode* vhdlParser::Function_specificationContext::KW_PARAMETER() {
  return getToken(vhdlParser::KW_PARAMETER, 0);
}


size_t vhdlParser::Function_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleFunction_specification;
}

void vhdlParser::Function_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_specification(this);
}

void vhdlParser::Function_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_specification(this);
}


std::any vhdlParser::Function_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFunction_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Function_specificationContext* vhdlParser::function_specification() {
  Function_specificationContext *_localctx = _tracker.createInstance<Function_specificationContext>(_ctx, getState());
  enterRule(_localctx, 48, vhdlParser::RuleFunction_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(760);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PURE

    || _la == vhdlParser::KW_IMPURE) {
      setState(759);
      _la = _input->LA(1);
      if (!(_la == vhdlParser::KW_PURE

      || _la == vhdlParser::KW_IMPURE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(762);
    match(vhdlParser::KW_FUNCTION);
    setState(763);
    designator();
    setState(765);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(764);
      subprogram_header();
    }
    setState(774);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PARAMETER

    || _la == vhdlParser::LPAREN) {
      setState(768);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_PARAMETER) {
        setState(767);
        match(vhdlParser::KW_PARAMETER);
      }
      setState(770);
      match(vhdlParser::LPAREN);
      setState(771);
      formal_parameter_list();
      setState(772);
      match(vhdlParser::RPAREN);
    }
    setState(776);
    match(vhdlParser::KW_RETURN);
    setState(777);
    type_mark();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_headerContext ------------------------------------------------------------------

vhdlParser::Subprogram_headerContext::Subprogram_headerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Subprogram_headerContext::KW_GENERIC() {
  return getToken(vhdlParser::KW_GENERIC, 0);
}

tree::TerminalNode* vhdlParser::Subprogram_headerContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Generic_listContext* vhdlParser::Subprogram_headerContext::generic_list() {
  return getRuleContext<vhdlParser::Generic_listContext>(0);
}

tree::TerminalNode* vhdlParser::Subprogram_headerContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

vhdlParser::Generic_map_aspectContext* vhdlParser::Subprogram_headerContext::generic_map_aspect() {
  return getRuleContext<vhdlParser::Generic_map_aspectContext>(0);
}


size_t vhdlParser::Subprogram_headerContext::getRuleIndex() const {
  return vhdlParser::RuleSubprogram_header;
}

void vhdlParser::Subprogram_headerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_header(this);
}

void vhdlParser::Subprogram_headerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_header(this);
}


std::any vhdlParser::Subprogram_headerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSubprogram_header(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Subprogram_headerContext* vhdlParser::subprogram_header() {
  Subprogram_headerContext *_localctx = _tracker.createInstance<Subprogram_headerContext>(_ctx, getState());
  enterRule(_localctx, 50, vhdlParser::RuleSubprogram_header);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(779);
    match(vhdlParser::KW_GENERIC);
    setState(780);
    match(vhdlParser::LPAREN);
    setState(781);
    generic_list();
    setState(782);
    match(vhdlParser::RPAREN);
    setState(784);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(783);
      generic_map_aspect();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignatorContext ------------------------------------------------------------------

vhdlParser::DesignatorContext::DesignatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::DesignatorContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

vhdlParser::Operator_symbolContext* vhdlParser::DesignatorContext::operator_symbol() {
  return getRuleContext<vhdlParser::Operator_symbolContext>(0);
}


size_t vhdlParser::DesignatorContext::getRuleIndex() const {
  return vhdlParser::RuleDesignator;
}

void vhdlParser::DesignatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesignator(this);
}

void vhdlParser::DesignatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesignator(this);
}


std::any vhdlParser::DesignatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitDesignator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::DesignatorContext* vhdlParser::designator() {
  DesignatorContext *_localctx = _tracker.createInstance<DesignatorContext>(_ctx, getState());
  enterRule(_localctx, 52, vhdlParser::RuleDesignator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(788);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(786);
        identifier();
        break;
      }

      case vhdlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(787);
        operator_symbol();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Operator_symbolContext ------------------------------------------------------------------

vhdlParser::Operator_symbolContext::Operator_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Operator_symbolContext::STRING_LITERAL() {
  return getToken(vhdlParser::STRING_LITERAL, 0);
}


size_t vhdlParser::Operator_symbolContext::getRuleIndex() const {
  return vhdlParser::RuleOperator_symbol;
}

void vhdlParser::Operator_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperator_symbol(this);
}

void vhdlParser::Operator_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperator_symbol(this);
}


std::any vhdlParser::Operator_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitOperator_symbol(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Operator_symbolContext* vhdlParser::operator_symbol() {
  Operator_symbolContext *_localctx = _tracker.createInstance<Operator_symbolContext>(_ctx, getState());
  enterRule(_localctx, 54, vhdlParser::RuleOperator_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(790);
    match(vhdlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_parameter_listContext ------------------------------------------------------------------

vhdlParser::Formal_parameter_listContext::Formal_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Interface_listContext* vhdlParser::Formal_parameter_listContext::interface_list() {
  return getRuleContext<vhdlParser::Interface_listContext>(0);
}


size_t vhdlParser::Formal_parameter_listContext::getRuleIndex() const {
  return vhdlParser::RuleFormal_parameter_list;
}

void vhdlParser::Formal_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_parameter_list(this);
}

void vhdlParser::Formal_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_parameter_list(this);
}


std::any vhdlParser::Formal_parameter_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFormal_parameter_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Formal_parameter_listContext* vhdlParser::formal_parameter_list() {
  Formal_parameter_listContext *_localctx = _tracker.createInstance<Formal_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 56, vhdlParser::RuleFormal_parameter_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(792);
    interface_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_bodyContext ------------------------------------------------------------------

vhdlParser::Subprogram_bodyContext::Subprogram_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Subprogram_specificationContext* vhdlParser::Subprogram_bodyContext::subprogram_specification() {
  return getRuleContext<vhdlParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* vhdlParser::Subprogram_bodyContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Subprogram_bodyContext::KW_BEGIN() {
  return getToken(vhdlParser::KW_BEGIN, 0);
}

tree::TerminalNode* vhdlParser::Subprogram_bodyContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Subprogram_bodyContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<vhdlParser::Process_declarative_itemContext *> vhdlParser::Subprogram_bodyContext::process_declarative_item() {
  return getRuleContexts<vhdlParser::Process_declarative_itemContext>();
}

vhdlParser::Process_declarative_itemContext* vhdlParser::Subprogram_bodyContext::process_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Process_declarative_itemContext>(i);
}

std::vector<vhdlParser::Sequential_statementContext *> vhdlParser::Subprogram_bodyContext::sequential_statement() {
  return getRuleContexts<vhdlParser::Sequential_statementContext>();
}

vhdlParser::Sequential_statementContext* vhdlParser::Subprogram_bodyContext::sequential_statement(size_t i) {
  return getRuleContext<vhdlParser::Sequential_statementContext>(i);
}

vhdlParser::Subprogram_kindContext* vhdlParser::Subprogram_bodyContext::subprogram_kind() {
  return getRuleContext<vhdlParser::Subprogram_kindContext>(0);
}

vhdlParser::DesignatorContext* vhdlParser::Subprogram_bodyContext::designator() {
  return getRuleContext<vhdlParser::DesignatorContext>(0);
}


size_t vhdlParser::Subprogram_bodyContext::getRuleIndex() const {
  return vhdlParser::RuleSubprogram_body;
}

void vhdlParser::Subprogram_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_body(this);
}

void vhdlParser::Subprogram_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_body(this);
}


std::any vhdlParser::Subprogram_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSubprogram_body(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Subprogram_bodyContext* vhdlParser::subprogram_body() {
  Subprogram_bodyContext *_localctx = _tracker.createInstance<Subprogram_bodyContext>(_ctx, getState());
  enterRule(_localctx, 58, vhdlParser::RuleSubprogram_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(794);
    subprogram_specification();
    setState(795);
    match(vhdlParser::KW_IS);
    setState(799);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4653562731069440) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2147680257) != 0) {
      setState(796);
      process_declarative_item();
      setState(801);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(802);
    match(vhdlParser::KW_BEGIN);
    setState(806);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70368811290624) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 2377914278563038279) != 0) {
      setState(803);
      sequential_statement();
      setState(808);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(809);
    match(vhdlParser::KW_END);
    setState(811);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PROCEDURE

    || _la == vhdlParser::KW_FUNCTION) {
      setState(810);
      subprogram_kind();
    }
    setState(814);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 107) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 107)) & 67) != 0) {
      setState(813);
      designator();
    }
    setState(816);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_kindContext ------------------------------------------------------------------

vhdlParser::Subprogram_kindContext::Subprogram_kindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Subprogram_kindContext::KW_PROCEDURE() {
  return getToken(vhdlParser::KW_PROCEDURE, 0);
}

tree::TerminalNode* vhdlParser::Subprogram_kindContext::KW_FUNCTION() {
  return getToken(vhdlParser::KW_FUNCTION, 0);
}


size_t vhdlParser::Subprogram_kindContext::getRuleIndex() const {
  return vhdlParser::RuleSubprogram_kind;
}

void vhdlParser::Subprogram_kindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_kind(this);
}

void vhdlParser::Subprogram_kindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_kind(this);
}


std::any vhdlParser::Subprogram_kindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSubprogram_kind(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Subprogram_kindContext* vhdlParser::subprogram_kind() {
  Subprogram_kindContext *_localctx = _tracker.createInstance<Subprogram_kindContext>(_ctx, getState());
  enterRule(_localctx, 60, vhdlParser::RuleSubprogram_kind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(818);
    _la = _input->LA(1);
    if (!(_la == vhdlParser::KW_PROCEDURE

    || _la == vhdlParser::KW_FUNCTION)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_instantiation_declarationContext ------------------------------------------------------------------

vhdlParser::Subprogram_instantiation_declarationContext::Subprogram_instantiation_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Subprogram_kindContext* vhdlParser::Subprogram_instantiation_declarationContext::subprogram_kind() {
  return getRuleContext<vhdlParser::Subprogram_kindContext>(0);
}

vhdlParser::DesignatorContext* vhdlParser::Subprogram_instantiation_declarationContext::designator() {
  return getRuleContext<vhdlParser::DesignatorContext>(0);
}

tree::TerminalNode* vhdlParser::Subprogram_instantiation_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Subprogram_instantiation_declarationContext::KW_NEW() {
  return getToken(vhdlParser::KW_NEW, 0);
}

vhdlParser::NameContext* vhdlParser::Subprogram_instantiation_declarationContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Subprogram_instantiation_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::SignatureContext* vhdlParser::Subprogram_instantiation_declarationContext::signature() {
  return getRuleContext<vhdlParser::SignatureContext>(0);
}

vhdlParser::Generic_map_aspectContext* vhdlParser::Subprogram_instantiation_declarationContext::generic_map_aspect() {
  return getRuleContext<vhdlParser::Generic_map_aspectContext>(0);
}


size_t vhdlParser::Subprogram_instantiation_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleSubprogram_instantiation_declaration;
}

void vhdlParser::Subprogram_instantiation_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_instantiation_declaration(this);
}

void vhdlParser::Subprogram_instantiation_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_instantiation_declaration(this);
}


std::any vhdlParser::Subprogram_instantiation_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSubprogram_instantiation_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Subprogram_instantiation_declarationContext* vhdlParser::subprogram_instantiation_declaration() {
  Subprogram_instantiation_declarationContext *_localctx = _tracker.createInstance<Subprogram_instantiation_declarationContext>(_ctx, getState());
  enterRule(_localctx, 62, vhdlParser::RuleSubprogram_instantiation_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(820);
    subprogram_kind();
    setState(821);
    designator();
    setState(822);
    match(vhdlParser::KW_IS);
    setState(823);
    match(vhdlParser::KW_NEW);
    setState(824);
    name(0);
    setState(826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::LSQUARE_BR) {
      setState(825);
      signature();
    }
    setState(829);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(828);
      generic_map_aspect();
    }
    setState(831);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignatureContext ------------------------------------------------------------------

vhdlParser::SignatureContext::SignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::SignatureContext::LSQUARE_BR() {
  return getToken(vhdlParser::LSQUARE_BR, 0);
}

tree::TerminalNode* vhdlParser::SignatureContext::RSQUARE_BR() {
  return getToken(vhdlParser::RSQUARE_BR, 0);
}

std::vector<vhdlParser::Type_markContext *> vhdlParser::SignatureContext::type_mark() {
  return getRuleContexts<vhdlParser::Type_markContext>();
}

vhdlParser::Type_markContext* vhdlParser::SignatureContext::type_mark(size_t i) {
  return getRuleContext<vhdlParser::Type_markContext>(i);
}

tree::TerminalNode* vhdlParser::SignatureContext::KW_RETURN() {
  return getToken(vhdlParser::KW_RETURN, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::SignatureContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::SignatureContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::SignatureContext::getRuleIndex() const {
  return vhdlParser::RuleSignature;
}

void vhdlParser::SignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSignature(this);
}

void vhdlParser::SignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSignature(this);
}


std::any vhdlParser::SignatureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSignature(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::SignatureContext* vhdlParser::signature() {
  SignatureContext *_localctx = _tracker.createInstance<SignatureContext>(_ctx, getState());
  enterRule(_localctx, 64, vhdlParser::RuleSignature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(833);
    match(vhdlParser::LSQUARE_BR);
    setState(842);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 107) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 107)) & 16777315) != 0) {
      setState(834);
      type_mark();
      setState(839);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == vhdlParser::COMMA) {
        setState(835);
        match(vhdlParser::COMMA);
        setState(836);
        type_mark();
        setState(841);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(846);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_RETURN) {
      setState(844);
      match(vhdlParser::KW_RETURN);
      setState(845);
      type_mark();
    }
    setState(848);
    match(vhdlParser::RSQUARE_BR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_declarationContext ------------------------------------------------------------------

vhdlParser::Package_declarationContext::Package_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Package_declarationContext::KW_PACKAGE() {
  return getTokens(vhdlParser::KW_PACKAGE);
}

tree::TerminalNode* vhdlParser::Package_declarationContext::KW_PACKAGE(size_t i) {
  return getToken(vhdlParser::KW_PACKAGE, i);
}

std::vector<vhdlParser::IdentifierContext *> vhdlParser::Package_declarationContext::identifier() {
  return getRuleContexts<vhdlParser::IdentifierContext>();
}

vhdlParser::IdentifierContext* vhdlParser::Package_declarationContext::identifier(size_t i) {
  return getRuleContext<vhdlParser::IdentifierContext>(i);
}

tree::TerminalNode* vhdlParser::Package_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Package_declarationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Package_declarationContext::SEMI() {
  return getTokens(vhdlParser::SEMI);
}

tree::TerminalNode* vhdlParser::Package_declarationContext::SEMI(size_t i) {
  return getToken(vhdlParser::SEMI, i);
}

vhdlParser::Generic_clauseContext* vhdlParser::Package_declarationContext::generic_clause() {
  return getRuleContext<vhdlParser::Generic_clauseContext>(0);
}

std::vector<vhdlParser::Package_declarative_itemContext *> vhdlParser::Package_declarationContext::package_declarative_item() {
  return getRuleContexts<vhdlParser::Package_declarative_itemContext>();
}

vhdlParser::Package_declarative_itemContext* vhdlParser::Package_declarationContext::package_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Package_declarative_itemContext>(i);
}

vhdlParser::Generic_map_aspectContext* vhdlParser::Package_declarationContext::generic_map_aspect() {
  return getRuleContext<vhdlParser::Generic_map_aspectContext>(0);
}


size_t vhdlParser::Package_declarationContext::getRuleIndex() const {
  return vhdlParser::RulePackage_declaration;
}

void vhdlParser::Package_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_declaration(this);
}

void vhdlParser::Package_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_declaration(this);
}


std::any vhdlParser::Package_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPackage_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Package_declarationContext* vhdlParser::package_declaration() {
  Package_declarationContext *_localctx = _tracker.createInstance<Package_declarationContext>(_ctx, getState());
  enterRule(_localctx, 66, vhdlParser::RulePackage_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(850);
    match(vhdlParser::KW_PACKAGE);
    setState(851);
    identifier();
    setState(852);
    match(vhdlParser::KW_IS);
    setState(859);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(853);
      generic_clause();
      setState(857);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_GENERIC) {
        setState(854);
        generic_map_aspect();
        setState(855);
        match(vhdlParser::SEMI);
      }
    }
    setState(864);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4653567294472224) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2147680257) != 0) {
      setState(861);
      package_declarative_item();
      setState(866);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(867);
    match(vhdlParser::KW_END);
    setState(869);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PACKAGE) {
      setState(868);
      match(vhdlParser::KW_PACKAGE);
    }
    setState(872);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(871);
      identifier();
    }
    setState(874);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_declarative_itemContext ------------------------------------------------------------------

vhdlParser::Package_declarative_itemContext::Package_declarative_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Process_or_package_declarative_itemContext* vhdlParser::Package_declarative_itemContext::process_or_package_declarative_item() {
  return getRuleContext<vhdlParser::Process_or_package_declarative_itemContext>(0);
}

vhdlParser::Signal_declarationContext* vhdlParser::Package_declarative_itemContext::signal_declaration() {
  return getRuleContext<vhdlParser::Signal_declarationContext>(0);
}

vhdlParser::Component_declarationContext* vhdlParser::Package_declarative_itemContext::component_declaration() {
  return getRuleContext<vhdlParser::Component_declarationContext>(0);
}

vhdlParser::Disconnection_specificationContext* vhdlParser::Package_declarative_itemContext::disconnection_specification() {
  return getRuleContext<vhdlParser::Disconnection_specificationContext>(0);
}


size_t vhdlParser::Package_declarative_itemContext::getRuleIndex() const {
  return vhdlParser::RulePackage_declarative_item;
}

void vhdlParser::Package_declarative_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_declarative_item(this);
}

void vhdlParser::Package_declarative_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_declarative_item(this);
}


std::any vhdlParser::Package_declarative_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPackage_declarative_item(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Package_declarative_itemContext* vhdlParser::package_declarative_item() {
  Package_declarative_itemContext *_localctx = _tracker.createInstance<Package_declarative_itemContext>(_ctx, getState());
  enterRule(_localctx, 68, vhdlParser::RulePackage_declarative_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(880);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_GROUP:
      case vhdlParser::KW_FILE:
      case vhdlParser::KW_PURE:
      case vhdlParser::KW_USE:
      case vhdlParser::KW_SHARED:
      case vhdlParser::KW_PROCEDURE:
      case vhdlParser::KW_ATTRIBUTE:
      case vhdlParser::KW_VARIABLE:
      case vhdlParser::KW_SUBTYPE:
      case vhdlParser::KW_CONSTANT:
      case vhdlParser::KW_FUNCTION:
      case vhdlParser::KW_ALIAS:
      case vhdlParser::KW_IMPURE:
      case vhdlParser::KW_PACKAGE:
      case vhdlParser::KW_TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(876);
        process_or_package_declarative_item();
        break;
      }

      case vhdlParser::KW_SIGNAL: {
        enterOuterAlt(_localctx, 2);
        setState(877);
        signal_declaration();
        break;
      }

      case vhdlParser::KW_COMPONENT: {
        enterOuterAlt(_localctx, 3);
        setState(878);
        component_declaration();
        break;
      }

      case vhdlParser::KW_DISCONNECT: {
        enterOuterAlt(_localctx, 4);
        setState(879);
        disconnection_specification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_bodyContext ------------------------------------------------------------------

vhdlParser::Package_bodyContext::Package_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Package_bodyContext::KW_PACKAGE() {
  return getTokens(vhdlParser::KW_PACKAGE);
}

tree::TerminalNode* vhdlParser::Package_bodyContext::KW_PACKAGE(size_t i) {
  return getToken(vhdlParser::KW_PACKAGE, i);
}

std::vector<tree::TerminalNode *> vhdlParser::Package_bodyContext::KW_BODY() {
  return getTokens(vhdlParser::KW_BODY);
}

tree::TerminalNode* vhdlParser::Package_bodyContext::KW_BODY(size_t i) {
  return getToken(vhdlParser::KW_BODY, i);
}

std::vector<vhdlParser::IdentifierContext *> vhdlParser::Package_bodyContext::identifier() {
  return getRuleContexts<vhdlParser::IdentifierContext>();
}

vhdlParser::IdentifierContext* vhdlParser::Package_bodyContext::identifier(size_t i) {
  return getRuleContext<vhdlParser::IdentifierContext>(i);
}

tree::TerminalNode* vhdlParser::Package_bodyContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Package_bodyContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Package_bodyContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<vhdlParser::Process_declarative_itemContext *> vhdlParser::Package_bodyContext::process_declarative_item() {
  return getRuleContexts<vhdlParser::Process_declarative_itemContext>();
}

vhdlParser::Process_declarative_itemContext* vhdlParser::Package_bodyContext::process_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Process_declarative_itemContext>(i);
}


size_t vhdlParser::Package_bodyContext::getRuleIndex() const {
  return vhdlParser::RulePackage_body;
}

void vhdlParser::Package_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_body(this);
}

void vhdlParser::Package_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_body(this);
}


std::any vhdlParser::Package_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPackage_body(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Package_bodyContext* vhdlParser::package_body() {
  Package_bodyContext *_localctx = _tracker.createInstance<Package_bodyContext>(_ctx, getState());
  enterRule(_localctx, 70, vhdlParser::RulePackage_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(882);
    match(vhdlParser::KW_PACKAGE);
    setState(883);
    match(vhdlParser::KW_BODY);
    setState(884);
    identifier();
    setState(885);
    match(vhdlParser::KW_IS);
    setState(889);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4653562731069440) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2147680257) != 0) {
      setState(886);
      process_declarative_item();
      setState(891);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(892);
    match(vhdlParser::KW_END);
    setState(895);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PACKAGE) {
      setState(893);
      match(vhdlParser::KW_PACKAGE);
      setState(894);
      match(vhdlParser::KW_BODY);
    }
    setState(898);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(897);
      identifier();
    }
    setState(900);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_instantiation_declarationContext ------------------------------------------------------------------

vhdlParser::Package_instantiation_declarationContext::Package_instantiation_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Package_instantiation_declarationContext::KW_PACKAGE() {
  return getToken(vhdlParser::KW_PACKAGE, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Package_instantiation_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Package_instantiation_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Package_instantiation_declarationContext::KW_NEW() {
  return getToken(vhdlParser::KW_NEW, 0);
}

vhdlParser::NameContext* vhdlParser::Package_instantiation_declarationContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Package_instantiation_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Generic_map_aspectContext* vhdlParser::Package_instantiation_declarationContext::generic_map_aspect() {
  return getRuleContext<vhdlParser::Generic_map_aspectContext>(0);
}


size_t vhdlParser::Package_instantiation_declarationContext::getRuleIndex() const {
  return vhdlParser::RulePackage_instantiation_declaration;
}

void vhdlParser::Package_instantiation_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_instantiation_declaration(this);
}

void vhdlParser::Package_instantiation_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_instantiation_declaration(this);
}


std::any vhdlParser::Package_instantiation_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPackage_instantiation_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Package_instantiation_declarationContext* vhdlParser::package_instantiation_declaration() {
  Package_instantiation_declarationContext *_localctx = _tracker.createInstance<Package_instantiation_declarationContext>(_ctx, getState());
  enterRule(_localctx, 72, vhdlParser::RulePackage_instantiation_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(902);
    match(vhdlParser::KW_PACKAGE);
    setState(903);
    identifier();
    setState(904);
    match(vhdlParser::KW_IS);
    setState(905);
    match(vhdlParser::KW_NEW);
    setState(906);
    name(0);
    setState(908);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(907);
      generic_map_aspect();
    }
    setState(910);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Scalar_type_definitionContext ------------------------------------------------------------------

vhdlParser::Scalar_type_definitionContext::Scalar_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Enumeration_type_definitionContext* vhdlParser::Scalar_type_definitionContext::enumeration_type_definition() {
  return getRuleContext<vhdlParser::Enumeration_type_definitionContext>(0);
}

vhdlParser::Integer_type_definitionContext* vhdlParser::Scalar_type_definitionContext::integer_type_definition() {
  return getRuleContext<vhdlParser::Integer_type_definitionContext>(0);
}

vhdlParser::Floating_type_definitionContext* vhdlParser::Scalar_type_definitionContext::floating_type_definition() {
  return getRuleContext<vhdlParser::Floating_type_definitionContext>(0);
}

vhdlParser::Physical_type_definitionContext* vhdlParser::Scalar_type_definitionContext::physical_type_definition() {
  return getRuleContext<vhdlParser::Physical_type_definitionContext>(0);
}


size_t vhdlParser::Scalar_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleScalar_type_definition;
}

void vhdlParser::Scalar_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScalar_type_definition(this);
}

void vhdlParser::Scalar_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScalar_type_definition(this);
}


std::any vhdlParser::Scalar_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitScalar_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Scalar_type_definitionContext* vhdlParser::scalar_type_definition() {
  Scalar_type_definitionContext *_localctx = _tracker.createInstance<Scalar_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 74, vhdlParser::RuleScalar_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(916);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(912);
      enumeration_type_definition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(913);
      integer_type_definition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(914);
      floating_type_definition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(915);
      physical_type_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Range_constraintContext ------------------------------------------------------------------

vhdlParser::Range_constraintContext::Range_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Range_constraintContext::KW_RANGE() {
  return getToken(vhdlParser::KW_RANGE, 0);
}

vhdlParser::RangeContext* vhdlParser::Range_constraintContext::range() {
  return getRuleContext<vhdlParser::RangeContext>(0);
}


size_t vhdlParser::Range_constraintContext::getRuleIndex() const {
  return vhdlParser::RuleRange_constraint;
}

void vhdlParser::Range_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange_constraint(this);
}

void vhdlParser::Range_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange_constraint(this);
}


std::any vhdlParser::Range_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitRange_constraint(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Range_constraintContext* vhdlParser::range_constraint() {
  Range_constraintContext *_localctx = _tracker.createInstance<Range_constraintContext>(_ctx, getState());
  enterRule(_localctx, 76, vhdlParser::RuleRange_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(918);
    match(vhdlParser::KW_RANGE);
    setState(919);
    range();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RangeContext ------------------------------------------------------------------

vhdlParser::RangeContext::RangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Attribute_nameContext* vhdlParser::RangeContext::attribute_name() {
  return getRuleContext<vhdlParser::Attribute_nameContext>(0);
}

vhdlParser::Explicit_rangeContext* vhdlParser::RangeContext::explicit_range() {
  return getRuleContext<vhdlParser::Explicit_rangeContext>(0);
}


size_t vhdlParser::RangeContext::getRuleIndex() const {
  return vhdlParser::RuleRange;
}

void vhdlParser::RangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange(this);
}

void vhdlParser::RangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange(this);
}


std::any vhdlParser::RangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitRange(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::RangeContext* vhdlParser::range() {
  RangeContext *_localctx = _tracker.createInstance<RangeContext>(_ctx, getState());
  enterRule(_localctx, 78, vhdlParser::RuleRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(923);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(921);
      attribute_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(922);
      explicit_range();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectionContext ------------------------------------------------------------------

vhdlParser::DirectionContext::DirectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::DirectionContext::KW_TO() {
  return getToken(vhdlParser::KW_TO, 0);
}

tree::TerminalNode* vhdlParser::DirectionContext::KW_DOWNTO() {
  return getToken(vhdlParser::KW_DOWNTO, 0);
}


size_t vhdlParser::DirectionContext::getRuleIndex() const {
  return vhdlParser::RuleDirection;
}

void vhdlParser::DirectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirection(this);
}

void vhdlParser::DirectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirection(this);
}


std::any vhdlParser::DirectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitDirection(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::DirectionContext* vhdlParser::direction() {
  DirectionContext *_localctx = _tracker.createInstance<DirectionContext>(_ctx, getState());
  enterRule(_localctx, 80, vhdlParser::RuleDirection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(925);
    _la = _input->LA(1);
    if (!(_la == vhdlParser::KW_TO

    || _la == vhdlParser::KW_DOWNTO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_type_definitionContext ------------------------------------------------------------------

vhdlParser::Enumeration_type_definitionContext::Enumeration_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Enumeration_type_definitionContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

std::vector<vhdlParser::Enumeration_literalContext *> vhdlParser::Enumeration_type_definitionContext::enumeration_literal() {
  return getRuleContexts<vhdlParser::Enumeration_literalContext>();
}

vhdlParser::Enumeration_literalContext* vhdlParser::Enumeration_type_definitionContext::enumeration_literal(size_t i) {
  return getRuleContext<vhdlParser::Enumeration_literalContext>(i);
}

tree::TerminalNode* vhdlParser::Enumeration_type_definitionContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Enumeration_type_definitionContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Enumeration_type_definitionContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Enumeration_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleEnumeration_type_definition;
}

void vhdlParser::Enumeration_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_type_definition(this);
}

void vhdlParser::Enumeration_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_type_definition(this);
}


std::any vhdlParser::Enumeration_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEnumeration_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Enumeration_type_definitionContext* vhdlParser::enumeration_type_definition() {
  Enumeration_type_definitionContext *_localctx = _tracker.createInstance<Enumeration_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 82, vhdlParser::RuleEnumeration_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(927);
    match(vhdlParser::LPAREN);
    setState(928);
    enumeration_literal();
    setState(933);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(929);
      match(vhdlParser::COMMA);
      setState(930);
      enumeration_literal();
      setState(935);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(936);
    match(vhdlParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_literalContext ------------------------------------------------------------------

vhdlParser::Enumeration_literalContext::Enumeration_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Enumeration_literalContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Enumeration_literalContext::CHARACTER_LITERAL() {
  return getToken(vhdlParser::CHARACTER_LITERAL, 0);
}


size_t vhdlParser::Enumeration_literalContext::getRuleIndex() const {
  return vhdlParser::RuleEnumeration_literal;
}

void vhdlParser::Enumeration_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_literal(this);
}

void vhdlParser::Enumeration_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_literal(this);
}


std::any vhdlParser::Enumeration_literalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEnumeration_literal(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Enumeration_literalContext* vhdlParser::enumeration_literal() {
  Enumeration_literalContext *_localctx = _tracker.createInstance<Enumeration_literalContext>(_ctx, getState());
  enterRule(_localctx, 84, vhdlParser::RuleEnumeration_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(940);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(938);
        identifier();
        break;
      }

      case vhdlParser::CHARACTER_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(939);
        match(vhdlParser::CHARACTER_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Integer_type_definitionContext ------------------------------------------------------------------

vhdlParser::Integer_type_definitionContext::Integer_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Range_constraintContext* vhdlParser::Integer_type_definitionContext::range_constraint() {
  return getRuleContext<vhdlParser::Range_constraintContext>(0);
}


size_t vhdlParser::Integer_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleInteger_type_definition;
}

void vhdlParser::Integer_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInteger_type_definition(this);
}

void vhdlParser::Integer_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInteger_type_definition(this);
}


std::any vhdlParser::Integer_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInteger_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Integer_type_definitionContext* vhdlParser::integer_type_definition() {
  Integer_type_definitionContext *_localctx = _tracker.createInstance<Integer_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 86, vhdlParser::RuleInteger_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(942);
    range_constraint();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Physical_type_definitionContext ------------------------------------------------------------------

vhdlParser::Physical_type_definitionContext::Physical_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Range_constraintContext* vhdlParser::Physical_type_definitionContext::range_constraint() {
  return getRuleContext<vhdlParser::Range_constraintContext>(0);
}

std::vector<tree::TerminalNode *> vhdlParser::Physical_type_definitionContext::KW_UNITS() {
  return getTokens(vhdlParser::KW_UNITS);
}

tree::TerminalNode* vhdlParser::Physical_type_definitionContext::KW_UNITS(size_t i) {
  return getToken(vhdlParser::KW_UNITS, i);
}

vhdlParser::Primary_unit_declarationContext* vhdlParser::Physical_type_definitionContext::primary_unit_declaration() {
  return getRuleContext<vhdlParser::Primary_unit_declarationContext>(0);
}

tree::TerminalNode* vhdlParser::Physical_type_definitionContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

std::vector<vhdlParser::Secondary_unit_declarationContext *> vhdlParser::Physical_type_definitionContext::secondary_unit_declaration() {
  return getRuleContexts<vhdlParser::Secondary_unit_declarationContext>();
}

vhdlParser::Secondary_unit_declarationContext* vhdlParser::Physical_type_definitionContext::secondary_unit_declaration(size_t i) {
  return getRuleContext<vhdlParser::Secondary_unit_declarationContext>(i);
}

vhdlParser::IdentifierContext* vhdlParser::Physical_type_definitionContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}


size_t vhdlParser::Physical_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RulePhysical_type_definition;
}

void vhdlParser::Physical_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPhysical_type_definition(this);
}

void vhdlParser::Physical_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPhysical_type_definition(this);
}


std::any vhdlParser::Physical_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPhysical_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Physical_type_definitionContext* vhdlParser::physical_type_definition() {
  Physical_type_definitionContext *_localctx = _tracker.createInstance<Physical_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 88, vhdlParser::RulePhysical_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(944);
    range_constraint();
    setState(945);
    match(vhdlParser::KW_UNITS);
    setState(946);
    primary_unit_declaration();
    setState(950);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(947);
      secondary_unit_declaration();
      setState(952);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(953);
    match(vhdlParser::KW_END);
    setState(954);
    match(vhdlParser::KW_UNITS);
    setState(956);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(955);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_unit_declarationContext ------------------------------------------------------------------

vhdlParser::Primary_unit_declarationContext::Primary_unit_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Primary_unit_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Primary_unit_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Primary_unit_declarationContext::getRuleIndex() const {
  return vhdlParser::RulePrimary_unit_declaration;
}

void vhdlParser::Primary_unit_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_unit_declaration(this);
}

void vhdlParser::Primary_unit_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_unit_declaration(this);
}


std::any vhdlParser::Primary_unit_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPrimary_unit_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Primary_unit_declarationContext* vhdlParser::primary_unit_declaration() {
  Primary_unit_declarationContext *_localctx = _tracker.createInstance<Primary_unit_declarationContext>(_ctx, getState());
  enterRule(_localctx, 90, vhdlParser::RulePrimary_unit_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(958);
    identifier();
    setState(959);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Secondary_unit_declarationContext ------------------------------------------------------------------

vhdlParser::Secondary_unit_declarationContext::Secondary_unit_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Secondary_unit_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Secondary_unit_declarationContext::EQ() {
  return getToken(vhdlParser::EQ, 0);
}

vhdlParser::Physical_literalContext* vhdlParser::Secondary_unit_declarationContext::physical_literal() {
  return getRuleContext<vhdlParser::Physical_literalContext>(0);
}

tree::TerminalNode* vhdlParser::Secondary_unit_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Secondary_unit_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleSecondary_unit_declaration;
}

void vhdlParser::Secondary_unit_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSecondary_unit_declaration(this);
}

void vhdlParser::Secondary_unit_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSecondary_unit_declaration(this);
}


std::any vhdlParser::Secondary_unit_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSecondary_unit_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Secondary_unit_declarationContext* vhdlParser::secondary_unit_declaration() {
  Secondary_unit_declarationContext *_localctx = _tracker.createInstance<Secondary_unit_declarationContext>(_ctx, getState());
  enterRule(_localctx, 92, vhdlParser::RuleSecondary_unit_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(961);
    identifier();
    setState(962);
    match(vhdlParser::EQ);
    setState(963);
    physical_literal();
    setState(964);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Floating_type_definitionContext ------------------------------------------------------------------

vhdlParser::Floating_type_definitionContext::Floating_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Range_constraintContext* vhdlParser::Floating_type_definitionContext::range_constraint() {
  return getRuleContext<vhdlParser::Range_constraintContext>(0);
}


size_t vhdlParser::Floating_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleFloating_type_definition;
}

void vhdlParser::Floating_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloating_type_definition(this);
}

void vhdlParser::Floating_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloating_type_definition(this);
}


std::any vhdlParser::Floating_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFloating_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Floating_type_definitionContext* vhdlParser::floating_type_definition() {
  Floating_type_definitionContext *_localctx = _tracker.createInstance<Floating_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 94, vhdlParser::RuleFloating_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(966);
    range_constraint();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Composite_type_definitionContext ------------------------------------------------------------------

vhdlParser::Composite_type_definitionContext::Composite_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Array_type_definitionContext* vhdlParser::Composite_type_definitionContext::array_type_definition() {
  return getRuleContext<vhdlParser::Array_type_definitionContext>(0);
}

vhdlParser::Record_type_definitionContext* vhdlParser::Composite_type_definitionContext::record_type_definition() {
  return getRuleContext<vhdlParser::Record_type_definitionContext>(0);
}


size_t vhdlParser::Composite_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleComposite_type_definition;
}

void vhdlParser::Composite_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComposite_type_definition(this);
}

void vhdlParser::Composite_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComposite_type_definition(this);
}


std::any vhdlParser::Composite_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitComposite_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Composite_type_definitionContext* vhdlParser::composite_type_definition() {
  Composite_type_definitionContext *_localctx = _tracker.createInstance<Composite_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 96, vhdlParser::RuleComposite_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(970);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_ARRAY: {
        enterOuterAlt(_localctx, 1);
        setState(968);
        array_type_definition();
        break;
      }

      case vhdlParser::KW_RECORD: {
        enterOuterAlt(_localctx, 2);
        setState(969);
        record_type_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_type_definitionContext ------------------------------------------------------------------

vhdlParser::Array_type_definitionContext::Array_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Unbounded_array_definitionContext* vhdlParser::Array_type_definitionContext::unbounded_array_definition() {
  return getRuleContext<vhdlParser::Unbounded_array_definitionContext>(0);
}

vhdlParser::Constrained_array_definitionContext* vhdlParser::Array_type_definitionContext::constrained_array_definition() {
  return getRuleContext<vhdlParser::Constrained_array_definitionContext>(0);
}


size_t vhdlParser::Array_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleArray_type_definition;
}

void vhdlParser::Array_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_type_definition(this);
}

void vhdlParser::Array_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_type_definition(this);
}


std::any vhdlParser::Array_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitArray_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Array_type_definitionContext* vhdlParser::array_type_definition() {
  Array_type_definitionContext *_localctx = _tracker.createInstance<Array_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 98, vhdlParser::RuleArray_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(974);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(972);
      unbounded_array_definition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(973);
      constrained_array_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unbounded_array_definitionContext ------------------------------------------------------------------

vhdlParser::Unbounded_array_definitionContext::Unbounded_array_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Unbounded_array_definitionContext::KW_ARRAY() {
  return getToken(vhdlParser::KW_ARRAY, 0);
}

tree::TerminalNode* vhdlParser::Unbounded_array_definitionContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

std::vector<vhdlParser::Index_subtype_definitionContext *> vhdlParser::Unbounded_array_definitionContext::index_subtype_definition() {
  return getRuleContexts<vhdlParser::Index_subtype_definitionContext>();
}

vhdlParser::Index_subtype_definitionContext* vhdlParser::Unbounded_array_definitionContext::index_subtype_definition(size_t i) {
  return getRuleContext<vhdlParser::Index_subtype_definitionContext>(i);
}

tree::TerminalNode* vhdlParser::Unbounded_array_definitionContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Unbounded_array_definitionContext::KW_OF() {
  return getToken(vhdlParser::KW_OF, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Unbounded_array_definitionContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

std::vector<tree::TerminalNode *> vhdlParser::Unbounded_array_definitionContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Unbounded_array_definitionContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Unbounded_array_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleUnbounded_array_definition;
}

void vhdlParser::Unbounded_array_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnbounded_array_definition(this);
}

void vhdlParser::Unbounded_array_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnbounded_array_definition(this);
}


std::any vhdlParser::Unbounded_array_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitUnbounded_array_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Unbounded_array_definitionContext* vhdlParser::unbounded_array_definition() {
  Unbounded_array_definitionContext *_localctx = _tracker.createInstance<Unbounded_array_definitionContext>(_ctx, getState());
  enterRule(_localctx, 100, vhdlParser::RuleUnbounded_array_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(976);
    match(vhdlParser::KW_ARRAY);
    setState(977);
    match(vhdlParser::LPAREN);
    setState(978);
    index_subtype_definition();
    setState(983);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(979);
      match(vhdlParser::COMMA);
      setState(980);
      index_subtype_definition();
      setState(985);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(986);
    match(vhdlParser::RPAREN);
    setState(987);
    match(vhdlParser::KW_OF);
    setState(988);
    subtype_indication();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constrained_array_definitionContext ------------------------------------------------------------------

vhdlParser::Constrained_array_definitionContext::Constrained_array_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Constrained_array_definitionContext::KW_ARRAY() {
  return getToken(vhdlParser::KW_ARRAY, 0);
}

vhdlParser::Index_constraintContext* vhdlParser::Constrained_array_definitionContext::index_constraint() {
  return getRuleContext<vhdlParser::Index_constraintContext>(0);
}

tree::TerminalNode* vhdlParser::Constrained_array_definitionContext::KW_OF() {
  return getToken(vhdlParser::KW_OF, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Constrained_array_definitionContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}


size_t vhdlParser::Constrained_array_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleConstrained_array_definition;
}

void vhdlParser::Constrained_array_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstrained_array_definition(this);
}

void vhdlParser::Constrained_array_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstrained_array_definition(this);
}


std::any vhdlParser::Constrained_array_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConstrained_array_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Constrained_array_definitionContext* vhdlParser::constrained_array_definition() {
  Constrained_array_definitionContext *_localctx = _tracker.createInstance<Constrained_array_definitionContext>(_ctx, getState());
  enterRule(_localctx, 102, vhdlParser::RuleConstrained_array_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    match(vhdlParser::KW_ARRAY);
    setState(991);
    index_constraint();
    setState(992);
    match(vhdlParser::KW_OF);
    setState(993);
    subtype_indication();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_subtype_definitionContext ------------------------------------------------------------------

vhdlParser::Index_subtype_definitionContext::Index_subtype_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Type_markContext* vhdlParser::Index_subtype_definitionContext::type_mark() {
  return getRuleContext<vhdlParser::Type_markContext>(0);
}

tree::TerminalNode* vhdlParser::Index_subtype_definitionContext::KW_RANGE() {
  return getToken(vhdlParser::KW_RANGE, 0);
}

tree::TerminalNode* vhdlParser::Index_subtype_definitionContext::BOX() {
  return getToken(vhdlParser::BOX, 0);
}


size_t vhdlParser::Index_subtype_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleIndex_subtype_definition;
}

void vhdlParser::Index_subtype_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_subtype_definition(this);
}

void vhdlParser::Index_subtype_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_subtype_definition(this);
}


std::any vhdlParser::Index_subtype_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitIndex_subtype_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Index_subtype_definitionContext* vhdlParser::index_subtype_definition() {
  Index_subtype_definitionContext *_localctx = _tracker.createInstance<Index_subtype_definitionContext>(_ctx, getState());
  enterRule(_localctx, 104, vhdlParser::RuleIndex_subtype_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(995);
    type_mark();
    setState(996);
    match(vhdlParser::KW_RANGE);
    setState(997);
    match(vhdlParser::BOX);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_constraintContext ------------------------------------------------------------------

vhdlParser::Array_constraintContext::Array_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Index_constraintContext* vhdlParser::Array_constraintContext::index_constraint() {
  return getRuleContext<vhdlParser::Index_constraintContext>(0);
}

vhdlParser::Array_element_constraintContext* vhdlParser::Array_constraintContext::array_element_constraint() {
  return getRuleContext<vhdlParser::Array_element_constraintContext>(0);
}

tree::TerminalNode* vhdlParser::Array_constraintContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

tree::TerminalNode* vhdlParser::Array_constraintContext::KW_OPEN() {
  return getToken(vhdlParser::KW_OPEN, 0);
}

tree::TerminalNode* vhdlParser::Array_constraintContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}


size_t vhdlParser::Array_constraintContext::getRuleIndex() const {
  return vhdlParser::RuleArray_constraint;
}

void vhdlParser::Array_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_constraint(this);
}

void vhdlParser::Array_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_constraint(this);
}


std::any vhdlParser::Array_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitArray_constraint(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Array_constraintContext* vhdlParser::array_constraint() {
  Array_constraintContext *_localctx = _tracker.createInstance<Array_constraintContext>(_ctx, getState());
  enterRule(_localctx, 106, vhdlParser::RuleArray_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1009);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(999);
      index_constraint();
      setState(1001);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
      case 1: {
        setState(1000);
        array_element_constraint();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1003);
      match(vhdlParser::LPAREN);
      setState(1004);
      match(vhdlParser::KW_OPEN);
      setState(1005);
      match(vhdlParser::RPAREN);
      setState(1007);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
      case 1: {
        setState(1006);
        array_element_constraint();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_element_constraintContext ------------------------------------------------------------------

vhdlParser::Array_element_constraintContext::Array_element_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Element_constraintContext* vhdlParser::Array_element_constraintContext::element_constraint() {
  return getRuleContext<vhdlParser::Element_constraintContext>(0);
}


size_t vhdlParser::Array_element_constraintContext::getRuleIndex() const {
  return vhdlParser::RuleArray_element_constraint;
}

void vhdlParser::Array_element_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_element_constraint(this);
}

void vhdlParser::Array_element_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_element_constraint(this);
}


std::any vhdlParser::Array_element_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitArray_element_constraint(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Array_element_constraintContext* vhdlParser::array_element_constraint() {
  Array_element_constraintContext *_localctx = _tracker.createInstance<Array_element_constraintContext>(_ctx, getState());
  enterRule(_localctx, 108, vhdlParser::RuleArray_element_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1011);
    element_constraint();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_constraintContext ------------------------------------------------------------------

vhdlParser::Index_constraintContext::Index_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Index_constraintContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

std::vector<vhdlParser::Discrete_rangeContext *> vhdlParser::Index_constraintContext::discrete_range() {
  return getRuleContexts<vhdlParser::Discrete_rangeContext>();
}

vhdlParser::Discrete_rangeContext* vhdlParser::Index_constraintContext::discrete_range(size_t i) {
  return getRuleContext<vhdlParser::Discrete_rangeContext>(i);
}

tree::TerminalNode* vhdlParser::Index_constraintContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Index_constraintContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Index_constraintContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Index_constraintContext::getRuleIndex() const {
  return vhdlParser::RuleIndex_constraint;
}

void vhdlParser::Index_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_constraint(this);
}

void vhdlParser::Index_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_constraint(this);
}


std::any vhdlParser::Index_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitIndex_constraint(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Index_constraintContext* vhdlParser::index_constraint() {
  Index_constraintContext *_localctx = _tracker.createInstance<Index_constraintContext>(_ctx, getState());
  enterRule(_localctx, 110, vhdlParser::RuleIndex_constraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1013);
    match(vhdlParser::LPAREN);
    setState(1014);
    discrete_range();
    setState(1019);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1015);
      match(vhdlParser::COMMA);
      setState(1016);
      discrete_range();
      setState(1021);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1022);
    match(vhdlParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Discrete_rangeContext ------------------------------------------------------------------

vhdlParser::Discrete_rangeContext::Discrete_rangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Subtype_indicationContext* vhdlParser::Discrete_rangeContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

vhdlParser::RangeContext* vhdlParser::Discrete_rangeContext::range() {
  return getRuleContext<vhdlParser::RangeContext>(0);
}


size_t vhdlParser::Discrete_rangeContext::getRuleIndex() const {
  return vhdlParser::RuleDiscrete_range;
}

void vhdlParser::Discrete_rangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscrete_range(this);
}

void vhdlParser::Discrete_rangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscrete_range(this);
}


std::any vhdlParser::Discrete_rangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitDiscrete_range(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Discrete_rangeContext* vhdlParser::discrete_range() {
  Discrete_rangeContext *_localctx = _tracker.createInstance<Discrete_rangeContext>(_ctx, getState());
  enterRule(_localctx, 112, vhdlParser::RuleDiscrete_range);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1026);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1024);
      subtype_indication();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1025);
      range();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_type_definitionContext ------------------------------------------------------------------

vhdlParser::Record_type_definitionContext::Record_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Record_type_definitionContext::KW_RECORD() {
  return getTokens(vhdlParser::KW_RECORD);
}

tree::TerminalNode* vhdlParser::Record_type_definitionContext::KW_RECORD(size_t i) {
  return getToken(vhdlParser::KW_RECORD, i);
}

tree::TerminalNode* vhdlParser::Record_type_definitionContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

std::vector<vhdlParser::Element_declarationContext *> vhdlParser::Record_type_definitionContext::element_declaration() {
  return getRuleContexts<vhdlParser::Element_declarationContext>();
}

vhdlParser::Element_declarationContext* vhdlParser::Record_type_definitionContext::element_declaration(size_t i) {
  return getRuleContext<vhdlParser::Element_declarationContext>(i);
}

vhdlParser::IdentifierContext* vhdlParser::Record_type_definitionContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}


size_t vhdlParser::Record_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleRecord_type_definition;
}

void vhdlParser::Record_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_type_definition(this);
}

void vhdlParser::Record_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_type_definition(this);
}


std::any vhdlParser::Record_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitRecord_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Record_type_definitionContext* vhdlParser::record_type_definition() {
  Record_type_definitionContext *_localctx = _tracker.createInstance<Record_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 114, vhdlParser::RuleRecord_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1028);
    match(vhdlParser::KW_RECORD);
    setState(1030); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1029);
      element_declaration();
      setState(1032); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER);
    setState(1034);
    match(vhdlParser::KW_END);
    setState(1035);
    match(vhdlParser::KW_RECORD);
    setState(1037);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(1036);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_declarationContext ------------------------------------------------------------------

vhdlParser::Element_declarationContext::Element_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Identifier_listContext* vhdlParser::Element_declarationContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}

tree::TerminalNode* vhdlParser::Element_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Element_subtype_definitionContext* vhdlParser::Element_declarationContext::element_subtype_definition() {
  return getRuleContext<vhdlParser::Element_subtype_definitionContext>(0);
}

tree::TerminalNode* vhdlParser::Element_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Element_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleElement_declaration;
}

void vhdlParser::Element_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_declaration(this);
}

void vhdlParser::Element_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_declaration(this);
}


std::any vhdlParser::Element_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitElement_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Element_declarationContext* vhdlParser::element_declaration() {
  Element_declarationContext *_localctx = _tracker.createInstance<Element_declarationContext>(_ctx, getState());
  enterRule(_localctx, 116, vhdlParser::RuleElement_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1039);
    identifier_list();
    setState(1040);
    match(vhdlParser::COLON);
    setState(1041);
    element_subtype_definition();
    setState(1042);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Identifier_listContext ------------------------------------------------------------------

vhdlParser::Identifier_listContext::Identifier_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::IdentifierContext *> vhdlParser::Identifier_listContext::identifier() {
  return getRuleContexts<vhdlParser::IdentifierContext>();
}

vhdlParser::IdentifierContext* vhdlParser::Identifier_listContext::identifier(size_t i) {
  return getRuleContext<vhdlParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Identifier_listContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Identifier_listContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Identifier_listContext::getRuleIndex() const {
  return vhdlParser::RuleIdentifier_list;
}

void vhdlParser::Identifier_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier_list(this);
}

void vhdlParser::Identifier_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier_list(this);
}


std::any vhdlParser::Identifier_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Identifier_listContext* vhdlParser::identifier_list() {
  Identifier_listContext *_localctx = _tracker.createInstance<Identifier_listContext>(_ctx, getState());
  enterRule(_localctx, 118, vhdlParser::RuleIdentifier_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1044);
    identifier();
    setState(1049);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1045);
      match(vhdlParser::COMMA);
      setState(1046);
      identifier();
      setState(1051);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_subtype_definitionContext ------------------------------------------------------------------

vhdlParser::Element_subtype_definitionContext::Element_subtype_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Subtype_indicationContext* vhdlParser::Element_subtype_definitionContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}


size_t vhdlParser::Element_subtype_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleElement_subtype_definition;
}

void vhdlParser::Element_subtype_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_subtype_definition(this);
}

void vhdlParser::Element_subtype_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_subtype_definition(this);
}


std::any vhdlParser::Element_subtype_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitElement_subtype_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Element_subtype_definitionContext* vhdlParser::element_subtype_definition() {
  Element_subtype_definitionContext *_localctx = _tracker.createInstance<Element_subtype_definitionContext>(_ctx, getState());
  enterRule(_localctx, 120, vhdlParser::RuleElement_subtype_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1052);
    subtype_indication();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_constraintContext ------------------------------------------------------------------

vhdlParser::Record_constraintContext::Record_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Record_constraintContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

std::vector<vhdlParser::Record_element_constraintContext *> vhdlParser::Record_constraintContext::record_element_constraint() {
  return getRuleContexts<vhdlParser::Record_element_constraintContext>();
}

vhdlParser::Record_element_constraintContext* vhdlParser::Record_constraintContext::record_element_constraint(size_t i) {
  return getRuleContext<vhdlParser::Record_element_constraintContext>(i);
}

tree::TerminalNode* vhdlParser::Record_constraintContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Record_constraintContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Record_constraintContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Record_constraintContext::getRuleIndex() const {
  return vhdlParser::RuleRecord_constraint;
}

void vhdlParser::Record_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_constraint(this);
}

void vhdlParser::Record_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_constraint(this);
}


std::any vhdlParser::Record_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitRecord_constraint(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Record_constraintContext* vhdlParser::record_constraint() {
  Record_constraintContext *_localctx = _tracker.createInstance<Record_constraintContext>(_ctx, getState());
  enterRule(_localctx, 122, vhdlParser::RuleRecord_constraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1054);
    match(vhdlParser::LPAREN);
    setState(1055);
    record_element_constraint();
    setState(1060);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1056);
      match(vhdlParser::COMMA);
      setState(1057);
      record_element_constraint();
      setState(1062);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1063);
    match(vhdlParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_element_constraintContext ------------------------------------------------------------------

vhdlParser::Record_element_constraintContext::Record_element_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Record_element_constraintContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

vhdlParser::Element_constraintContext* vhdlParser::Record_element_constraintContext::element_constraint() {
  return getRuleContext<vhdlParser::Element_constraintContext>(0);
}


size_t vhdlParser::Record_element_constraintContext::getRuleIndex() const {
  return vhdlParser::RuleRecord_element_constraint;
}

void vhdlParser::Record_element_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_element_constraint(this);
}

void vhdlParser::Record_element_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_element_constraint(this);
}


std::any vhdlParser::Record_element_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitRecord_element_constraint(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Record_element_constraintContext* vhdlParser::record_element_constraint() {
  Record_element_constraintContext *_localctx = _tracker.createInstance<Record_element_constraintContext>(_ctx, getState());
  enterRule(_localctx, 124, vhdlParser::RuleRecord_element_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1065);
    identifier();
    setState(1066);
    element_constraint();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Access_type_definitionContext ------------------------------------------------------------------

vhdlParser::Access_type_definitionContext::Access_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Access_type_definitionContext::KW_ACCESS() {
  return getToken(vhdlParser::KW_ACCESS, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Access_type_definitionContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}


size_t vhdlParser::Access_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleAccess_type_definition;
}

void vhdlParser::Access_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccess_type_definition(this);
}

void vhdlParser::Access_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccess_type_definition(this);
}


std::any vhdlParser::Access_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAccess_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Access_type_definitionContext* vhdlParser::access_type_definition() {
  Access_type_definitionContext *_localctx = _tracker.createInstance<Access_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 126, vhdlParser::RuleAccess_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1068);
    match(vhdlParser::KW_ACCESS);
    setState(1069);
    subtype_indication();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Incomplete_type_declarationContext ------------------------------------------------------------------

vhdlParser::Incomplete_type_declarationContext::Incomplete_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Incomplete_type_declarationContext::KW_TYPE() {
  return getToken(vhdlParser::KW_TYPE, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Incomplete_type_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Incomplete_type_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Incomplete_type_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleIncomplete_type_declaration;
}

void vhdlParser::Incomplete_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIncomplete_type_declaration(this);
}

void vhdlParser::Incomplete_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIncomplete_type_declaration(this);
}


std::any vhdlParser::Incomplete_type_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitIncomplete_type_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Incomplete_type_declarationContext* vhdlParser::incomplete_type_declaration() {
  Incomplete_type_declarationContext *_localctx = _tracker.createInstance<Incomplete_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 128, vhdlParser::RuleIncomplete_type_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1071);
    match(vhdlParser::KW_TYPE);
    setState(1072);
    identifier();
    setState(1073);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_type_definitionContext ------------------------------------------------------------------

vhdlParser::File_type_definitionContext::File_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::File_type_definitionContext::KW_FILE() {
  return getToken(vhdlParser::KW_FILE, 0);
}

tree::TerminalNode* vhdlParser::File_type_definitionContext::KW_OF() {
  return getToken(vhdlParser::KW_OF, 0);
}

vhdlParser::Type_markContext* vhdlParser::File_type_definitionContext::type_mark() {
  return getRuleContext<vhdlParser::Type_markContext>(0);
}


size_t vhdlParser::File_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleFile_type_definition;
}

void vhdlParser::File_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_type_definition(this);
}

void vhdlParser::File_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_type_definition(this);
}


std::any vhdlParser::File_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFile_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::File_type_definitionContext* vhdlParser::file_type_definition() {
  File_type_definitionContext *_localctx = _tracker.createInstance<File_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 130, vhdlParser::RuleFile_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1075);
    match(vhdlParser::KW_FILE);
    setState(1076);
    match(vhdlParser::KW_OF);
    setState(1077);
    type_mark();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_type_definitionContext ------------------------------------------------------------------

vhdlParser::Protected_type_definitionContext::Protected_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Protected_type_declarationContext* vhdlParser::Protected_type_definitionContext::protected_type_declaration() {
  return getRuleContext<vhdlParser::Protected_type_declarationContext>(0);
}

vhdlParser::Protected_type_bodyContext* vhdlParser::Protected_type_definitionContext::protected_type_body() {
  return getRuleContext<vhdlParser::Protected_type_bodyContext>(0);
}


size_t vhdlParser::Protected_type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleProtected_type_definition;
}

void vhdlParser::Protected_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_type_definition(this);
}

void vhdlParser::Protected_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_type_definition(this);
}


std::any vhdlParser::Protected_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProtected_type_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Protected_type_definitionContext* vhdlParser::protected_type_definition() {
  Protected_type_definitionContext *_localctx = _tracker.createInstance<Protected_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 132, vhdlParser::RuleProtected_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1081);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1079);
      protected_type_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1080);
      protected_type_body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_type_declarationContext ------------------------------------------------------------------

vhdlParser::Protected_type_declarationContext::Protected_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Protected_type_declarationContext::KW_PROTECTED() {
  return getTokens(vhdlParser::KW_PROTECTED);
}

tree::TerminalNode* vhdlParser::Protected_type_declarationContext::KW_PROTECTED(size_t i) {
  return getToken(vhdlParser::KW_PROTECTED, i);
}

tree::TerminalNode* vhdlParser::Protected_type_declarationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

std::vector<vhdlParser::Protected_type_declarative_itemContext *> vhdlParser::Protected_type_declarationContext::protected_type_declarative_item() {
  return getRuleContexts<vhdlParser::Protected_type_declarative_itemContext>();
}

vhdlParser::Protected_type_declarative_itemContext* vhdlParser::Protected_type_declarationContext::protected_type_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Protected_type_declarative_itemContext>(i);
}

vhdlParser::IdentifierContext* vhdlParser::Protected_type_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}


size_t vhdlParser::Protected_type_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleProtected_type_declaration;
}

void vhdlParser::Protected_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_type_declaration(this);
}

void vhdlParser::Protected_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_type_declaration(this);
}


std::any vhdlParser::Protected_type_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProtected_type_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Protected_type_declarationContext* vhdlParser::protected_type_declaration() {
  Protected_type_declarationContext *_localctx = _tracker.createInstance<Protected_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 134, vhdlParser::RuleProtected_type_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1083);
    match(vhdlParser::KW_PROTECTED);
    setState(1087);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 18) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 18)) & -9223372019674316767) != 0) {
      setState(1084);
      protected_type_declarative_item();
      setState(1089);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1090);
    match(vhdlParser::KW_END);
    setState(1091);
    match(vhdlParser::KW_PROTECTED);
    setState(1093);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(1092);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_type_declarative_itemContext ------------------------------------------------------------------

vhdlParser::Protected_type_declarative_itemContext::Protected_type_declarative_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Subprogram_declarationContext* vhdlParser::Protected_type_declarative_itemContext::subprogram_declaration() {
  return getRuleContext<vhdlParser::Subprogram_declarationContext>(0);
}

vhdlParser::Subprogram_instantiation_declarationContext* vhdlParser::Protected_type_declarative_itemContext::subprogram_instantiation_declaration() {
  return getRuleContext<vhdlParser::Subprogram_instantiation_declarationContext>(0);
}

vhdlParser::Attribute_specificationContext* vhdlParser::Protected_type_declarative_itemContext::attribute_specification() {
  return getRuleContext<vhdlParser::Attribute_specificationContext>(0);
}

vhdlParser::Use_clauseContext* vhdlParser::Protected_type_declarative_itemContext::use_clause() {
  return getRuleContext<vhdlParser::Use_clauseContext>(0);
}


size_t vhdlParser::Protected_type_declarative_itemContext::getRuleIndex() const {
  return vhdlParser::RuleProtected_type_declarative_item;
}

void vhdlParser::Protected_type_declarative_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_type_declarative_item(this);
}

void vhdlParser::Protected_type_declarative_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_type_declarative_item(this);
}


std::any vhdlParser::Protected_type_declarative_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProtected_type_declarative_item(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Protected_type_declarative_itemContext* vhdlParser::protected_type_declarative_item() {
  Protected_type_declarative_itemContext *_localctx = _tracker.createInstance<Protected_type_declarative_itemContext>(_ctx, getState());
  enterRule(_localctx, 136, vhdlParser::RuleProtected_type_declarative_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1099);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1095);
      subprogram_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1096);
      subprogram_instantiation_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1097);
      attribute_specification();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1098);
      use_clause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_type_bodyContext ------------------------------------------------------------------

vhdlParser::Protected_type_bodyContext::Protected_type_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Protected_type_bodyContext::KW_PROTECTED() {
  return getTokens(vhdlParser::KW_PROTECTED);
}

tree::TerminalNode* vhdlParser::Protected_type_bodyContext::KW_PROTECTED(size_t i) {
  return getToken(vhdlParser::KW_PROTECTED, i);
}

std::vector<tree::TerminalNode *> vhdlParser::Protected_type_bodyContext::KW_BODY() {
  return getTokens(vhdlParser::KW_BODY);
}

tree::TerminalNode* vhdlParser::Protected_type_bodyContext::KW_BODY(size_t i) {
  return getToken(vhdlParser::KW_BODY, i);
}

tree::TerminalNode* vhdlParser::Protected_type_bodyContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

std::vector<vhdlParser::Process_declarative_itemContext *> vhdlParser::Protected_type_bodyContext::process_declarative_item() {
  return getRuleContexts<vhdlParser::Process_declarative_itemContext>();
}

vhdlParser::Process_declarative_itemContext* vhdlParser::Protected_type_bodyContext::process_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Process_declarative_itemContext>(i);
}

vhdlParser::IdentifierContext* vhdlParser::Protected_type_bodyContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}


size_t vhdlParser::Protected_type_bodyContext::getRuleIndex() const {
  return vhdlParser::RuleProtected_type_body;
}

void vhdlParser::Protected_type_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_type_body(this);
}

void vhdlParser::Protected_type_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_type_body(this);
}


std::any vhdlParser::Protected_type_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProtected_type_body(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Protected_type_bodyContext* vhdlParser::protected_type_body() {
  Protected_type_bodyContext *_localctx = _tracker.createInstance<Protected_type_bodyContext>(_ctx, getState());
  enterRule(_localctx, 138, vhdlParser::RuleProtected_type_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1101);
    match(vhdlParser::KW_PROTECTED);
    setState(1102);
    match(vhdlParser::KW_BODY);
    setState(1106);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4653562731069440) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2147680257) != 0) {
      setState(1103);
      process_declarative_item();
      setState(1108);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1109);
    match(vhdlParser::KW_END);
    setState(1110);
    match(vhdlParser::KW_PROTECTED);
    setState(1111);
    match(vhdlParser::KW_BODY);
    setState(1113);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(1112);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_declarationContext ------------------------------------------------------------------

vhdlParser::Type_declarationContext::Type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Full_type_declarationContext* vhdlParser::Type_declarationContext::full_type_declaration() {
  return getRuleContext<vhdlParser::Full_type_declarationContext>(0);
}

vhdlParser::Incomplete_type_declarationContext* vhdlParser::Type_declarationContext::incomplete_type_declaration() {
  return getRuleContext<vhdlParser::Incomplete_type_declarationContext>(0);
}


size_t vhdlParser::Type_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleType_declaration;
}

void vhdlParser::Type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_declaration(this);
}

void vhdlParser::Type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_declaration(this);
}


std::any vhdlParser::Type_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitType_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Type_declarationContext* vhdlParser::type_declaration() {
  Type_declarationContext *_localctx = _tracker.createInstance<Type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 140, vhdlParser::RuleType_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1117);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1115);
      full_type_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1116);
      incomplete_type_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Full_type_declarationContext ------------------------------------------------------------------

vhdlParser::Full_type_declarationContext::Full_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Full_type_declarationContext::KW_TYPE() {
  return getToken(vhdlParser::KW_TYPE, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Full_type_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Full_type_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

vhdlParser::Type_definitionContext* vhdlParser::Full_type_declarationContext::type_definition() {
  return getRuleContext<vhdlParser::Type_definitionContext>(0);
}

tree::TerminalNode* vhdlParser::Full_type_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Full_type_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleFull_type_declaration;
}

void vhdlParser::Full_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFull_type_declaration(this);
}

void vhdlParser::Full_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFull_type_declaration(this);
}


std::any vhdlParser::Full_type_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFull_type_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Full_type_declarationContext* vhdlParser::full_type_declaration() {
  Full_type_declarationContext *_localctx = _tracker.createInstance<Full_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 142, vhdlParser::RuleFull_type_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1119);
    match(vhdlParser::KW_TYPE);
    setState(1120);
    identifier();
    setState(1121);
    match(vhdlParser::KW_IS);
    setState(1122);
    type_definition();
    setState(1123);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_definitionContext ------------------------------------------------------------------

vhdlParser::Type_definitionContext::Type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Scalar_type_definitionContext* vhdlParser::Type_definitionContext::scalar_type_definition() {
  return getRuleContext<vhdlParser::Scalar_type_definitionContext>(0);
}

vhdlParser::Composite_type_definitionContext* vhdlParser::Type_definitionContext::composite_type_definition() {
  return getRuleContext<vhdlParser::Composite_type_definitionContext>(0);
}

vhdlParser::Access_type_definitionContext* vhdlParser::Type_definitionContext::access_type_definition() {
  return getRuleContext<vhdlParser::Access_type_definitionContext>(0);
}

vhdlParser::File_type_definitionContext* vhdlParser::Type_definitionContext::file_type_definition() {
  return getRuleContext<vhdlParser::File_type_definitionContext>(0);
}

vhdlParser::Protected_type_definitionContext* vhdlParser::Type_definitionContext::protected_type_definition() {
  return getRuleContext<vhdlParser::Protected_type_definitionContext>(0);
}


size_t vhdlParser::Type_definitionContext::getRuleIndex() const {
  return vhdlParser::RuleType_definition;
}

void vhdlParser::Type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_definition(this);
}

void vhdlParser::Type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_definition(this);
}


std::any vhdlParser::Type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitType_definition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Type_definitionContext* vhdlParser::type_definition() {
  Type_definitionContext *_localctx = _tracker.createInstance<Type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 144, vhdlParser::RuleType_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1130);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_RANGE:
      case vhdlParser::LPAREN: {
        enterOuterAlt(_localctx, 1);
        setState(1125);
        scalar_type_definition();
        break;
      }

      case vhdlParser::KW_RECORD:
      case vhdlParser::KW_ARRAY: {
        enterOuterAlt(_localctx, 2);
        setState(1126);
        composite_type_definition();
        break;
      }

      case vhdlParser::KW_ACCESS: {
        enterOuterAlt(_localctx, 3);
        setState(1127);
        access_type_definition();
        break;
      }

      case vhdlParser::KW_FILE: {
        enterOuterAlt(_localctx, 4);
        setState(1128);
        file_type_definition();
        break;
      }

      case vhdlParser::KW_PROTECTED: {
        enterOuterAlt(_localctx, 5);
        setState(1129);
        protected_type_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subtype_declarationContext ------------------------------------------------------------------

vhdlParser::Subtype_declarationContext::Subtype_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Subtype_declarationContext::KW_SUBTYPE() {
  return getToken(vhdlParser::KW_SUBTYPE, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Subtype_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Subtype_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Subtype_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* vhdlParser::Subtype_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Subtype_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleSubtype_declaration;
}

void vhdlParser::Subtype_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtype_declaration(this);
}

void vhdlParser::Subtype_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtype_declaration(this);
}


std::any vhdlParser::Subtype_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSubtype_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Subtype_declarationContext* vhdlParser::subtype_declaration() {
  Subtype_declarationContext *_localctx = _tracker.createInstance<Subtype_declarationContext>(_ctx, getState());
  enterRule(_localctx, 146, vhdlParser::RuleSubtype_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1132);
    match(vhdlParser::KW_SUBTYPE);
    setState(1133);
    identifier();
    setState(1134);
    match(vhdlParser::KW_IS);
    setState(1135);
    subtype_indication();
    setState(1136);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subtype_indicationContext ------------------------------------------------------------------

vhdlParser::Subtype_indicationContext::Subtype_indicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Type_markContext* vhdlParser::Subtype_indicationContext::type_mark() {
  return getRuleContext<vhdlParser::Type_markContext>(0);
}

vhdlParser::Resolution_indicationContext* vhdlParser::Subtype_indicationContext::resolution_indication() {
  return getRuleContext<vhdlParser::Resolution_indicationContext>(0);
}

vhdlParser::ConstraintContext* vhdlParser::Subtype_indicationContext::constraint() {
  return getRuleContext<vhdlParser::ConstraintContext>(0);
}


size_t vhdlParser::Subtype_indicationContext::getRuleIndex() const {
  return vhdlParser::RuleSubtype_indication;
}

void vhdlParser::Subtype_indicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtype_indication(this);
}

void vhdlParser::Subtype_indicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtype_indication(this);
}


std::any vhdlParser::Subtype_indicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSubtype_indication(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Subtype_indicationContext* vhdlParser::subtype_indication() {
  Subtype_indicationContext *_localctx = _tracker.createInstance<Subtype_indicationContext>(_ctx, getState());
  enterRule(_localctx, 148, vhdlParser::RuleSubtype_indication);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1139);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(1138);
      resolution_indication();
      break;
    }

    default:
      break;
    }
    setState(1141);
    type_mark();
    setState(1143);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      setState(1142);
      constraint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Resolution_indicationContext ------------------------------------------------------------------

vhdlParser::Resolution_indicationContext::Resolution_indicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::Resolution_indicationContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Resolution_indicationContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Element_resolutionContext* vhdlParser::Resolution_indicationContext::element_resolution() {
  return getRuleContext<vhdlParser::Element_resolutionContext>(0);
}

tree::TerminalNode* vhdlParser::Resolution_indicationContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}


size_t vhdlParser::Resolution_indicationContext::getRuleIndex() const {
  return vhdlParser::RuleResolution_indication;
}

void vhdlParser::Resolution_indicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResolution_indication(this);
}

void vhdlParser::Resolution_indicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResolution_indication(this);
}


std::any vhdlParser::Resolution_indicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitResolution_indication(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Resolution_indicationContext* vhdlParser::resolution_indication() {
  Resolution_indicationContext *_localctx = _tracker.createInstance<Resolution_indicationContext>(_ctx, getState());
  enterRule(_localctx, 150, vhdlParser::RuleResolution_indication);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1150);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::SHIFT_LEFT: {
        enterOuterAlt(_localctx, 1);
        setState(1145);
        name(0);
        break;
      }

      case vhdlParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(1146);
        match(vhdlParser::LPAREN);
        setState(1147);
        element_resolution();
        setState(1148);
        match(vhdlParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_resolutionContext ------------------------------------------------------------------

vhdlParser::Element_resolutionContext::Element_resolutionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Array_element_resolutionContext* vhdlParser::Element_resolutionContext::array_element_resolution() {
  return getRuleContext<vhdlParser::Array_element_resolutionContext>(0);
}

vhdlParser::Record_resolutionContext* vhdlParser::Element_resolutionContext::record_resolution() {
  return getRuleContext<vhdlParser::Record_resolutionContext>(0);
}


size_t vhdlParser::Element_resolutionContext::getRuleIndex() const {
  return vhdlParser::RuleElement_resolution;
}

void vhdlParser::Element_resolutionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_resolution(this);
}

void vhdlParser::Element_resolutionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_resolution(this);
}


std::any vhdlParser::Element_resolutionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitElement_resolution(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Element_resolutionContext* vhdlParser::element_resolution() {
  Element_resolutionContext *_localctx = _tracker.createInstance<Element_resolutionContext>(_ctx, getState());
  enterRule(_localctx, 152, vhdlParser::RuleElement_resolution);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1154);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1152);
      array_element_resolution();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1153);
      record_resolution();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_element_resolutionContext ------------------------------------------------------------------

vhdlParser::Array_element_resolutionContext::Array_element_resolutionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Resolution_indicationContext* vhdlParser::Array_element_resolutionContext::resolution_indication() {
  return getRuleContext<vhdlParser::Resolution_indicationContext>(0);
}


size_t vhdlParser::Array_element_resolutionContext::getRuleIndex() const {
  return vhdlParser::RuleArray_element_resolution;
}

void vhdlParser::Array_element_resolutionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_element_resolution(this);
}

void vhdlParser::Array_element_resolutionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_element_resolution(this);
}


std::any vhdlParser::Array_element_resolutionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitArray_element_resolution(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Array_element_resolutionContext* vhdlParser::array_element_resolution() {
  Array_element_resolutionContext *_localctx = _tracker.createInstance<Array_element_resolutionContext>(_ctx, getState());
  enterRule(_localctx, 154, vhdlParser::RuleArray_element_resolution);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1156);
    resolution_indication();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_resolutionContext ------------------------------------------------------------------

vhdlParser::Record_resolutionContext::Record_resolutionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::Record_element_resolutionContext *> vhdlParser::Record_resolutionContext::record_element_resolution() {
  return getRuleContexts<vhdlParser::Record_element_resolutionContext>();
}

vhdlParser::Record_element_resolutionContext* vhdlParser::Record_resolutionContext::record_element_resolution(size_t i) {
  return getRuleContext<vhdlParser::Record_element_resolutionContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Record_resolutionContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Record_resolutionContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Record_resolutionContext::getRuleIndex() const {
  return vhdlParser::RuleRecord_resolution;
}

void vhdlParser::Record_resolutionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_resolution(this);
}

void vhdlParser::Record_resolutionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_resolution(this);
}


std::any vhdlParser::Record_resolutionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitRecord_resolution(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Record_resolutionContext* vhdlParser::record_resolution() {
  Record_resolutionContext *_localctx = _tracker.createInstance<Record_resolutionContext>(_ctx, getState());
  enterRule(_localctx, 156, vhdlParser::RuleRecord_resolution);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1158);
    record_element_resolution();
    setState(1163);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1159);
      match(vhdlParser::COMMA);
      setState(1160);
      record_element_resolution();
      setState(1165);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_element_resolutionContext ------------------------------------------------------------------

vhdlParser::Record_element_resolutionContext::Record_element_resolutionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Record_element_resolutionContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

vhdlParser::Resolution_indicationContext* vhdlParser::Record_element_resolutionContext::resolution_indication() {
  return getRuleContext<vhdlParser::Resolution_indicationContext>(0);
}


size_t vhdlParser::Record_element_resolutionContext::getRuleIndex() const {
  return vhdlParser::RuleRecord_element_resolution;
}

void vhdlParser::Record_element_resolutionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_element_resolution(this);
}

void vhdlParser::Record_element_resolutionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_element_resolution(this);
}


std::any vhdlParser::Record_element_resolutionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitRecord_element_resolution(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Record_element_resolutionContext* vhdlParser::record_element_resolution() {
  Record_element_resolutionContext *_localctx = _tracker.createInstance<Record_element_resolutionContext>(_ctx, getState());
  enterRule(_localctx, 158, vhdlParser::RuleRecord_element_resolution);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1166);
    identifier();
    setState(1167);
    resolution_indication();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_markContext ------------------------------------------------------------------

vhdlParser::Type_markContext::Type_markContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::Type_markContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}


size_t vhdlParser::Type_markContext::getRuleIndex() const {
  return vhdlParser::RuleType_mark;
}

void vhdlParser::Type_markContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_mark(this);
}

void vhdlParser::Type_markContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_mark(this);
}


std::any vhdlParser::Type_markContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitType_mark(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Type_markContext* vhdlParser::type_mark() {
  Type_markContext *_localctx = _tracker.createInstance<Type_markContext>(_ctx, getState());
  enterRule(_localctx, 160, vhdlParser::RuleType_mark);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1169);
    name(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintContext ------------------------------------------------------------------

vhdlParser::ConstraintContext::ConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Range_constraintContext* vhdlParser::ConstraintContext::range_constraint() {
  return getRuleContext<vhdlParser::Range_constraintContext>(0);
}

vhdlParser::Element_constraintContext* vhdlParser::ConstraintContext::element_constraint() {
  return getRuleContext<vhdlParser::Element_constraintContext>(0);
}


size_t vhdlParser::ConstraintContext::getRuleIndex() const {
  return vhdlParser::RuleConstraint;
}

void vhdlParser::ConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraint(this);
}

void vhdlParser::ConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraint(this);
}


std::any vhdlParser::ConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConstraint(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::ConstraintContext* vhdlParser::constraint() {
  ConstraintContext *_localctx = _tracker.createInstance<ConstraintContext>(_ctx, getState());
  enterRule(_localctx, 162, vhdlParser::RuleConstraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1173);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(1171);
        range_constraint();
        break;
      }

      case vhdlParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(1172);
        element_constraint();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_constraintContext ------------------------------------------------------------------

vhdlParser::Element_constraintContext::Element_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Array_constraintContext* vhdlParser::Element_constraintContext::array_constraint() {
  return getRuleContext<vhdlParser::Array_constraintContext>(0);
}

vhdlParser::Record_constraintContext* vhdlParser::Element_constraintContext::record_constraint() {
  return getRuleContext<vhdlParser::Record_constraintContext>(0);
}


size_t vhdlParser::Element_constraintContext::getRuleIndex() const {
  return vhdlParser::RuleElement_constraint;
}

void vhdlParser::Element_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_constraint(this);
}

void vhdlParser::Element_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_constraint(this);
}


std::any vhdlParser::Element_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitElement_constraint(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Element_constraintContext* vhdlParser::element_constraint() {
  Element_constraintContext *_localctx = _tracker.createInstance<Element_constraintContext>(_ctx, getState());
  enterRule(_localctx, 164, vhdlParser::RuleElement_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1177);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1175);
      array_constraint();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1176);
      record_constraint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_declarationContext ------------------------------------------------------------------

vhdlParser::Object_declarationContext::Object_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Constant_declarationContext* vhdlParser::Object_declarationContext::constant_declaration() {
  return getRuleContext<vhdlParser::Constant_declarationContext>(0);
}

vhdlParser::Signal_declarationContext* vhdlParser::Object_declarationContext::signal_declaration() {
  return getRuleContext<vhdlParser::Signal_declarationContext>(0);
}

vhdlParser::Variable_declarationContext* vhdlParser::Object_declarationContext::variable_declaration() {
  return getRuleContext<vhdlParser::Variable_declarationContext>(0);
}

vhdlParser::File_declarationContext* vhdlParser::Object_declarationContext::file_declaration() {
  return getRuleContext<vhdlParser::File_declarationContext>(0);
}


size_t vhdlParser::Object_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleObject_declaration;
}

void vhdlParser::Object_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_declaration(this);
}

void vhdlParser::Object_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_declaration(this);
}


std::any vhdlParser::Object_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitObject_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Object_declarationContext* vhdlParser::object_declaration() {
  Object_declarationContext *_localctx = _tracker.createInstance<Object_declarationContext>(_ctx, getState());
  enterRule(_localctx, 166, vhdlParser::RuleObject_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1183);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_CONSTANT: {
        enterOuterAlt(_localctx, 1);
        setState(1179);
        constant_declaration();
        break;
      }

      case vhdlParser::KW_SIGNAL: {
        enterOuterAlt(_localctx, 2);
        setState(1180);
        signal_declaration();
        break;
      }

      case vhdlParser::KW_SHARED:
      case vhdlParser::KW_VARIABLE: {
        enterOuterAlt(_localctx, 3);
        setState(1181);
        variable_declaration();
        break;
      }

      case vhdlParser::KW_FILE: {
        enterOuterAlt(_localctx, 4);
        setState(1182);
        file_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_declarationContext ------------------------------------------------------------------

vhdlParser::Constant_declarationContext::Constant_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Constant_declarationContext::KW_CONSTANT() {
  return getToken(vhdlParser::KW_CONSTANT, 0);
}

vhdlParser::Identifier_listContext* vhdlParser::Constant_declarationContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}

tree::TerminalNode* vhdlParser::Constant_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Constant_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* vhdlParser::Constant_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Constant_declarationContext::VARASGN() {
  return getToken(vhdlParser::VARASGN, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Constant_declarationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::Constant_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleConstant_declaration;
}

void vhdlParser::Constant_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant_declaration(this);
}

void vhdlParser::Constant_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant_declaration(this);
}


std::any vhdlParser::Constant_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConstant_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Constant_declarationContext* vhdlParser::constant_declaration() {
  Constant_declarationContext *_localctx = _tracker.createInstance<Constant_declarationContext>(_ctx, getState());
  enterRule(_localctx, 168, vhdlParser::RuleConstant_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1185);
    match(vhdlParser::KW_CONSTANT);
    setState(1186);
    identifier_list();
    setState(1187);
    match(vhdlParser::COLON);
    setState(1188);
    subtype_indication();
    setState(1191);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::VARASGN) {
      setState(1189);
      match(vhdlParser::VARASGN);
      setState(1190);
      expression(0);
    }
    setState(1193);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signal_declarationContext ------------------------------------------------------------------

vhdlParser::Signal_declarationContext::Signal_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Signal_declarationContext::KW_SIGNAL() {
  return getToken(vhdlParser::KW_SIGNAL, 0);
}

vhdlParser::Identifier_listContext* vhdlParser::Signal_declarationContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}

tree::TerminalNode* vhdlParser::Signal_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Signal_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* vhdlParser::Signal_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Signal_kindContext* vhdlParser::Signal_declarationContext::signal_kind() {
  return getRuleContext<vhdlParser::Signal_kindContext>(0);
}

tree::TerminalNode* vhdlParser::Signal_declarationContext::VARASGN() {
  return getToken(vhdlParser::VARASGN, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Signal_declarationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::Signal_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleSignal_declaration;
}

void vhdlParser::Signal_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSignal_declaration(this);
}

void vhdlParser::Signal_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSignal_declaration(this);
}


std::any vhdlParser::Signal_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSignal_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Signal_declarationContext* vhdlParser::signal_declaration() {
  Signal_declarationContext *_localctx = _tracker.createInstance<Signal_declarationContext>(_ctx, getState());
  enterRule(_localctx, 170, vhdlParser::RuleSignal_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1195);
    match(vhdlParser::KW_SIGNAL);
    setState(1196);
    identifier_list();
    setState(1197);
    match(vhdlParser::COLON);
    setState(1198);
    subtype_indication();
    setState(1200);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_REGISTER

    || _la == vhdlParser::KW_BUS) {
      setState(1199);
      signal_kind();
    }
    setState(1204);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::VARASGN) {
      setState(1202);
      match(vhdlParser::VARASGN);
      setState(1203);
      expression(0);
    }
    setState(1206);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signal_kindContext ------------------------------------------------------------------

vhdlParser::Signal_kindContext::Signal_kindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Signal_kindContext::KW_REGISTER() {
  return getToken(vhdlParser::KW_REGISTER, 0);
}

tree::TerminalNode* vhdlParser::Signal_kindContext::KW_BUS() {
  return getToken(vhdlParser::KW_BUS, 0);
}


size_t vhdlParser::Signal_kindContext::getRuleIndex() const {
  return vhdlParser::RuleSignal_kind;
}

void vhdlParser::Signal_kindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSignal_kind(this);
}

void vhdlParser::Signal_kindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSignal_kind(this);
}


std::any vhdlParser::Signal_kindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSignal_kind(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Signal_kindContext* vhdlParser::signal_kind() {
  Signal_kindContext *_localctx = _tracker.createInstance<Signal_kindContext>(_ctx, getState());
  enterRule(_localctx, 172, vhdlParser::RuleSignal_kind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1208);
    _la = _input->LA(1);
    if (!(_la == vhdlParser::KW_REGISTER

    || _la == vhdlParser::KW_BUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_declarationContext ------------------------------------------------------------------

vhdlParser::Variable_declarationContext::Variable_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Variable_declarationContext::KW_VARIABLE() {
  return getToken(vhdlParser::KW_VARIABLE, 0);
}

vhdlParser::Identifier_listContext* vhdlParser::Variable_declarationContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}

tree::TerminalNode* vhdlParser::Variable_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Variable_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* vhdlParser::Variable_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Variable_declarationContext::KW_SHARED() {
  return getToken(vhdlParser::KW_SHARED, 0);
}

tree::TerminalNode* vhdlParser::Variable_declarationContext::VARASGN() {
  return getToken(vhdlParser::VARASGN, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Variable_declarationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::Variable_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleVariable_declaration;
}

void vhdlParser::Variable_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_declaration(this);
}

void vhdlParser::Variable_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_declaration(this);
}


std::any vhdlParser::Variable_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitVariable_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Variable_declarationContext* vhdlParser::variable_declaration() {
  Variable_declarationContext *_localctx = _tracker.createInstance<Variable_declarationContext>(_ctx, getState());
  enterRule(_localctx, 174, vhdlParser::RuleVariable_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1211);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_SHARED) {
      setState(1210);
      match(vhdlParser::KW_SHARED);
    }
    setState(1213);
    match(vhdlParser::KW_VARIABLE);
    setState(1214);
    identifier_list();
    setState(1215);
    match(vhdlParser::COLON);
    setState(1216);
    subtype_indication();
    setState(1219);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::VARASGN) {
      setState(1217);
      match(vhdlParser::VARASGN);
      setState(1218);
      expression(0);
    }
    setState(1221);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_declarationContext ------------------------------------------------------------------

vhdlParser::File_declarationContext::File_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::File_declarationContext::KW_FILE() {
  return getToken(vhdlParser::KW_FILE, 0);
}

vhdlParser::Identifier_listContext* vhdlParser::File_declarationContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}

tree::TerminalNode* vhdlParser::File_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::File_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* vhdlParser::File_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::File_open_informationContext* vhdlParser::File_declarationContext::file_open_information() {
  return getRuleContext<vhdlParser::File_open_informationContext>(0);
}


size_t vhdlParser::File_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleFile_declaration;
}

void vhdlParser::File_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_declaration(this);
}

void vhdlParser::File_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_declaration(this);
}


std::any vhdlParser::File_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFile_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::File_declarationContext* vhdlParser::file_declaration() {
  File_declarationContext *_localctx = _tracker.createInstance<File_declarationContext>(_ctx, getState());
  enterRule(_localctx, 176, vhdlParser::RuleFile_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1223);
    match(vhdlParser::KW_FILE);
    setState(1224);
    identifier_list();
    setState(1225);
    match(vhdlParser::COLON);
    setState(1226);
    subtype_indication();
    setState(1228);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IS

    || _la == vhdlParser::KW_OPEN) {
      setState(1227);
      file_open_information();
    }
    setState(1230);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_open_informationContext ------------------------------------------------------------------

vhdlParser::File_open_informationContext::File_open_informationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::File_open_informationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

vhdlParser::File_logical_nameContext* vhdlParser::File_open_informationContext::file_logical_name() {
  return getRuleContext<vhdlParser::File_logical_nameContext>(0);
}

tree::TerminalNode* vhdlParser::File_open_informationContext::KW_OPEN() {
  return getToken(vhdlParser::KW_OPEN, 0);
}

vhdlParser::ExpressionContext* vhdlParser::File_open_informationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::File_open_informationContext::KW_IN() {
  return getToken(vhdlParser::KW_IN, 0);
}

tree::TerminalNode* vhdlParser::File_open_informationContext::KW_OUT() {
  return getToken(vhdlParser::KW_OUT, 0);
}


size_t vhdlParser::File_open_informationContext::getRuleIndex() const {
  return vhdlParser::RuleFile_open_information;
}

void vhdlParser::File_open_informationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_open_information(this);
}

void vhdlParser::File_open_informationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_open_information(this);
}


std::any vhdlParser::File_open_informationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFile_open_information(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::File_open_informationContext* vhdlParser::file_open_information() {
  File_open_informationContext *_localctx = _tracker.createInstance<File_open_informationContext>(_ctx, getState());
  enterRule(_localctx, 178, vhdlParser::RuleFile_open_information);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_OPEN) {
      setState(1232);
      match(vhdlParser::KW_OPEN);
      setState(1233);
      expression(0);
    }
    setState(1236);
    match(vhdlParser::KW_IS);
    setState(1238);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IN

    || _la == vhdlParser::KW_OUT) {
      setState(1237);
      _la = _input->LA(1);
      if (!(_la == vhdlParser::KW_IN

      || _la == vhdlParser::KW_OUT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1240);
    file_logical_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_logical_nameContext ------------------------------------------------------------------

vhdlParser::File_logical_nameContext::File_logical_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::ExpressionContext* vhdlParser::File_logical_nameContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::File_logical_nameContext::getRuleIndex() const {
  return vhdlParser::RuleFile_logical_name;
}

void vhdlParser::File_logical_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_logical_name(this);
}

void vhdlParser::File_logical_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_logical_name(this);
}


std::any vhdlParser::File_logical_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFile_logical_name(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::File_logical_nameContext* vhdlParser::file_logical_name() {
  File_logical_nameContext *_localctx = _tracker.createInstance<File_logical_nameContext>(_ctx, getState());
  enterRule(_localctx, 180, vhdlParser::RuleFile_logical_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1242);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_declarationContext::Interface_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Interface_object_declarationContext* vhdlParser::Interface_declarationContext::interface_object_declaration() {
  return getRuleContext<vhdlParser::Interface_object_declarationContext>(0);
}

vhdlParser::Interface_type_declarationContext* vhdlParser::Interface_declarationContext::interface_type_declaration() {
  return getRuleContext<vhdlParser::Interface_type_declarationContext>(0);
}

vhdlParser::Interface_subprogram_declarationContext* vhdlParser::Interface_declarationContext::interface_subprogram_declaration() {
  return getRuleContext<vhdlParser::Interface_subprogram_declarationContext>(0);
}

vhdlParser::Interface_package_declarationContext* vhdlParser::Interface_declarationContext::interface_package_declaration() {
  return getRuleContext<vhdlParser::Interface_package_declarationContext>(0);
}


size_t vhdlParser::Interface_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_declaration;
}

void vhdlParser::Interface_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_declaration(this);
}

void vhdlParser::Interface_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_declaration(this);
}


std::any vhdlParser::Interface_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_declarationContext* vhdlParser::interface_declaration() {
  Interface_declarationContext *_localctx = _tracker.createInstance<Interface_declarationContext>(_ctx, getState());
  enterRule(_localctx, 182, vhdlParser::RuleInterface_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1248);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_FILE:
      case vhdlParser::KW_SIGNAL:
      case vhdlParser::KW_VARIABLE:
      case vhdlParser::KW_CONSTANT:
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1244);
        interface_object_declaration();
        break;
      }

      case vhdlParser::KW_TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(1245);
        interface_type_declaration();
        break;
      }

      case vhdlParser::KW_PURE:
      case vhdlParser::KW_PROCEDURE:
      case vhdlParser::KW_FUNCTION:
      case vhdlParser::KW_IMPURE: {
        enterOuterAlt(_localctx, 3);
        setState(1246);
        interface_subprogram_declaration();
        break;
      }

      case vhdlParser::KW_PACKAGE: {
        enterOuterAlt(_localctx, 4);
        setState(1247);
        interface_package_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_object_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_object_declarationContext::Interface_object_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Interface_constant_declarationContext* vhdlParser::Interface_object_declarationContext::interface_constant_declaration() {
  return getRuleContext<vhdlParser::Interface_constant_declarationContext>(0);
}

vhdlParser::Interface_signal_declarationContext* vhdlParser::Interface_object_declarationContext::interface_signal_declaration() {
  return getRuleContext<vhdlParser::Interface_signal_declarationContext>(0);
}

vhdlParser::Interface_variable_declarationContext* vhdlParser::Interface_object_declarationContext::interface_variable_declaration() {
  return getRuleContext<vhdlParser::Interface_variable_declarationContext>(0);
}

vhdlParser::Interface_file_declarationContext* vhdlParser::Interface_object_declarationContext::interface_file_declaration() {
  return getRuleContext<vhdlParser::Interface_file_declarationContext>(0);
}


size_t vhdlParser::Interface_object_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_object_declaration;
}

void vhdlParser::Interface_object_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_object_declaration(this);
}

void vhdlParser::Interface_object_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_object_declaration(this);
}


std::any vhdlParser::Interface_object_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_object_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_object_declarationContext* vhdlParser::interface_object_declaration() {
  Interface_object_declarationContext *_localctx = _tracker.createInstance<Interface_object_declarationContext>(_ctx, getState());
  enterRule(_localctx, 184, vhdlParser::RuleInterface_object_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1254);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_CONSTANT: {
        enterOuterAlt(_localctx, 1);
        setState(1250);
        interface_constant_declaration();
        break;
      }

      case vhdlParser::KW_SIGNAL:
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1251);
        interface_signal_declaration();
        break;
      }

      case vhdlParser::KW_VARIABLE: {
        enterOuterAlt(_localctx, 3);
        setState(1252);
        interface_variable_declaration();
        break;
      }

      case vhdlParser::KW_FILE: {
        enterOuterAlt(_localctx, 4);
        setState(1253);
        interface_file_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_constant_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_constant_declarationContext::Interface_constant_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Interface_constant_declarationContext::KW_CONSTANT() {
  return getToken(vhdlParser::KW_CONSTANT, 0);
}

vhdlParser::Identifier_listContext* vhdlParser::Interface_constant_declarationContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_constant_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Interface_constant_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_constant_declarationContext::KW_IN() {
  return getToken(vhdlParser::KW_IN, 0);
}

tree::TerminalNode* vhdlParser::Interface_constant_declarationContext::VARASGN() {
  return getToken(vhdlParser::VARASGN, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Interface_constant_declarationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::Interface_constant_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_constant_declaration;
}

void vhdlParser::Interface_constant_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_constant_declaration(this);
}

void vhdlParser::Interface_constant_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_constant_declaration(this);
}


std::any vhdlParser::Interface_constant_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_constant_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_constant_declarationContext* vhdlParser::interface_constant_declaration() {
  Interface_constant_declarationContext *_localctx = _tracker.createInstance<Interface_constant_declarationContext>(_ctx, getState());
  enterRule(_localctx, 186, vhdlParser::RuleInterface_constant_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1256);
    match(vhdlParser::KW_CONSTANT);
    setState(1257);
    identifier_list();
    setState(1258);
    match(vhdlParser::COLON);
    setState(1260);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IN) {
      setState(1259);
      match(vhdlParser::KW_IN);
    }
    setState(1262);
    subtype_indication();
    setState(1265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::VARASGN) {
      setState(1263);
      match(vhdlParser::VARASGN);
      setState(1264);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_signal_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_signal_declarationContext::Interface_signal_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Identifier_listContext* vhdlParser::Interface_signal_declarationContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_signal_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Interface_signal_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_signal_declarationContext::KW_SIGNAL() {
  return getToken(vhdlParser::KW_SIGNAL, 0);
}

vhdlParser::Signal_modeContext* vhdlParser::Interface_signal_declarationContext::signal_mode() {
  return getRuleContext<vhdlParser::Signal_modeContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_signal_declarationContext::KW_BUS() {
  return getToken(vhdlParser::KW_BUS, 0);
}

tree::TerminalNode* vhdlParser::Interface_signal_declarationContext::VARASGN() {
  return getToken(vhdlParser::VARASGN, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Interface_signal_declarationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::Interface_signal_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_signal_declaration;
}

void vhdlParser::Interface_signal_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_signal_declaration(this);
}

void vhdlParser::Interface_signal_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_signal_declaration(this);
}


std::any vhdlParser::Interface_signal_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_signal_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_signal_declarationContext* vhdlParser::interface_signal_declaration() {
  Interface_signal_declarationContext *_localctx = _tracker.createInstance<Interface_signal_declarationContext>(_ctx, getState());
  enterRule(_localctx, 188, vhdlParser::RuleInterface_signal_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1268);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_SIGNAL) {
      setState(1267);
      match(vhdlParser::KW_SIGNAL);
    }
    setState(1270);
    identifier_list();
    setState(1271);
    match(vhdlParser::COLON);
    setState(1273);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_LINKAGE

    || _la == vhdlParser::KW_BUFFER || (((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8388737) != 0) {
      setState(1272);
      signal_mode();
    }
    setState(1275);
    subtype_indication();
    setState(1277);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_BUS) {
      setState(1276);
      match(vhdlParser::KW_BUS);
    }
    setState(1281);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::VARASGN) {
      setState(1279);
      match(vhdlParser::VARASGN);
      setState(1280);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_variable_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_variable_declarationContext::Interface_variable_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Interface_variable_declarationContext::KW_VARIABLE() {
  return getToken(vhdlParser::KW_VARIABLE, 0);
}

vhdlParser::Identifier_listContext* vhdlParser::Interface_variable_declarationContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_variable_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Interface_variable_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

vhdlParser::Signal_modeContext* vhdlParser::Interface_variable_declarationContext::signal_mode() {
  return getRuleContext<vhdlParser::Signal_modeContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_variable_declarationContext::VARASGN() {
  return getToken(vhdlParser::VARASGN, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Interface_variable_declarationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::Interface_variable_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_variable_declaration;
}

void vhdlParser::Interface_variable_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_variable_declaration(this);
}

void vhdlParser::Interface_variable_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_variable_declaration(this);
}


std::any vhdlParser::Interface_variable_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_variable_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_variable_declarationContext* vhdlParser::interface_variable_declaration() {
  Interface_variable_declarationContext *_localctx = _tracker.createInstance<Interface_variable_declarationContext>(_ctx, getState());
  enterRule(_localctx, 190, vhdlParser::RuleInterface_variable_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1283);
    match(vhdlParser::KW_VARIABLE);
    setState(1284);
    identifier_list();
    setState(1285);
    match(vhdlParser::COLON);
    setState(1287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_LINKAGE

    || _la == vhdlParser::KW_BUFFER || (((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8388737) != 0) {
      setState(1286);
      signal_mode();
    }
    setState(1289);
    subtype_indication();
    setState(1292);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::VARASGN) {
      setState(1290);
      match(vhdlParser::VARASGN);
      setState(1291);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_file_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_file_declarationContext::Interface_file_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Interface_file_declarationContext::KW_FILE() {
  return getToken(vhdlParser::KW_FILE, 0);
}

vhdlParser::Identifier_listContext* vhdlParser::Interface_file_declarationContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_file_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Interface_file_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}


size_t vhdlParser::Interface_file_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_file_declaration;
}

void vhdlParser::Interface_file_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_file_declaration(this);
}

void vhdlParser::Interface_file_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_file_declaration(this);
}


std::any vhdlParser::Interface_file_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_file_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_file_declarationContext* vhdlParser::interface_file_declaration() {
  Interface_file_declarationContext *_localctx = _tracker.createInstance<Interface_file_declarationContext>(_ctx, getState());
  enterRule(_localctx, 192, vhdlParser::RuleInterface_file_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1294);
    match(vhdlParser::KW_FILE);
    setState(1295);
    identifier_list();
    setState(1296);
    match(vhdlParser::COLON);
    setState(1297);
    subtype_indication();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signal_modeContext ------------------------------------------------------------------

vhdlParser::Signal_modeContext::Signal_modeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Signal_modeContext::KW_IN() {
  return getToken(vhdlParser::KW_IN, 0);
}

tree::TerminalNode* vhdlParser::Signal_modeContext::KW_OUT() {
  return getToken(vhdlParser::KW_OUT, 0);
}

tree::TerminalNode* vhdlParser::Signal_modeContext::KW_INOUT() {
  return getToken(vhdlParser::KW_INOUT, 0);
}

tree::TerminalNode* vhdlParser::Signal_modeContext::KW_BUFFER() {
  return getToken(vhdlParser::KW_BUFFER, 0);
}

tree::TerminalNode* vhdlParser::Signal_modeContext::KW_LINKAGE() {
  return getToken(vhdlParser::KW_LINKAGE, 0);
}


size_t vhdlParser::Signal_modeContext::getRuleIndex() const {
  return vhdlParser::RuleSignal_mode;
}

void vhdlParser::Signal_modeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSignal_mode(this);
}

void vhdlParser::Signal_modeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSignal_mode(this);
}


std::any vhdlParser::Signal_modeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSignal_mode(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Signal_modeContext* vhdlParser::signal_mode() {
  Signal_modeContext *_localctx = _tracker.createInstance<Signal_modeContext>(_ctx, getState());
  enterRule(_localctx, 194, vhdlParser::RuleSignal_mode);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1299);
    _la = _input->LA(1);
    if (!(_la == vhdlParser::KW_LINKAGE

    || _la == vhdlParser::KW_BUFFER || (((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8388737) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_type_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_type_declarationContext::Interface_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Interface_incomplete_type_declarationContext* vhdlParser::Interface_type_declarationContext::interface_incomplete_type_declaration() {
  return getRuleContext<vhdlParser::Interface_incomplete_type_declarationContext>(0);
}


size_t vhdlParser::Interface_type_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_type_declaration;
}

void vhdlParser::Interface_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_type_declaration(this);
}

void vhdlParser::Interface_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_type_declaration(this);
}


std::any vhdlParser::Interface_type_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_type_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_type_declarationContext* vhdlParser::interface_type_declaration() {
  Interface_type_declarationContext *_localctx = _tracker.createInstance<Interface_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 196, vhdlParser::RuleInterface_type_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1301);
    interface_incomplete_type_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_incomplete_type_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_incomplete_type_declarationContext::Interface_incomplete_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Interface_incomplete_type_declarationContext::KW_TYPE() {
  return getToken(vhdlParser::KW_TYPE, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Interface_incomplete_type_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}


size_t vhdlParser::Interface_incomplete_type_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_incomplete_type_declaration;
}

void vhdlParser::Interface_incomplete_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_incomplete_type_declaration(this);
}

void vhdlParser::Interface_incomplete_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_incomplete_type_declaration(this);
}


std::any vhdlParser::Interface_incomplete_type_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_incomplete_type_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_incomplete_type_declarationContext* vhdlParser::interface_incomplete_type_declaration() {
  Interface_incomplete_type_declarationContext *_localctx = _tracker.createInstance<Interface_incomplete_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 198, vhdlParser::RuleInterface_incomplete_type_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1303);
    match(vhdlParser::KW_TYPE);
    setState(1304);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_subprogram_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_subprogram_declarationContext::Interface_subprogram_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Interface_subprogram_specificationContext* vhdlParser::Interface_subprogram_declarationContext::interface_subprogram_specification() {
  return getRuleContext<vhdlParser::Interface_subprogram_specificationContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_subprogram_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

vhdlParser::Interface_subprogram_defaultContext* vhdlParser::Interface_subprogram_declarationContext::interface_subprogram_default() {
  return getRuleContext<vhdlParser::Interface_subprogram_defaultContext>(0);
}


size_t vhdlParser::Interface_subprogram_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_subprogram_declaration;
}

void vhdlParser::Interface_subprogram_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_subprogram_declaration(this);
}

void vhdlParser::Interface_subprogram_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_subprogram_declaration(this);
}


std::any vhdlParser::Interface_subprogram_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_subprogram_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_subprogram_declarationContext* vhdlParser::interface_subprogram_declaration() {
  Interface_subprogram_declarationContext *_localctx = _tracker.createInstance<Interface_subprogram_declarationContext>(_ctx, getState());
  enterRule(_localctx, 200, vhdlParser::RuleInterface_subprogram_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1306);
    interface_subprogram_specification();
    setState(1309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IS) {
      setState(1307);
      match(vhdlParser::KW_IS);
      setState(1308);
      interface_subprogram_default();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_subprogram_specificationContext ------------------------------------------------------------------

vhdlParser::Interface_subprogram_specificationContext::Interface_subprogram_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Interface_procedure_specificationContext* vhdlParser::Interface_subprogram_specificationContext::interface_procedure_specification() {
  return getRuleContext<vhdlParser::Interface_procedure_specificationContext>(0);
}

vhdlParser::Interface_function_specificationContext* vhdlParser::Interface_subprogram_specificationContext::interface_function_specification() {
  return getRuleContext<vhdlParser::Interface_function_specificationContext>(0);
}


size_t vhdlParser::Interface_subprogram_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_subprogram_specification;
}

void vhdlParser::Interface_subprogram_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_subprogram_specification(this);
}

void vhdlParser::Interface_subprogram_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_subprogram_specification(this);
}


std::any vhdlParser::Interface_subprogram_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_subprogram_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_subprogram_specificationContext* vhdlParser::interface_subprogram_specification() {
  Interface_subprogram_specificationContext *_localctx = _tracker.createInstance<Interface_subprogram_specificationContext>(_ctx, getState());
  enterRule(_localctx, 202, vhdlParser::RuleInterface_subprogram_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1313);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(1311);
        interface_procedure_specification();
        break;
      }

      case vhdlParser::KW_PURE:
      case vhdlParser::KW_FUNCTION:
      case vhdlParser::KW_IMPURE: {
        enterOuterAlt(_localctx, 2);
        setState(1312);
        interface_function_specification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_procedure_specificationContext ------------------------------------------------------------------

vhdlParser::Interface_procedure_specificationContext::Interface_procedure_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Interface_procedure_specificationContext::KW_PROCEDURE() {
  return getToken(vhdlParser::KW_PROCEDURE, 0);
}

vhdlParser::DesignatorContext* vhdlParser::Interface_procedure_specificationContext::designator() {
  return getRuleContext<vhdlParser::DesignatorContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_procedure_specificationContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Formal_parameter_listContext* vhdlParser::Interface_procedure_specificationContext::formal_parameter_list() {
  return getRuleContext<vhdlParser::Formal_parameter_listContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_procedure_specificationContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Interface_procedure_specificationContext::KW_PARAMETER() {
  return getToken(vhdlParser::KW_PARAMETER, 0);
}


size_t vhdlParser::Interface_procedure_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_procedure_specification;
}

void vhdlParser::Interface_procedure_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_procedure_specification(this);
}

void vhdlParser::Interface_procedure_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_procedure_specification(this);
}


std::any vhdlParser::Interface_procedure_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_procedure_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_procedure_specificationContext* vhdlParser::interface_procedure_specification() {
  Interface_procedure_specificationContext *_localctx = _tracker.createInstance<Interface_procedure_specificationContext>(_ctx, getState());
  enterRule(_localctx, 204, vhdlParser::RuleInterface_procedure_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1315);
    match(vhdlParser::KW_PROCEDURE);
    setState(1316);
    designator();
    setState(1324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PARAMETER

    || _la == vhdlParser::LPAREN) {
      setState(1318);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_PARAMETER) {
        setState(1317);
        match(vhdlParser::KW_PARAMETER);
      }
      setState(1320);
      match(vhdlParser::LPAREN);
      setState(1321);
      formal_parameter_list();
      setState(1322);
      match(vhdlParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_function_specificationContext ------------------------------------------------------------------

vhdlParser::Interface_function_specificationContext::Interface_function_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Interface_function_specificationContext::KW_FUNCTION() {
  return getToken(vhdlParser::KW_FUNCTION, 0);
}

vhdlParser::DesignatorContext* vhdlParser::Interface_function_specificationContext::designator() {
  return getRuleContext<vhdlParser::DesignatorContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_function_specificationContext::KW_RETURN() {
  return getToken(vhdlParser::KW_RETURN, 0);
}

vhdlParser::Type_markContext* vhdlParser::Interface_function_specificationContext::type_mark() {
  return getRuleContext<vhdlParser::Type_markContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_function_specificationContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Formal_parameter_listContext* vhdlParser::Interface_function_specificationContext::formal_parameter_list() {
  return getRuleContext<vhdlParser::Formal_parameter_listContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_function_specificationContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Interface_function_specificationContext::KW_PURE() {
  return getToken(vhdlParser::KW_PURE, 0);
}

tree::TerminalNode* vhdlParser::Interface_function_specificationContext::KW_IMPURE() {
  return getToken(vhdlParser::KW_IMPURE, 0);
}

tree::TerminalNode* vhdlParser::Interface_function_specificationContext::KW_PARAMETER() {
  return getToken(vhdlParser::KW_PARAMETER, 0);
}


size_t vhdlParser::Interface_function_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_function_specification;
}

void vhdlParser::Interface_function_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_function_specification(this);
}

void vhdlParser::Interface_function_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_function_specification(this);
}


std::any vhdlParser::Interface_function_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_function_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_function_specificationContext* vhdlParser::interface_function_specification() {
  Interface_function_specificationContext *_localctx = _tracker.createInstance<Interface_function_specificationContext>(_ctx, getState());
  enterRule(_localctx, 206, vhdlParser::RuleInterface_function_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1327);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PURE

    || _la == vhdlParser::KW_IMPURE) {
      setState(1326);
      _la = _input->LA(1);
      if (!(_la == vhdlParser::KW_PURE

      || _la == vhdlParser::KW_IMPURE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1329);
    match(vhdlParser::KW_FUNCTION);
    setState(1330);
    designator();
    setState(1338);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PARAMETER

    || _la == vhdlParser::LPAREN) {
      setState(1332);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_PARAMETER) {
        setState(1331);
        match(vhdlParser::KW_PARAMETER);
      }
      setState(1334);
      match(vhdlParser::LPAREN);
      setState(1335);
      formal_parameter_list();
      setState(1336);
      match(vhdlParser::RPAREN);
    }
    setState(1340);
    match(vhdlParser::KW_RETURN);
    setState(1341);
    type_mark();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_subprogram_defaultContext ------------------------------------------------------------------

vhdlParser::Interface_subprogram_defaultContext::Interface_subprogram_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::Interface_subprogram_defaultContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_subprogram_defaultContext::BOX() {
  return getToken(vhdlParser::BOX, 0);
}


size_t vhdlParser::Interface_subprogram_defaultContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_subprogram_default;
}

void vhdlParser::Interface_subprogram_defaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_subprogram_default(this);
}

void vhdlParser::Interface_subprogram_defaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_subprogram_default(this);
}


std::any vhdlParser::Interface_subprogram_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_subprogram_default(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_subprogram_defaultContext* vhdlParser::interface_subprogram_default() {
  Interface_subprogram_defaultContext *_localctx = _tracker.createInstance<Interface_subprogram_defaultContext>(_ctx, getState());
  enterRule(_localctx, 208, vhdlParser::RuleInterface_subprogram_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1345);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::SHIFT_LEFT: {
        enterOuterAlt(_localctx, 1);
        setState(1343);
        name(0);
        break;
      }

      case vhdlParser::BOX: {
        enterOuterAlt(_localctx, 2);
        setState(1344);
        match(vhdlParser::BOX);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_package_declarationContext ------------------------------------------------------------------

vhdlParser::Interface_package_declarationContext::Interface_package_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Interface_package_declarationContext::KW_PACKAGE() {
  return getToken(vhdlParser::KW_PACKAGE, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Interface_package_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_package_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Interface_package_declarationContext::KW_NEW() {
  return getToken(vhdlParser::KW_NEW, 0);
}

vhdlParser::NameContext* vhdlParser::Interface_package_declarationContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

vhdlParser::Interface_package_generic_map_aspectContext* vhdlParser::Interface_package_declarationContext::interface_package_generic_map_aspect() {
  return getRuleContext<vhdlParser::Interface_package_generic_map_aspectContext>(0);
}


size_t vhdlParser::Interface_package_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_package_declaration;
}

void vhdlParser::Interface_package_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_package_declaration(this);
}

void vhdlParser::Interface_package_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_package_declaration(this);
}


std::any vhdlParser::Interface_package_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_package_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_package_declarationContext* vhdlParser::interface_package_declaration() {
  Interface_package_declarationContext *_localctx = _tracker.createInstance<Interface_package_declarationContext>(_ctx, getState());
  enterRule(_localctx, 210, vhdlParser::RuleInterface_package_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1347);
    match(vhdlParser::KW_PACKAGE);
    setState(1348);
    identifier();
    setState(1349);
    match(vhdlParser::KW_IS);
    setState(1350);
    match(vhdlParser::KW_NEW);
    setState(1351);
    name(0);
    setState(1352);
    interface_package_generic_map_aspect();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_package_generic_map_aspectContext ------------------------------------------------------------------

vhdlParser::Interface_package_generic_map_aspectContext::Interface_package_generic_map_aspectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Generic_map_aspectContext* vhdlParser::Interface_package_generic_map_aspectContext::generic_map_aspect() {
  return getRuleContext<vhdlParser::Generic_map_aspectContext>(0);
}

tree::TerminalNode* vhdlParser::Interface_package_generic_map_aspectContext::KW_GENERIC() {
  return getToken(vhdlParser::KW_GENERIC, 0);
}

tree::TerminalNode* vhdlParser::Interface_package_generic_map_aspectContext::KW_MAP() {
  return getToken(vhdlParser::KW_MAP, 0);
}

tree::TerminalNode* vhdlParser::Interface_package_generic_map_aspectContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

tree::TerminalNode* vhdlParser::Interface_package_generic_map_aspectContext::BOX() {
  return getToken(vhdlParser::BOX, 0);
}

tree::TerminalNode* vhdlParser::Interface_package_generic_map_aspectContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Interface_package_generic_map_aspectContext::KW_DEFAULT() {
  return getToken(vhdlParser::KW_DEFAULT, 0);
}


size_t vhdlParser::Interface_package_generic_map_aspectContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_package_generic_map_aspect;
}

void vhdlParser::Interface_package_generic_map_aspectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_package_generic_map_aspect(this);
}

void vhdlParser::Interface_package_generic_map_aspectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_package_generic_map_aspect(this);
}


std::any vhdlParser::Interface_package_generic_map_aspectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_package_generic_map_aspect(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_package_generic_map_aspectContext* vhdlParser::interface_package_generic_map_aspect() {
  Interface_package_generic_map_aspectContext *_localctx = _tracker.createInstance<Interface_package_generic_map_aspectContext>(_ctx, getState());
  enterRule(_localctx, 212, vhdlParser::RuleInterface_package_generic_map_aspect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1365);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1354);
      generic_map_aspect();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1355);
      match(vhdlParser::KW_GENERIC);
      setState(1356);
      match(vhdlParser::KW_MAP);
      setState(1357);
      match(vhdlParser::LPAREN);
      setState(1358);
      match(vhdlParser::BOX);
      setState(1359);
      match(vhdlParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1360);
      match(vhdlParser::KW_GENERIC);
      setState(1361);
      match(vhdlParser::KW_MAP);
      setState(1362);
      match(vhdlParser::LPAREN);
      setState(1363);
      match(vhdlParser::KW_DEFAULT);
      setState(1364);
      match(vhdlParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_listContext ------------------------------------------------------------------

vhdlParser::Interface_listContext::Interface_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::Interface_elementContext *> vhdlParser::Interface_listContext::interface_element() {
  return getRuleContexts<vhdlParser::Interface_elementContext>();
}

vhdlParser::Interface_elementContext* vhdlParser::Interface_listContext::interface_element(size_t i) {
  return getRuleContext<vhdlParser::Interface_elementContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Interface_listContext::SEMI() {
  return getTokens(vhdlParser::SEMI);
}

tree::TerminalNode* vhdlParser::Interface_listContext::SEMI(size_t i) {
  return getToken(vhdlParser::SEMI, i);
}


size_t vhdlParser::Interface_listContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_list;
}

void vhdlParser::Interface_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_list(this);
}

void vhdlParser::Interface_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_list(this);
}


std::any vhdlParser::Interface_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_listContext* vhdlParser::interface_list() {
  Interface_listContext *_localctx = _tracker.createInstance<Interface_listContext>(_ctx, getState());
  enterRule(_localctx, 214, vhdlParser::RuleInterface_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1367);
    interface_element();
    setState(1372);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::SEMI) {
      setState(1368);
      match(vhdlParser::SEMI);
      setState(1369);
      interface_element();
      setState(1374);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_elementContext ------------------------------------------------------------------

vhdlParser::Interface_elementContext::Interface_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Interface_declarationContext* vhdlParser::Interface_elementContext::interface_declaration() {
  return getRuleContext<vhdlParser::Interface_declarationContext>(0);
}


size_t vhdlParser::Interface_elementContext::getRuleIndex() const {
  return vhdlParser::RuleInterface_element;
}

void vhdlParser::Interface_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_element(this);
}

void vhdlParser::Interface_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_element(this);
}


std::any vhdlParser::Interface_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInterface_element(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Interface_elementContext* vhdlParser::interface_element() {
  Interface_elementContext *_localctx = _tracker.createInstance<Interface_elementContext>(_ctx, getState());
  enterRule(_localctx, 216, vhdlParser::RuleInterface_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1375);
    interface_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_clauseContext ------------------------------------------------------------------

vhdlParser::Generic_clauseContext::Generic_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Generic_clauseContext::KW_GENERIC() {
  return getToken(vhdlParser::KW_GENERIC, 0);
}

tree::TerminalNode* vhdlParser::Generic_clauseContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Generic_listContext* vhdlParser::Generic_clauseContext::generic_list() {
  return getRuleContext<vhdlParser::Generic_listContext>(0);
}

tree::TerminalNode* vhdlParser::Generic_clauseContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Generic_clauseContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Generic_clauseContext::getRuleIndex() const {
  return vhdlParser::RuleGeneric_clause;
}

void vhdlParser::Generic_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_clause(this);
}

void vhdlParser::Generic_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_clause(this);
}


std::any vhdlParser::Generic_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGeneric_clause(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Generic_clauseContext* vhdlParser::generic_clause() {
  Generic_clauseContext *_localctx = _tracker.createInstance<Generic_clauseContext>(_ctx, getState());
  enterRule(_localctx, 218, vhdlParser::RuleGeneric_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1377);
    match(vhdlParser::KW_GENERIC);
    setState(1378);
    match(vhdlParser::LPAREN);
    setState(1379);
    generic_list();
    setState(1380);
    match(vhdlParser::RPAREN);
    setState(1381);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_listContext ------------------------------------------------------------------

vhdlParser::Generic_listContext::Generic_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Interface_listContext* vhdlParser::Generic_listContext::interface_list() {
  return getRuleContext<vhdlParser::Interface_listContext>(0);
}


size_t vhdlParser::Generic_listContext::getRuleIndex() const {
  return vhdlParser::RuleGeneric_list;
}

void vhdlParser::Generic_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_list(this);
}

void vhdlParser::Generic_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_list(this);
}


std::any vhdlParser::Generic_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGeneric_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Generic_listContext* vhdlParser::generic_list() {
  Generic_listContext *_localctx = _tracker.createInstance<Generic_listContext>(_ctx, getState());
  enterRule(_localctx, 220, vhdlParser::RuleGeneric_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1383);
    interface_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Port_clauseContext ------------------------------------------------------------------

vhdlParser::Port_clauseContext::Port_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Port_clauseContext::KW_PORT() {
  return getToken(vhdlParser::KW_PORT, 0);
}

tree::TerminalNode* vhdlParser::Port_clauseContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Port_listContext* vhdlParser::Port_clauseContext::port_list() {
  return getRuleContext<vhdlParser::Port_listContext>(0);
}

tree::TerminalNode* vhdlParser::Port_clauseContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Port_clauseContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Port_clauseContext::getRuleIndex() const {
  return vhdlParser::RulePort_clause;
}

void vhdlParser::Port_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPort_clause(this);
}

void vhdlParser::Port_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPort_clause(this);
}


std::any vhdlParser::Port_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPort_clause(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Port_clauseContext* vhdlParser::port_clause() {
  Port_clauseContext *_localctx = _tracker.createInstance<Port_clauseContext>(_ctx, getState());
  enterRule(_localctx, 222, vhdlParser::RulePort_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1385);
    match(vhdlParser::KW_PORT);
    setState(1386);
    match(vhdlParser::LPAREN);
    setState(1387);
    port_list();
    setState(1388);
    match(vhdlParser::RPAREN);
    setState(1389);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Port_listContext ------------------------------------------------------------------

vhdlParser::Port_listContext::Port_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Interface_listContext* vhdlParser::Port_listContext::interface_list() {
  return getRuleContext<vhdlParser::Interface_listContext>(0);
}


size_t vhdlParser::Port_listContext::getRuleIndex() const {
  return vhdlParser::RulePort_list;
}

void vhdlParser::Port_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPort_list(this);
}

void vhdlParser::Port_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPort_list(this);
}


std::any vhdlParser::Port_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPort_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Port_listContext* vhdlParser::port_list() {
  Port_listContext *_localctx = _tracker.createInstance<Port_listContext>(_ctx, getState());
  enterRule(_localctx, 224, vhdlParser::RulePort_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1391);
    interface_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Association_listContext ------------------------------------------------------------------

vhdlParser::Association_listContext::Association_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Association_listContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

std::vector<vhdlParser::Association_elementContext *> vhdlParser::Association_listContext::association_element() {
  return getRuleContexts<vhdlParser::Association_elementContext>();
}

vhdlParser::Association_elementContext* vhdlParser::Association_listContext::association_element(size_t i) {
  return getRuleContext<vhdlParser::Association_elementContext>(i);
}

tree::TerminalNode* vhdlParser::Association_listContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Association_listContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Association_listContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Association_listContext::getRuleIndex() const {
  return vhdlParser::RuleAssociation_list;
}

void vhdlParser::Association_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociation_list(this);
}

void vhdlParser::Association_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociation_list(this);
}


std::any vhdlParser::Association_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAssociation_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Association_listContext* vhdlParser::association_list() {
  Association_listContext *_localctx = _tracker.createInstance<Association_listContext>(_ctx, getState());
  enterRule(_localctx, 226, vhdlParser::RuleAssociation_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1393);
    match(vhdlParser::LPAREN);
    setState(1394);
    association_element();
    setState(1399);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1395);
      match(vhdlParser::COMMA);
      setState(1396);
      association_element();
      setState(1401);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1402);
    match(vhdlParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Association_elementContext ------------------------------------------------------------------

vhdlParser::Association_elementContext::Association_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Actual_partContext* vhdlParser::Association_elementContext::actual_part() {
  return getRuleContext<vhdlParser::Actual_partContext>(0);
}

vhdlParser::Formal_partContext* vhdlParser::Association_elementContext::formal_part() {
  return getRuleContext<vhdlParser::Formal_partContext>(0);
}

tree::TerminalNode* vhdlParser::Association_elementContext::ARROW() {
  return getToken(vhdlParser::ARROW, 0);
}


size_t vhdlParser::Association_elementContext::getRuleIndex() const {
  return vhdlParser::RuleAssociation_element;
}

void vhdlParser::Association_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociation_element(this);
}

void vhdlParser::Association_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociation_element(this);
}


std::any vhdlParser::Association_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAssociation_element(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Association_elementContext* vhdlParser::association_element() {
  Association_elementContext *_localctx = _tracker.createInstance<Association_elementContext>(_ctx, getState());
  enterRule(_localctx, 228, vhdlParser::RuleAssociation_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1407);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      setState(1404);
      formal_part();
      setState(1405);
      match(vhdlParser::ARROW);
      break;
    }

    default:
      break;
    }
    setState(1409);
    actual_part();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_partContext ------------------------------------------------------------------

vhdlParser::Formal_partContext::Formal_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::NameContext *> vhdlParser::Formal_partContext::name() {
  return getRuleContexts<vhdlParser::NameContext>();
}

vhdlParser::NameContext* vhdlParser::Formal_partContext::name(size_t i) {
  return getRuleContext<vhdlParser::NameContext>(i);
}

tree::TerminalNode* vhdlParser::Formal_partContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

tree::TerminalNode* vhdlParser::Formal_partContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}


size_t vhdlParser::Formal_partContext::getRuleIndex() const {
  return vhdlParser::RuleFormal_part;
}

void vhdlParser::Formal_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_part(this);
}

void vhdlParser::Formal_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_part(this);
}


std::any vhdlParser::Formal_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFormal_part(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Formal_partContext* vhdlParser::formal_part() {
  Formal_partContext *_localctx = _tracker.createInstance<Formal_partContext>(_ctx, getState());
  enterRule(_localctx, 230, vhdlParser::RuleFormal_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1411);
    name(0);
    setState(1416);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::LPAREN) {
      setState(1412);
      match(vhdlParser::LPAREN);
      setState(1413);
      name(0);
      setState(1414);
      match(vhdlParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Actual_partContext ------------------------------------------------------------------

vhdlParser::Actual_partContext::Actual_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::Actual_partContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Actual_partContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Actual_designatorContext* vhdlParser::Actual_partContext::actual_designator() {
  return getRuleContext<vhdlParser::Actual_designatorContext>(0);
}

tree::TerminalNode* vhdlParser::Actual_partContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}


size_t vhdlParser::Actual_partContext::getRuleIndex() const {
  return vhdlParser::RuleActual_part;
}

void vhdlParser::Actual_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterActual_part(this);
}

void vhdlParser::Actual_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitActual_part(this);
}


std::any vhdlParser::Actual_partContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitActual_part(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Actual_partContext* vhdlParser::actual_part() {
  Actual_partContext *_localctx = _tracker.createInstance<Actual_partContext>(_ctx, getState());
  enterRule(_localctx, 232, vhdlParser::RuleActual_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1424);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1418);
      name(0);
      setState(1419);
      match(vhdlParser::LPAREN);
      setState(1420);
      actual_designator();
      setState(1421);
      match(vhdlParser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1423);
      actual_designator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Actual_designatorContext ------------------------------------------------------------------

vhdlParser::Actual_designatorContext::Actual_designatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::ExpressionContext* vhdlParser::Actual_designatorContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Actual_designatorContext::KW_INERTIAL() {
  return getToken(vhdlParser::KW_INERTIAL, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Actual_designatorContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* vhdlParser::Actual_designatorContext::KW_OPEN() {
  return getToken(vhdlParser::KW_OPEN, 0);
}


size_t vhdlParser::Actual_designatorContext::getRuleIndex() const {
  return vhdlParser::RuleActual_designator;
}

void vhdlParser::Actual_designatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterActual_designator(this);
}

void vhdlParser::Actual_designatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitActual_designator(this);
}


std::any vhdlParser::Actual_designatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitActual_designator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Actual_designatorContext* vhdlParser::actual_designator() {
  Actual_designatorContext *_localctx = _tracker.createInstance<Actual_designatorContext>(_ctx, getState());
  enterRule(_localctx, 234, vhdlParser::RuleActual_designator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1432);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1427);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_INERTIAL) {
        setState(1426);
        match(vhdlParser::KW_INERTIAL);
      }
      setState(1429);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1430);
      subtype_indication();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1431);
      match(vhdlParser::KW_OPEN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_map_aspectContext ------------------------------------------------------------------

vhdlParser::Generic_map_aspectContext::Generic_map_aspectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Generic_map_aspectContext::KW_GENERIC() {
  return getToken(vhdlParser::KW_GENERIC, 0);
}

tree::TerminalNode* vhdlParser::Generic_map_aspectContext::KW_MAP() {
  return getToken(vhdlParser::KW_MAP, 0);
}

vhdlParser::Association_listContext* vhdlParser::Generic_map_aspectContext::association_list() {
  return getRuleContext<vhdlParser::Association_listContext>(0);
}


size_t vhdlParser::Generic_map_aspectContext::getRuleIndex() const {
  return vhdlParser::RuleGeneric_map_aspect;
}

void vhdlParser::Generic_map_aspectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_map_aspect(this);
}

void vhdlParser::Generic_map_aspectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_map_aspect(this);
}


std::any vhdlParser::Generic_map_aspectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGeneric_map_aspect(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Generic_map_aspectContext* vhdlParser::generic_map_aspect() {
  Generic_map_aspectContext *_localctx = _tracker.createInstance<Generic_map_aspectContext>(_ctx, getState());
  enterRule(_localctx, 236, vhdlParser::RuleGeneric_map_aspect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1434);
    match(vhdlParser::KW_GENERIC);
    setState(1435);
    match(vhdlParser::KW_MAP);
    setState(1436);
    association_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Port_map_aspectContext ------------------------------------------------------------------

vhdlParser::Port_map_aspectContext::Port_map_aspectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Port_map_aspectContext::KW_PORT() {
  return getToken(vhdlParser::KW_PORT, 0);
}

tree::TerminalNode* vhdlParser::Port_map_aspectContext::KW_MAP() {
  return getToken(vhdlParser::KW_MAP, 0);
}

vhdlParser::Association_listContext* vhdlParser::Port_map_aspectContext::association_list() {
  return getRuleContext<vhdlParser::Association_listContext>(0);
}


size_t vhdlParser::Port_map_aspectContext::getRuleIndex() const {
  return vhdlParser::RulePort_map_aspect;
}

void vhdlParser::Port_map_aspectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPort_map_aspect(this);
}

void vhdlParser::Port_map_aspectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPort_map_aspect(this);
}


std::any vhdlParser::Port_map_aspectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPort_map_aspect(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Port_map_aspectContext* vhdlParser::port_map_aspect() {
  Port_map_aspectContext *_localctx = _tracker.createInstance<Port_map_aspectContext>(_ctx, getState());
  enterRule(_localctx, 238, vhdlParser::RulePort_map_aspect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1438);
    match(vhdlParser::KW_PORT);
    setState(1439);
    match(vhdlParser::KW_MAP);
    setState(1440);
    association_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alias_declarationContext ------------------------------------------------------------------

vhdlParser::Alias_declarationContext::Alias_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Alias_declarationContext::KW_ALIAS() {
  return getToken(vhdlParser::KW_ALIAS, 0);
}

vhdlParser::Alias_designatorContext* vhdlParser::Alias_declarationContext::alias_designator() {
  return getRuleContext<vhdlParser::Alias_designatorContext>(0);
}

tree::TerminalNode* vhdlParser::Alias_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

vhdlParser::NameContext* vhdlParser::Alias_declarationContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Alias_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Alias_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::Alias_declarationContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

vhdlParser::SignatureContext* vhdlParser::Alias_declarationContext::signature() {
  return getRuleContext<vhdlParser::SignatureContext>(0);
}


size_t vhdlParser::Alias_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleAlias_declaration;
}

void vhdlParser::Alias_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias_declaration(this);
}

void vhdlParser::Alias_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias_declaration(this);
}


std::any vhdlParser::Alias_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAlias_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Alias_declarationContext* vhdlParser::alias_declaration() {
  Alias_declarationContext *_localctx = _tracker.createInstance<Alias_declarationContext>(_ctx, getState());
  enterRule(_localctx, 240, vhdlParser::RuleAlias_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1442);
    match(vhdlParser::KW_ALIAS);
    setState(1443);
    alias_designator();
    setState(1446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::COLON) {
      setState(1444);
      match(vhdlParser::COLON);
      setState(1445);
      subtype_indication();
    }
    setState(1448);
    match(vhdlParser::KW_IS);
    setState(1449);
    name(0);
    setState(1451);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::LSQUARE_BR) {
      setState(1450);
      signature();
    }
    setState(1453);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alias_designatorContext ------------------------------------------------------------------

vhdlParser::Alias_designatorContext::Alias_designatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Alias_designatorContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Alias_designatorContext::CHARACTER_LITERAL() {
  return getToken(vhdlParser::CHARACTER_LITERAL, 0);
}

vhdlParser::Operator_symbolContext* vhdlParser::Alias_designatorContext::operator_symbol() {
  return getRuleContext<vhdlParser::Operator_symbolContext>(0);
}


size_t vhdlParser::Alias_designatorContext::getRuleIndex() const {
  return vhdlParser::RuleAlias_designator;
}

void vhdlParser::Alias_designatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias_designator(this);
}

void vhdlParser::Alias_designatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias_designator(this);
}


std::any vhdlParser::Alias_designatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAlias_designator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Alias_designatorContext* vhdlParser::alias_designator() {
  Alias_designatorContext *_localctx = _tracker.createInstance<Alias_designatorContext>(_ctx, getState());
  enterRule(_localctx, 242, vhdlParser::RuleAlias_designator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1458);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1455);
        identifier();
        break;
      }

      case vhdlParser::CHARACTER_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1456);
        match(vhdlParser::CHARACTER_LITERAL);
        break;
      }

      case vhdlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1457);
        operator_symbol();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_declarationContext ------------------------------------------------------------------

vhdlParser::Attribute_declarationContext::Attribute_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Attribute_declarationContext::KW_ATTRIBUTE() {
  return getToken(vhdlParser::KW_ATTRIBUTE, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Attribute_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Attribute_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Type_markContext* vhdlParser::Attribute_declarationContext::type_mark() {
  return getRuleContext<vhdlParser::Type_markContext>(0);
}

tree::TerminalNode* vhdlParser::Attribute_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Attribute_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleAttribute_declaration;
}

void vhdlParser::Attribute_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_declaration(this);
}

void vhdlParser::Attribute_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_declaration(this);
}


std::any vhdlParser::Attribute_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAttribute_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Attribute_declarationContext* vhdlParser::attribute_declaration() {
  Attribute_declarationContext *_localctx = _tracker.createInstance<Attribute_declarationContext>(_ctx, getState());
  enterRule(_localctx, 244, vhdlParser::RuleAttribute_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1460);
    match(vhdlParser::KW_ATTRIBUTE);
    setState(1461);
    identifier();
    setState(1462);
    match(vhdlParser::COLON);
    setState(1463);
    type_mark();
    setState(1464);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_declarationContext ------------------------------------------------------------------

vhdlParser::Component_declarationContext::Component_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Component_declarationContext::KW_COMPONENT() {
  return getTokens(vhdlParser::KW_COMPONENT);
}

tree::TerminalNode* vhdlParser::Component_declarationContext::KW_COMPONENT(size_t i) {
  return getToken(vhdlParser::KW_COMPONENT, i);
}

std::vector<vhdlParser::IdentifierContext *> vhdlParser::Component_declarationContext::identifier() {
  return getRuleContexts<vhdlParser::IdentifierContext>();
}

vhdlParser::IdentifierContext* vhdlParser::Component_declarationContext::identifier(size_t i) {
  return getRuleContext<vhdlParser::IdentifierContext>(i);
}

tree::TerminalNode* vhdlParser::Component_declarationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Component_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Component_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

vhdlParser::Generic_clauseContext* vhdlParser::Component_declarationContext::generic_clause() {
  return getRuleContext<vhdlParser::Generic_clauseContext>(0);
}

vhdlParser::Port_clauseContext* vhdlParser::Component_declarationContext::port_clause() {
  return getRuleContext<vhdlParser::Port_clauseContext>(0);
}


size_t vhdlParser::Component_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleComponent_declaration;
}

void vhdlParser::Component_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_declaration(this);
}

void vhdlParser::Component_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_declaration(this);
}


std::any vhdlParser::Component_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitComponent_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Component_declarationContext* vhdlParser::component_declaration() {
  Component_declarationContext *_localctx = _tracker.createInstance<Component_declarationContext>(_ctx, getState());
  enterRule(_localctx, 246, vhdlParser::RuleComponent_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1466);
    match(vhdlParser::KW_COMPONENT);
    setState(1467);
    identifier();
    setState(1469);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IS) {
      setState(1468);
      match(vhdlParser::KW_IS);
    }
    setState(1472);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(1471);
      generic_clause();
    }
    setState(1475);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PORT) {
      setState(1474);
      port_clause();
    }
    setState(1477);
    match(vhdlParser::KW_END);
    setState(1478);
    match(vhdlParser::KW_COMPONENT);
    setState(1480);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(1479);
      identifier();
    }
    setState(1482);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_template_declarationContext ------------------------------------------------------------------

vhdlParser::Group_template_declarationContext::Group_template_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Group_template_declarationContext::KW_GROUP() {
  return getToken(vhdlParser::KW_GROUP, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Group_template_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Group_template_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Group_template_declarationContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Entity_class_entry_listContext* vhdlParser::Group_template_declarationContext::entity_class_entry_list() {
  return getRuleContext<vhdlParser::Entity_class_entry_listContext>(0);
}

tree::TerminalNode* vhdlParser::Group_template_declarationContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Group_template_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Group_template_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleGroup_template_declaration;
}

void vhdlParser::Group_template_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroup_template_declaration(this);
}

void vhdlParser::Group_template_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroup_template_declaration(this);
}


std::any vhdlParser::Group_template_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGroup_template_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Group_template_declarationContext* vhdlParser::group_template_declaration() {
  Group_template_declarationContext *_localctx = _tracker.createInstance<Group_template_declarationContext>(_ctx, getState());
  enterRule(_localctx, 248, vhdlParser::RuleGroup_template_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1484);
    match(vhdlParser::KW_GROUP);
    setState(1485);
    identifier();
    setState(1486);
    match(vhdlParser::KW_IS);
    setState(1487);
    match(vhdlParser::LPAREN);
    setState(1488);
    entity_class_entry_list();
    setState(1489);
    match(vhdlParser::RPAREN);
    setState(1490);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_class_entry_listContext ------------------------------------------------------------------

vhdlParser::Entity_class_entry_listContext::Entity_class_entry_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::Entity_class_entryContext *> vhdlParser::Entity_class_entry_listContext::entity_class_entry() {
  return getRuleContexts<vhdlParser::Entity_class_entryContext>();
}

vhdlParser::Entity_class_entryContext* vhdlParser::Entity_class_entry_listContext::entity_class_entry(size_t i) {
  return getRuleContext<vhdlParser::Entity_class_entryContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Entity_class_entry_listContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Entity_class_entry_listContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Entity_class_entry_listContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_class_entry_list;
}

void vhdlParser::Entity_class_entry_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_class_entry_list(this);
}

void vhdlParser::Entity_class_entry_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_class_entry_list(this);
}


std::any vhdlParser::Entity_class_entry_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_class_entry_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_class_entry_listContext* vhdlParser::entity_class_entry_list() {
  Entity_class_entry_listContext *_localctx = _tracker.createInstance<Entity_class_entry_listContext>(_ctx, getState());
  enterRule(_localctx, 250, vhdlParser::RuleEntity_class_entry_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1492);
    entity_class_entry();
    setState(1497);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1493);
      match(vhdlParser::COMMA);
      setState(1494);
      entity_class_entry();
      setState(1499);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_class_entryContext ------------------------------------------------------------------

vhdlParser::Entity_class_entryContext::Entity_class_entryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Entity_classContext* vhdlParser::Entity_class_entryContext::entity_class() {
  return getRuleContext<vhdlParser::Entity_classContext>(0);
}

tree::TerminalNode* vhdlParser::Entity_class_entryContext::BOX() {
  return getToken(vhdlParser::BOX, 0);
}


size_t vhdlParser::Entity_class_entryContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_class_entry;
}

void vhdlParser::Entity_class_entryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_class_entry(this);
}

void vhdlParser::Entity_class_entryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_class_entry(this);
}


std::any vhdlParser::Entity_class_entryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_class_entry(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_class_entryContext* vhdlParser::entity_class_entry() {
  Entity_class_entryContext *_localctx = _tracker.createInstance<Entity_class_entryContext>(_ctx, getState());
  enterRule(_localctx, 252, vhdlParser::RuleEntity_class_entry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1500);
    entity_class();
    setState(1502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BOX) {
      setState(1501);
      match(vhdlParser::BOX);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_declarationContext ------------------------------------------------------------------

vhdlParser::Group_declarationContext::Group_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Group_declarationContext::KW_GROUP() {
  return getToken(vhdlParser::KW_GROUP, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Group_declarationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Group_declarationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::NameContext* vhdlParser::Group_declarationContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Group_declarationContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Group_constituent_listContext* vhdlParser::Group_declarationContext::group_constituent_list() {
  return getRuleContext<vhdlParser::Group_constituent_listContext>(0);
}

tree::TerminalNode* vhdlParser::Group_declarationContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Group_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Group_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleGroup_declaration;
}

void vhdlParser::Group_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroup_declaration(this);
}

void vhdlParser::Group_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroup_declaration(this);
}


std::any vhdlParser::Group_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGroup_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Group_declarationContext* vhdlParser::group_declaration() {
  Group_declarationContext *_localctx = _tracker.createInstance<Group_declarationContext>(_ctx, getState());
  enterRule(_localctx, 254, vhdlParser::RuleGroup_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1504);
    match(vhdlParser::KW_GROUP);
    setState(1505);
    identifier();
    setState(1506);
    match(vhdlParser::COLON);
    setState(1507);
    name(0);
    setState(1508);
    match(vhdlParser::LPAREN);
    setState(1509);
    group_constituent_list();
    setState(1510);
    match(vhdlParser::RPAREN);
    setState(1511);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_constituent_listContext ------------------------------------------------------------------

vhdlParser::Group_constituent_listContext::Group_constituent_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::Group_constituentContext *> vhdlParser::Group_constituent_listContext::group_constituent() {
  return getRuleContexts<vhdlParser::Group_constituentContext>();
}

vhdlParser::Group_constituentContext* vhdlParser::Group_constituent_listContext::group_constituent(size_t i) {
  return getRuleContext<vhdlParser::Group_constituentContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Group_constituent_listContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Group_constituent_listContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Group_constituent_listContext::getRuleIndex() const {
  return vhdlParser::RuleGroup_constituent_list;
}

void vhdlParser::Group_constituent_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroup_constituent_list(this);
}

void vhdlParser::Group_constituent_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroup_constituent_list(this);
}


std::any vhdlParser::Group_constituent_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGroup_constituent_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Group_constituent_listContext* vhdlParser::group_constituent_list() {
  Group_constituent_listContext *_localctx = _tracker.createInstance<Group_constituent_listContext>(_ctx, getState());
  enterRule(_localctx, 256, vhdlParser::RuleGroup_constituent_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1513);
    group_constituent();
    setState(1518);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1514);
      match(vhdlParser::COMMA);
      setState(1515);
      group_constituent();
      setState(1520);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_constituentContext ------------------------------------------------------------------

vhdlParser::Group_constituentContext::Group_constituentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::Group_constituentContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}


size_t vhdlParser::Group_constituentContext::getRuleIndex() const {
  return vhdlParser::RuleGroup_constituent;
}

void vhdlParser::Group_constituentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroup_constituent(this);
}

void vhdlParser::Group_constituentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroup_constituent(this);
}


std::any vhdlParser::Group_constituentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGroup_constituent(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Group_constituentContext* vhdlParser::group_constituent() {
  Group_constituentContext *_localctx = _tracker.createInstance<Group_constituentContext>(_ctx, getState());
  enterRule(_localctx, 258, vhdlParser::RuleGroup_constituent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1521);
    name(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_specificationContext ------------------------------------------------------------------

vhdlParser::Attribute_specificationContext::Attribute_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Attribute_specificationContext::KW_ATTRIBUTE() {
  return getToken(vhdlParser::KW_ATTRIBUTE, 0);
}

vhdlParser::Attribute_designatorContext* vhdlParser::Attribute_specificationContext::attribute_designator() {
  return getRuleContext<vhdlParser::Attribute_designatorContext>(0);
}

tree::TerminalNode* vhdlParser::Attribute_specificationContext::KW_OF() {
  return getToken(vhdlParser::KW_OF, 0);
}

vhdlParser::Entity_specificationContext* vhdlParser::Attribute_specificationContext::entity_specification() {
  return getRuleContext<vhdlParser::Entity_specificationContext>(0);
}

tree::TerminalNode* vhdlParser::Attribute_specificationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Attribute_specificationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Attribute_specificationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Attribute_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleAttribute_specification;
}

void vhdlParser::Attribute_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_specification(this);
}

void vhdlParser::Attribute_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_specification(this);
}


std::any vhdlParser::Attribute_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAttribute_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Attribute_specificationContext* vhdlParser::attribute_specification() {
  Attribute_specificationContext *_localctx = _tracker.createInstance<Attribute_specificationContext>(_ctx, getState());
  enterRule(_localctx, 260, vhdlParser::RuleAttribute_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1523);
    match(vhdlParser::KW_ATTRIBUTE);
    setState(1524);
    attribute_designator();
    setState(1525);
    match(vhdlParser::KW_OF);
    setState(1526);
    entity_specification();
    setState(1527);
    match(vhdlParser::KW_IS);
    setState(1528);
    expression(0);
    setState(1529);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_specificationContext ------------------------------------------------------------------

vhdlParser::Entity_specificationContext::Entity_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Entity_name_listContext* vhdlParser::Entity_specificationContext::entity_name_list() {
  return getRuleContext<vhdlParser::Entity_name_listContext>(0);
}

tree::TerminalNode* vhdlParser::Entity_specificationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Entity_classContext* vhdlParser::Entity_specificationContext::entity_class() {
  return getRuleContext<vhdlParser::Entity_classContext>(0);
}


size_t vhdlParser::Entity_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_specification;
}

void vhdlParser::Entity_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_specification(this);
}

void vhdlParser::Entity_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_specification(this);
}


std::any vhdlParser::Entity_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_specificationContext* vhdlParser::entity_specification() {
  Entity_specificationContext *_localctx = _tracker.createInstance<Entity_specificationContext>(_ctx, getState());
  enterRule(_localctx, 262, vhdlParser::RuleEntity_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1531);
    entity_name_list();
    setState(1532);
    match(vhdlParser::COLON);
    setState(1533);
    entity_class();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_classContext ------------------------------------------------------------------

vhdlParser::Entity_classContext::Entity_classContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_ENTITY() {
  return getToken(vhdlParser::KW_ENTITY, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_ARCHITECTURE() {
  return getToken(vhdlParser::KW_ARCHITECTURE, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_CONFIGURATION() {
  return getToken(vhdlParser::KW_CONFIGURATION, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_PROCEDURE() {
  return getToken(vhdlParser::KW_PROCEDURE, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_FUNCTION() {
  return getToken(vhdlParser::KW_FUNCTION, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_PACKAGE() {
  return getToken(vhdlParser::KW_PACKAGE, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_TYPE() {
  return getToken(vhdlParser::KW_TYPE, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_SUBTYPE() {
  return getToken(vhdlParser::KW_SUBTYPE, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_CONSTANT() {
  return getToken(vhdlParser::KW_CONSTANT, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_SIGNAL() {
  return getToken(vhdlParser::KW_SIGNAL, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_VARIABLE() {
  return getToken(vhdlParser::KW_VARIABLE, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_COMPONENT() {
  return getToken(vhdlParser::KW_COMPONENT, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_LABEL() {
  return getToken(vhdlParser::KW_LABEL, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_LITERAL() {
  return getToken(vhdlParser::KW_LITERAL, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_UNITS() {
  return getToken(vhdlParser::KW_UNITS, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_GROUP() {
  return getToken(vhdlParser::KW_GROUP, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_FILE() {
  return getToken(vhdlParser::KW_FILE, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_PROPERTY() {
  return getToken(vhdlParser::KW_PROPERTY, 0);
}

tree::TerminalNode* vhdlParser::Entity_classContext::KW_SEQUENCE() {
  return getToken(vhdlParser::KW_SEQUENCE, 0);
}


size_t vhdlParser::Entity_classContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_class;
}

void vhdlParser::Entity_classContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_class(this);
}

void vhdlParser::Entity_classContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_class(this);
}


std::any vhdlParser::Entity_classContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_class(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_classContext* vhdlParser::entity_class() {
  Entity_classContext *_localctx = _tracker.createInstance<Entity_classContext>(_ctx, getState());
  enterRule(_localctx, 264, vhdlParser::RuleEntity_class);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1535);
    _la = _input->LA(1);
    if (!(((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9218718061563830240) != 0 || (((_la - 82) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 82)) & 675875) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_name_listContext ------------------------------------------------------------------

vhdlParser::Entity_name_listContext::Entity_name_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::Entity_designatorContext *> vhdlParser::Entity_name_listContext::entity_designator() {
  return getRuleContexts<vhdlParser::Entity_designatorContext>();
}

vhdlParser::Entity_designatorContext* vhdlParser::Entity_name_listContext::entity_designator(size_t i) {
  return getRuleContext<vhdlParser::Entity_designatorContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Entity_name_listContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Entity_name_listContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}

tree::TerminalNode* vhdlParser::Entity_name_listContext::KW_OTHERS() {
  return getToken(vhdlParser::KW_OTHERS, 0);
}

tree::TerminalNode* vhdlParser::Entity_name_listContext::KW_ALL() {
  return getToken(vhdlParser::KW_ALL, 0);
}


size_t vhdlParser::Entity_name_listContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_name_list;
}

void vhdlParser::Entity_name_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_name_list(this);
}

void vhdlParser::Entity_name_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_name_list(this);
}


std::any vhdlParser::Entity_name_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_name_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_name_listContext* vhdlParser::entity_name_list() {
  Entity_name_listContext *_localctx = _tracker.createInstance<Entity_name_listContext>(_ctx, getState());
  enterRule(_localctx, 266, vhdlParser::RuleEntity_name_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1547);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1537);
        entity_designator();
        setState(1542);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == vhdlParser::COMMA) {
          setState(1538);
          match(vhdlParser::COMMA);
          setState(1539);
          entity_designator();
          setState(1544);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case vhdlParser::KW_OTHERS: {
        enterOuterAlt(_localctx, 2);
        setState(1545);
        match(vhdlParser::KW_OTHERS);
        break;
      }

      case vhdlParser::KW_ALL: {
        enterOuterAlt(_localctx, 3);
        setState(1546);
        match(vhdlParser::KW_ALL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_designatorContext ------------------------------------------------------------------

vhdlParser::Entity_designatorContext::Entity_designatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Entity_tagContext* vhdlParser::Entity_designatorContext::entity_tag() {
  return getRuleContext<vhdlParser::Entity_tagContext>(0);
}

vhdlParser::SignatureContext* vhdlParser::Entity_designatorContext::signature() {
  return getRuleContext<vhdlParser::SignatureContext>(0);
}


size_t vhdlParser::Entity_designatorContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_designator;
}

void vhdlParser::Entity_designatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_designator(this);
}

void vhdlParser::Entity_designatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_designator(this);
}


std::any vhdlParser::Entity_designatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_designator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_designatorContext* vhdlParser::entity_designator() {
  Entity_designatorContext *_localctx = _tracker.createInstance<Entity_designatorContext>(_ctx, getState());
  enterRule(_localctx, 268, vhdlParser::RuleEntity_designator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1549);
    entity_tag();
    setState(1551);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::LSQUARE_BR) {
      setState(1550);
      signature();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_tagContext ------------------------------------------------------------------

vhdlParser::Entity_tagContext::Entity_tagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Entity_tagContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Entity_tagContext::CHARACTER_LITERAL() {
  return getToken(vhdlParser::CHARACTER_LITERAL, 0);
}

vhdlParser::Operator_symbolContext* vhdlParser::Entity_tagContext::operator_symbol() {
  return getRuleContext<vhdlParser::Operator_symbolContext>(0);
}


size_t vhdlParser::Entity_tagContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_tag;
}

void vhdlParser::Entity_tagContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_tag(this);
}

void vhdlParser::Entity_tagContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_tag(this);
}


std::any vhdlParser::Entity_tagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_tag(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_tagContext* vhdlParser::entity_tag() {
  Entity_tagContext *_localctx = _tracker.createInstance<Entity_tagContext>(_ctx, getState());
  enterRule(_localctx, 270, vhdlParser::RuleEntity_tag);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1556);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1553);
        identifier();
        break;
      }

      case vhdlParser::CHARACTER_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1554);
        match(vhdlParser::CHARACTER_LITERAL);
        break;
      }

      case vhdlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1555);
        operator_symbol();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Configuration_specificationContext ------------------------------------------------------------------

vhdlParser::Configuration_specificationContext::Configuration_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Simple_configuration_specificationContext* vhdlParser::Configuration_specificationContext::simple_configuration_specification() {
  return getRuleContext<vhdlParser::Simple_configuration_specificationContext>(0);
}

vhdlParser::Compound_configuration_specificationContext* vhdlParser::Configuration_specificationContext::compound_configuration_specification() {
  return getRuleContext<vhdlParser::Compound_configuration_specificationContext>(0);
}


size_t vhdlParser::Configuration_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleConfiguration_specification;
}

void vhdlParser::Configuration_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfiguration_specification(this);
}

void vhdlParser::Configuration_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfiguration_specification(this);
}


std::any vhdlParser::Configuration_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConfiguration_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Configuration_specificationContext* vhdlParser::configuration_specification() {
  Configuration_specificationContext *_localctx = _tracker.createInstance<Configuration_specificationContext>(_ctx, getState());
  enterRule(_localctx, 272, vhdlParser::RuleConfiguration_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1560);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1558);
      simple_configuration_specification();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1559);
      compound_configuration_specification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_configuration_specificationContext ------------------------------------------------------------------

vhdlParser::Simple_configuration_specificationContext::Simple_configuration_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Simple_configuration_specificationContext::KW_FOR() {
  return getTokens(vhdlParser::KW_FOR);
}

tree::TerminalNode* vhdlParser::Simple_configuration_specificationContext::KW_FOR(size_t i) {
  return getToken(vhdlParser::KW_FOR, i);
}

vhdlParser::Component_specificationContext* vhdlParser::Simple_configuration_specificationContext::component_specification() {
  return getRuleContext<vhdlParser::Component_specificationContext>(0);
}

vhdlParser::Binding_indicationContext* vhdlParser::Simple_configuration_specificationContext::binding_indication() {
  return getRuleContext<vhdlParser::Binding_indicationContext>(0);
}

std::vector<tree::TerminalNode *> vhdlParser::Simple_configuration_specificationContext::SEMI() {
  return getTokens(vhdlParser::SEMI);
}

tree::TerminalNode* vhdlParser::Simple_configuration_specificationContext::SEMI(size_t i) {
  return getToken(vhdlParser::SEMI, i);
}

tree::TerminalNode* vhdlParser::Simple_configuration_specificationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}


size_t vhdlParser::Simple_configuration_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleSimple_configuration_specification;
}

void vhdlParser::Simple_configuration_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_configuration_specification(this);
}

void vhdlParser::Simple_configuration_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_configuration_specification(this);
}


std::any vhdlParser::Simple_configuration_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSimple_configuration_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Simple_configuration_specificationContext* vhdlParser::simple_configuration_specification() {
  Simple_configuration_specificationContext *_localctx = _tracker.createInstance<Simple_configuration_specificationContext>(_ctx, getState());
  enterRule(_localctx, 274, vhdlParser::RuleSimple_configuration_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1562);
    match(vhdlParser::KW_FOR);
    setState(1563);
    component_specification();
    setState(1564);
    binding_indication();
    setState(1565);
    match(vhdlParser::SEMI);
    setState(1569);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_END) {
      setState(1566);
      match(vhdlParser::KW_END);
      setState(1567);
      match(vhdlParser::KW_FOR);
      setState(1568);
      match(vhdlParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_configuration_specificationContext ------------------------------------------------------------------

vhdlParser::Compound_configuration_specificationContext::Compound_configuration_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Compound_configuration_specificationContext::KW_FOR() {
  return getTokens(vhdlParser::KW_FOR);
}

tree::TerminalNode* vhdlParser::Compound_configuration_specificationContext::KW_FOR(size_t i) {
  return getToken(vhdlParser::KW_FOR, i);
}

vhdlParser::Component_specificationContext* vhdlParser::Compound_configuration_specificationContext::component_specification() {
  return getRuleContext<vhdlParser::Component_specificationContext>(0);
}

vhdlParser::Binding_indicationContext* vhdlParser::Compound_configuration_specificationContext::binding_indication() {
  return getRuleContext<vhdlParser::Binding_indicationContext>(0);
}

std::vector<tree::TerminalNode *> vhdlParser::Compound_configuration_specificationContext::SEMI() {
  return getTokens(vhdlParser::SEMI);
}

tree::TerminalNode* vhdlParser::Compound_configuration_specificationContext::SEMI(size_t i) {
  return getToken(vhdlParser::SEMI, i);
}

tree::TerminalNode* vhdlParser::Compound_configuration_specificationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

std::vector<vhdlParser::Verification_unit_binding_indicationContext *> vhdlParser::Compound_configuration_specificationContext::verification_unit_binding_indication() {
  return getRuleContexts<vhdlParser::Verification_unit_binding_indicationContext>();
}

vhdlParser::Verification_unit_binding_indicationContext* vhdlParser::Compound_configuration_specificationContext::verification_unit_binding_indication(size_t i) {
  return getRuleContext<vhdlParser::Verification_unit_binding_indicationContext>(i);
}


size_t vhdlParser::Compound_configuration_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleCompound_configuration_specification;
}

void vhdlParser::Compound_configuration_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompound_configuration_specification(this);
}

void vhdlParser::Compound_configuration_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompound_configuration_specification(this);
}


std::any vhdlParser::Compound_configuration_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitCompound_configuration_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Compound_configuration_specificationContext* vhdlParser::compound_configuration_specification() {
  Compound_configuration_specificationContext *_localctx = _tracker.createInstance<Compound_configuration_specificationContext>(_ctx, getState());
  enterRule(_localctx, 276, vhdlParser::RuleCompound_configuration_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1571);
    match(vhdlParser::KW_FOR);
    setState(1572);
    component_specification();
    setState(1573);
    binding_indication();
    setState(1574);
    match(vhdlParser::SEMI);
    setState(1578); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1575);
      verification_unit_binding_indication();
      setState(1576);
      match(vhdlParser::SEMI);
      setState(1580); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == vhdlParser::KW_USE);
    setState(1582);
    match(vhdlParser::KW_END);
    setState(1583);
    match(vhdlParser::KW_FOR);
    setState(1584);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_specificationContext ------------------------------------------------------------------

vhdlParser::Component_specificationContext::Component_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Instantiation_listContext* vhdlParser::Component_specificationContext::instantiation_list() {
  return getRuleContext<vhdlParser::Instantiation_listContext>(0);
}

tree::TerminalNode* vhdlParser::Component_specificationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::NameContext* vhdlParser::Component_specificationContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}


size_t vhdlParser::Component_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleComponent_specification;
}

void vhdlParser::Component_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_specification(this);
}

void vhdlParser::Component_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_specification(this);
}


std::any vhdlParser::Component_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitComponent_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Component_specificationContext* vhdlParser::component_specification() {
  Component_specificationContext *_localctx = _tracker.createInstance<Component_specificationContext>(_ctx, getState());
  enterRule(_localctx, 278, vhdlParser::RuleComponent_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1586);
    instantiation_list();
    setState(1587);
    match(vhdlParser::COLON);
    setState(1588);
    name(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Instantiation_listContext ------------------------------------------------------------------

vhdlParser::Instantiation_listContext::Instantiation_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::LabelContext *> vhdlParser::Instantiation_listContext::label() {
  return getRuleContexts<vhdlParser::LabelContext>();
}

vhdlParser::LabelContext* vhdlParser::Instantiation_listContext::label(size_t i) {
  return getRuleContext<vhdlParser::LabelContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Instantiation_listContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Instantiation_listContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}

tree::TerminalNode* vhdlParser::Instantiation_listContext::KW_OTHERS() {
  return getToken(vhdlParser::KW_OTHERS, 0);
}

tree::TerminalNode* vhdlParser::Instantiation_listContext::KW_ALL() {
  return getToken(vhdlParser::KW_ALL, 0);
}


size_t vhdlParser::Instantiation_listContext::getRuleIndex() const {
  return vhdlParser::RuleInstantiation_list;
}

void vhdlParser::Instantiation_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstantiation_list(this);
}

void vhdlParser::Instantiation_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstantiation_list(this);
}


std::any vhdlParser::Instantiation_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInstantiation_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Instantiation_listContext* vhdlParser::instantiation_list() {
  Instantiation_listContext *_localctx = _tracker.createInstance<Instantiation_listContext>(_ctx, getState());
  enterRule(_localctx, 280, vhdlParser::RuleInstantiation_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1600);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1590);
        label();
        setState(1595);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == vhdlParser::COMMA) {
          setState(1591);
          match(vhdlParser::COMMA);
          setState(1592);
          label();
          setState(1597);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case vhdlParser::KW_OTHERS: {
        enterOuterAlt(_localctx, 2);
        setState(1598);
        match(vhdlParser::KW_OTHERS);
        break;
      }

      case vhdlParser::KW_ALL: {
        enterOuterAlt(_localctx, 3);
        setState(1599);
        match(vhdlParser::KW_ALL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binding_indicationContext ------------------------------------------------------------------

vhdlParser::Binding_indicationContext::Binding_indicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Binding_indicationContext::KW_USE() {
  return getToken(vhdlParser::KW_USE, 0);
}

vhdlParser::Entity_aspectContext* vhdlParser::Binding_indicationContext::entity_aspect() {
  return getRuleContext<vhdlParser::Entity_aspectContext>(0);
}

vhdlParser::Generic_map_aspectContext* vhdlParser::Binding_indicationContext::generic_map_aspect() {
  return getRuleContext<vhdlParser::Generic_map_aspectContext>(0);
}

vhdlParser::Port_map_aspectContext* vhdlParser::Binding_indicationContext::port_map_aspect() {
  return getRuleContext<vhdlParser::Port_map_aspectContext>(0);
}


size_t vhdlParser::Binding_indicationContext::getRuleIndex() const {
  return vhdlParser::RuleBinding_indication;
}

void vhdlParser::Binding_indicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinding_indication(this);
}

void vhdlParser::Binding_indicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinding_indication(this);
}


std::any vhdlParser::Binding_indicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitBinding_indication(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Binding_indicationContext* vhdlParser::binding_indication() {
  Binding_indicationContext *_localctx = _tracker.createInstance<Binding_indicationContext>(_ctx, getState());
  enterRule(_localctx, 282, vhdlParser::RuleBinding_indication);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_USE) {
      setState(1602);
      match(vhdlParser::KW_USE);
      setState(1603);
      entity_aspect();
    }
    setState(1607);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(1606);
      generic_map_aspect();
    }
    setState(1610);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PORT) {
      setState(1609);
      port_map_aspect();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entity_aspectContext ------------------------------------------------------------------

vhdlParser::Entity_aspectContext::Entity_aspectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Entity_aspectContext::KW_ENTITY() {
  return getToken(vhdlParser::KW_ENTITY, 0);
}

vhdlParser::NameContext* vhdlParser::Entity_aspectContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Entity_aspectContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Entity_aspectContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Entity_aspectContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Entity_aspectContext::KW_CONFIGURATION() {
  return getToken(vhdlParser::KW_CONFIGURATION, 0);
}

tree::TerminalNode* vhdlParser::Entity_aspectContext::KW_OPEN() {
  return getToken(vhdlParser::KW_OPEN, 0);
}


size_t vhdlParser::Entity_aspectContext::getRuleIndex() const {
  return vhdlParser::RuleEntity_aspect;
}

void vhdlParser::Entity_aspectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntity_aspect(this);
}

void vhdlParser::Entity_aspectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntity_aspect(this);
}


std::any vhdlParser::Entity_aspectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitEntity_aspect(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Entity_aspectContext* vhdlParser::entity_aspect() {
  Entity_aspectContext *_localctx = _tracker.createInstance<Entity_aspectContext>(_ctx, getState());
  enterRule(_localctx, 284, vhdlParser::RuleEntity_aspect);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1623);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_ENTITY: {
        enterOuterAlt(_localctx, 1);
        setState(1612);
        match(vhdlParser::KW_ENTITY);
        setState(1613);
        name(0);
        setState(1618);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == vhdlParser::LPAREN) {
          setState(1614);
          match(vhdlParser::LPAREN);
          setState(1615);
          identifier();
          setState(1616);
          match(vhdlParser::RPAREN);
        }
        break;
      }

      case vhdlParser::KW_CONFIGURATION: {
        enterOuterAlt(_localctx, 2);
        setState(1620);
        match(vhdlParser::KW_CONFIGURATION);
        setState(1621);
        name(0);
        break;
      }

      case vhdlParser::KW_OPEN: {
        enterOuterAlt(_localctx, 3);
        setState(1622);
        match(vhdlParser::KW_OPEN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Verification_unit_binding_indicationContext ------------------------------------------------------------------

vhdlParser::Verification_unit_binding_indicationContext::Verification_unit_binding_indicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Verification_unit_binding_indicationContext::KW_USE() {
  return getToken(vhdlParser::KW_USE, 0);
}

tree::TerminalNode* vhdlParser::Verification_unit_binding_indicationContext::KW_VUNIT() {
  return getToken(vhdlParser::KW_VUNIT, 0);
}

vhdlParser::Verification_unit_listContext* vhdlParser::Verification_unit_binding_indicationContext::verification_unit_list() {
  return getRuleContext<vhdlParser::Verification_unit_listContext>(0);
}


size_t vhdlParser::Verification_unit_binding_indicationContext::getRuleIndex() const {
  return vhdlParser::RuleVerification_unit_binding_indication;
}

void vhdlParser::Verification_unit_binding_indicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVerification_unit_binding_indication(this);
}

void vhdlParser::Verification_unit_binding_indicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVerification_unit_binding_indication(this);
}


std::any vhdlParser::Verification_unit_binding_indicationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitVerification_unit_binding_indication(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Verification_unit_binding_indicationContext* vhdlParser::verification_unit_binding_indication() {
  Verification_unit_binding_indicationContext *_localctx = _tracker.createInstance<Verification_unit_binding_indicationContext>(_ctx, getState());
  enterRule(_localctx, 286, vhdlParser::RuleVerification_unit_binding_indication);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1625);
    match(vhdlParser::KW_USE);
    setState(1626);
    match(vhdlParser::KW_VUNIT);
    setState(1627);
    verification_unit_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Verification_unit_listContext ------------------------------------------------------------------

vhdlParser::Verification_unit_listContext::Verification_unit_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::NameContext *> vhdlParser::Verification_unit_listContext::name() {
  return getRuleContexts<vhdlParser::NameContext>();
}

vhdlParser::NameContext* vhdlParser::Verification_unit_listContext::name(size_t i) {
  return getRuleContext<vhdlParser::NameContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Verification_unit_listContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Verification_unit_listContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Verification_unit_listContext::getRuleIndex() const {
  return vhdlParser::RuleVerification_unit_list;
}

void vhdlParser::Verification_unit_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVerification_unit_list(this);
}

void vhdlParser::Verification_unit_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVerification_unit_list(this);
}


std::any vhdlParser::Verification_unit_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitVerification_unit_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Verification_unit_listContext* vhdlParser::verification_unit_list() {
  Verification_unit_listContext *_localctx = _tracker.createInstance<Verification_unit_listContext>(_ctx, getState());
  enterRule(_localctx, 288, vhdlParser::RuleVerification_unit_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1629);
    name(0);
    setState(1634);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1630);
      match(vhdlParser::COMMA);
      setState(1631);
      name(0);
      setState(1636);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Disconnection_specificationContext ------------------------------------------------------------------

vhdlParser::Disconnection_specificationContext::Disconnection_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Disconnection_specificationContext::KW_DISCONNECT() {
  return getToken(vhdlParser::KW_DISCONNECT, 0);
}

vhdlParser::Guarded_signal_specificationContext* vhdlParser::Disconnection_specificationContext::guarded_signal_specification() {
  return getRuleContext<vhdlParser::Guarded_signal_specificationContext>(0);
}

tree::TerminalNode* vhdlParser::Disconnection_specificationContext::KW_AFTER() {
  return getToken(vhdlParser::KW_AFTER, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Disconnection_specificationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Disconnection_specificationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Disconnection_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleDisconnection_specification;
}

void vhdlParser::Disconnection_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisconnection_specification(this);
}

void vhdlParser::Disconnection_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisconnection_specification(this);
}


std::any vhdlParser::Disconnection_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitDisconnection_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Disconnection_specificationContext* vhdlParser::disconnection_specification() {
  Disconnection_specificationContext *_localctx = _tracker.createInstance<Disconnection_specificationContext>(_ctx, getState());
  enterRule(_localctx, 290, vhdlParser::RuleDisconnection_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1637);
    match(vhdlParser::KW_DISCONNECT);
    setState(1638);
    guarded_signal_specification();
    setState(1639);
    match(vhdlParser::KW_AFTER);
    setState(1640);
    expression(0);
    setState(1641);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Guarded_signal_specificationContext ------------------------------------------------------------------

vhdlParser::Guarded_signal_specificationContext::Guarded_signal_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Signal_listContext* vhdlParser::Guarded_signal_specificationContext::signal_list() {
  return getRuleContext<vhdlParser::Signal_listContext>(0);
}

tree::TerminalNode* vhdlParser::Guarded_signal_specificationContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Type_markContext* vhdlParser::Guarded_signal_specificationContext::type_mark() {
  return getRuleContext<vhdlParser::Type_markContext>(0);
}


size_t vhdlParser::Guarded_signal_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleGuarded_signal_specification;
}

void vhdlParser::Guarded_signal_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGuarded_signal_specification(this);
}

void vhdlParser::Guarded_signal_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGuarded_signal_specification(this);
}


std::any vhdlParser::Guarded_signal_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGuarded_signal_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Guarded_signal_specificationContext* vhdlParser::guarded_signal_specification() {
  Guarded_signal_specificationContext *_localctx = _tracker.createInstance<Guarded_signal_specificationContext>(_ctx, getState());
  enterRule(_localctx, 292, vhdlParser::RuleGuarded_signal_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1643);
    signal_list();
    setState(1644);
    match(vhdlParser::COLON);
    setState(1645);
    type_mark();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signal_listContext ------------------------------------------------------------------

vhdlParser::Signal_listContext::Signal_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::NameContext *> vhdlParser::Signal_listContext::name() {
  return getRuleContexts<vhdlParser::NameContext>();
}

vhdlParser::NameContext* vhdlParser::Signal_listContext::name(size_t i) {
  return getRuleContext<vhdlParser::NameContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Signal_listContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Signal_listContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}

tree::TerminalNode* vhdlParser::Signal_listContext::KW_OTHERS() {
  return getToken(vhdlParser::KW_OTHERS, 0);
}

tree::TerminalNode* vhdlParser::Signal_listContext::KW_ALL() {
  return getToken(vhdlParser::KW_ALL, 0);
}


size_t vhdlParser::Signal_listContext::getRuleIndex() const {
  return vhdlParser::RuleSignal_list;
}

void vhdlParser::Signal_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSignal_list(this);
}

void vhdlParser::Signal_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSignal_list(this);
}


std::any vhdlParser::Signal_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSignal_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Signal_listContext* vhdlParser::signal_list() {
  Signal_listContext *_localctx = _tracker.createInstance<Signal_listContext>(_ctx, getState());
  enterRule(_localctx, 294, vhdlParser::RuleSignal_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1657);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::SHIFT_LEFT: {
        enterOuterAlt(_localctx, 1);
        setState(1647);
        name(0);
        setState(1652);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == vhdlParser::COMMA) {
          setState(1648);
          match(vhdlParser::COMMA);
          setState(1649);
          name(0);
          setState(1654);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case vhdlParser::KW_OTHERS: {
        enterOuterAlt(_localctx, 2);
        setState(1655);
        match(vhdlParser::KW_OTHERS);
        break;
      }

      case vhdlParser::KW_ALL: {
        enterOuterAlt(_localctx, 3);
        setState(1656);
        match(vhdlParser::KW_ALL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_designatorContext ------------------------------------------------------------------

vhdlParser::Attribute_designatorContext::Attribute_designatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Attribute_designatorContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

vhdlParser::Any_keywordContext* vhdlParser::Attribute_designatorContext::any_keyword() {
  return getRuleContext<vhdlParser::Any_keywordContext>(0);
}


size_t vhdlParser::Attribute_designatorContext::getRuleIndex() const {
  return vhdlParser::RuleAttribute_designator;
}

void vhdlParser::Attribute_designatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_designator(this);
}

void vhdlParser::Attribute_designatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_designator(this);
}


std::any vhdlParser::Attribute_designatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAttribute_designator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Attribute_designatorContext* vhdlParser::attribute_designator() {
  Attribute_designatorContext *_localctx = _tracker.createInstance<Attribute_designatorContext>(_ctx, getState());
  enterRule(_localctx, 296, vhdlParser::RuleAttribute_designator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1661);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1659);
        identifier();
        break;
      }

      case vhdlParser::KW_PROCESS:
      case vhdlParser::KW_CONTEXT:
      case vhdlParser::KW_POSTPONED:
      case vhdlParser::KW_LINKAGE:
      case vhdlParser::KW_COMPONENT:
      case vhdlParser::KW_ABS:
      case vhdlParser::KW_DEFAULT:
      case vhdlParser::KW_THEN:
      case vhdlParser::KW_BLOCK:
      case vhdlParser::KW_REM:
      case vhdlParser::KW_INERTIAL:
      case vhdlParser::KW_NEXT:
      case vhdlParser::KW_ENTITY:
      case vhdlParser::KW_ON:
      case vhdlParser::KW_GROUP:
      case vhdlParser::KW_XNOR:
      case vhdlParser::KW_FILE:
      case vhdlParser::KW_PURE:
      case vhdlParser::KW_GUARDED:
      case vhdlParser::KW_GENERIC:
      case vhdlParser::KW_RANGE:
      case vhdlParser::KW_ELSE:
      case vhdlParser::KW_USE:
      case vhdlParser::KW_SHARED:
      case vhdlParser::KW_MOD:
      case vhdlParser::KW_LOOP:
      case vhdlParser::KW_RECORD:
      case vhdlParser::KW_SIGNAL:
      case vhdlParser::KW_REJECT:
      case vhdlParser::KW_BEGIN:
      case vhdlParser::KW_SLA:
      case vhdlParser::KW_DISCONNECT:
      case vhdlParser::KW_OF:
      case vhdlParser::KW_PROCEDURE:
      case vhdlParser::KW_SRL:
      case vhdlParser::KW_VUNIT:
      case vhdlParser::KW_ATTRIBUTE:
      case vhdlParser::KW_VARIABLE:
      case vhdlParser::KW_PROPERTY:
      case vhdlParser::KW_UNAFFECTED:
      case vhdlParser::KW_XOR:
      case vhdlParser::KW_REGISTER:
      case vhdlParser::KW_SUBTYPE:
      case vhdlParser::KW_TO:
      case vhdlParser::KW_NEW:
      case vhdlParser::KW_REPORT:
      case vhdlParser::KW_CONSTANT:
      case vhdlParser::KW_BUFFER:
      case vhdlParser::KW_BODY:
      case vhdlParser::KW_AFTER:
      case vhdlParser::KW_TRANSPORT:
      case vhdlParser::KW_FUNCTION:
      case vhdlParser::KW_END:
      case vhdlParser::KW_SELECT:
      case vhdlParser::KW_OR:
      case vhdlParser::KW_LIBRARY:
      case vhdlParser::KW_ELSIF:
      case vhdlParser::KW_SLL:
      case vhdlParser::KW_MAP:
      case vhdlParser::KW_SRA:
      case vhdlParser::KW_PROTECTED:
      case vhdlParser::KW_DOWNTO:
      case vhdlParser::KW_LABEL:
      case vhdlParser::KW_ALL:
      case vhdlParser::KW_ALIAS:
      case vhdlParser::KW_GENERATE:
      case vhdlParser::KW_NOR:
      case vhdlParser::KW_IN:
      case vhdlParser::KW_RELEASE:
      case vhdlParser::KW_EXIT:
      case vhdlParser::KW_RETURN:
      case vhdlParser::KW_WITH:
      case vhdlParser::KW_UNTIL:
      case vhdlParser::KW_AND:
      case vhdlParser::KW_INOUT:
      case vhdlParser::KW_WAIT:
      case vhdlParser::KW_NAND:
      case vhdlParser::KW_ARRAY:
      case vhdlParser::KW_FORCE:
      case vhdlParser::KW_WHILE:
      case vhdlParser::KW_IMPURE:
      case vhdlParser::KW_PACKAGE:
      case vhdlParser::KW_UNITS:
      case vhdlParser::KW_ASSERT:
      case vhdlParser::KW_PARAMETER:
      case vhdlParser::KW_SEVERITY:
      case vhdlParser::KW_LITERAL:
      case vhdlParser::KW_FOR:
      case vhdlParser::KW_ROR:
      case vhdlParser::KW_IF:
      case vhdlParser::KW_OUT:
      case vhdlParser::KW_ROL:
      case vhdlParser::KW_IS:
      case vhdlParser::KW_SEQUENCE:
      case vhdlParser::KW_OTHERS:
      case vhdlParser::KW_TYPE:
      case vhdlParser::KW_CASE:
      case vhdlParser::KW_NOT:
      case vhdlParser::KW_CONFIGURATION:
      case vhdlParser::KW_OPEN:
      case vhdlParser::KW_ARCHITECTURE:
      case vhdlParser::KW_BUS:
      case vhdlParser::KW_ACCESS:
      case vhdlParser::KW_WHEN:
      case vhdlParser::KW_PORT:
      case vhdlParser::KW_NULL: {
        enterOuterAlt(_localctx, 2);
        setState(1660);
        any_keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- External_nameContext ------------------------------------------------------------------

vhdlParser::External_nameContext::External_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::External_nameContext::SHIFT_LEFT() {
  return getToken(vhdlParser::SHIFT_LEFT, 0);
}

vhdlParser::External_pathnameContext* vhdlParser::External_nameContext::external_pathname() {
  return getRuleContext<vhdlParser::External_pathnameContext>(0);
}

tree::TerminalNode* vhdlParser::External_nameContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::External_nameContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* vhdlParser::External_nameContext::SHIFT_RIGHT() {
  return getToken(vhdlParser::SHIFT_RIGHT, 0);
}

tree::TerminalNode* vhdlParser::External_nameContext::KW_VARIABLE() {
  return getToken(vhdlParser::KW_VARIABLE, 0);
}

tree::TerminalNode* vhdlParser::External_nameContext::KW_CONSTANT() {
  return getToken(vhdlParser::KW_CONSTANT, 0);
}

tree::TerminalNode* vhdlParser::External_nameContext::KW_SIGNAL() {
  return getToken(vhdlParser::KW_SIGNAL, 0);
}


size_t vhdlParser::External_nameContext::getRuleIndex() const {
  return vhdlParser::RuleExternal_name;
}

void vhdlParser::External_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternal_name(this);
}

void vhdlParser::External_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternal_name(this);
}


std::any vhdlParser::External_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitExternal_name(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::External_nameContext* vhdlParser::external_name() {
  External_nameContext *_localctx = _tracker.createInstance<External_nameContext>(_ctx, getState());
  enterRule(_localctx, 298, vhdlParser::RuleExternal_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1663);
    match(vhdlParser::SHIFT_LEFT);
    setState(1664);
    _la = _input->LA(1);
    if (!(((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 141012634697728) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1665);
    external_pathname();
    setState(1666);
    match(vhdlParser::COLON);
    setState(1667);
    subtype_indication();
    setState(1668);
    match(vhdlParser::SHIFT_RIGHT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- External_pathnameContext ------------------------------------------------------------------

vhdlParser::External_pathnameContext::External_pathnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Package_pathnameContext* vhdlParser::External_pathnameContext::package_pathname() {
  return getRuleContext<vhdlParser::Package_pathnameContext>(0);
}

vhdlParser::Absolute_pathnameContext* vhdlParser::External_pathnameContext::absolute_pathname() {
  return getRuleContext<vhdlParser::Absolute_pathnameContext>(0);
}

vhdlParser::Relative_pathnameContext* vhdlParser::External_pathnameContext::relative_pathname() {
  return getRuleContext<vhdlParser::Relative_pathnameContext>(0);
}


size_t vhdlParser::External_pathnameContext::getRuleIndex() const {
  return vhdlParser::RuleExternal_pathname;
}

void vhdlParser::External_pathnameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternal_pathname(this);
}

void vhdlParser::External_pathnameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternal_pathname(this);
}


std::any vhdlParser::External_pathnameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitExternal_pathname(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::External_pathnameContext* vhdlParser::external_pathname() {
  External_pathnameContext *_localctx = _tracker.createInstance<External_pathnameContext>(_ctx, getState());
  enterRule(_localctx, 300, vhdlParser::RuleExternal_pathname);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1673);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1670);
        package_pathname();
        break;
      }

      case vhdlParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1671);
        absolute_pathname();
        break;
      }

      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::UP: {
        enterOuterAlt(_localctx, 3);
        setState(1672);
        relative_pathname();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_pathnameContext ------------------------------------------------------------------

vhdlParser::Package_pathnameContext::Package_pathnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Package_pathnameContext::AT() {
  return getToken(vhdlParser::AT, 0);
}

std::vector<vhdlParser::IdentifierContext *> vhdlParser::Package_pathnameContext::identifier() {
  return getRuleContexts<vhdlParser::IdentifierContext>();
}

vhdlParser::IdentifierContext* vhdlParser::Package_pathnameContext::identifier(size_t i) {
  return getRuleContext<vhdlParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Package_pathnameContext::DOT() {
  return getTokens(vhdlParser::DOT);
}

tree::TerminalNode* vhdlParser::Package_pathnameContext::DOT(size_t i) {
  return getToken(vhdlParser::DOT, i);
}


size_t vhdlParser::Package_pathnameContext::getRuleIndex() const {
  return vhdlParser::RulePackage_pathname;
}

void vhdlParser::Package_pathnameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_pathname(this);
}

void vhdlParser::Package_pathnameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_pathname(this);
}


std::any vhdlParser::Package_pathnameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPackage_pathname(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Package_pathnameContext* vhdlParser::package_pathname() {
  Package_pathnameContext *_localctx = _tracker.createInstance<Package_pathnameContext>(_ctx, getState());
  enterRule(_localctx, 302, vhdlParser::RulePackage_pathname);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1675);
    match(vhdlParser::AT);
    setState(1676);
    identifier();
    setState(1677);
    match(vhdlParser::DOT);
    setState(1678);
    identifier();
    setState(1679);
    match(vhdlParser::DOT);
    setState(1680);
    identifier();
    setState(1685);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::DOT) {
      setState(1681);
      match(vhdlParser::DOT);
      setState(1682);
      identifier();
      setState(1687);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Absolute_pathnameContext ------------------------------------------------------------------

vhdlParser::Absolute_pathnameContext::Absolute_pathnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Absolute_pathnameContext::DOT() {
  return getToken(vhdlParser::DOT, 0);
}

vhdlParser::Partial_pathnameContext* vhdlParser::Absolute_pathnameContext::partial_pathname() {
  return getRuleContext<vhdlParser::Partial_pathnameContext>(0);
}


size_t vhdlParser::Absolute_pathnameContext::getRuleIndex() const {
  return vhdlParser::RuleAbsolute_pathname;
}

void vhdlParser::Absolute_pathnameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbsolute_pathname(this);
}

void vhdlParser::Absolute_pathnameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbsolute_pathname(this);
}


std::any vhdlParser::Absolute_pathnameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAbsolute_pathname(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Absolute_pathnameContext* vhdlParser::absolute_pathname() {
  Absolute_pathnameContext *_localctx = _tracker.createInstance<Absolute_pathnameContext>(_ctx, getState());
  enterRule(_localctx, 304, vhdlParser::RuleAbsolute_pathname);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1688);
    match(vhdlParser::DOT);
    setState(1689);
    partial_pathname();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relative_pathnameContext ------------------------------------------------------------------

vhdlParser::Relative_pathnameContext::Relative_pathnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Partial_pathnameContext* vhdlParser::Relative_pathnameContext::partial_pathname() {
  return getRuleContext<vhdlParser::Partial_pathnameContext>(0);
}

std::vector<tree::TerminalNode *> vhdlParser::Relative_pathnameContext::UP() {
  return getTokens(vhdlParser::UP);
}

tree::TerminalNode* vhdlParser::Relative_pathnameContext::UP(size_t i) {
  return getToken(vhdlParser::UP, i);
}

std::vector<tree::TerminalNode *> vhdlParser::Relative_pathnameContext::DOT() {
  return getTokens(vhdlParser::DOT);
}

tree::TerminalNode* vhdlParser::Relative_pathnameContext::DOT(size_t i) {
  return getToken(vhdlParser::DOT, i);
}


size_t vhdlParser::Relative_pathnameContext::getRuleIndex() const {
  return vhdlParser::RuleRelative_pathname;
}

void vhdlParser::Relative_pathnameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelative_pathname(this);
}

void vhdlParser::Relative_pathnameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelative_pathname(this);
}


std::any vhdlParser::Relative_pathnameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitRelative_pathname(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Relative_pathnameContext* vhdlParser::relative_pathname() {
  Relative_pathnameContext *_localctx = _tracker.createInstance<Relative_pathnameContext>(_ctx, getState());
  enterRule(_localctx, 306, vhdlParser::RuleRelative_pathname);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1695);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::UP) {
      setState(1691);
      match(vhdlParser::UP);
      setState(1692);
      match(vhdlParser::DOT);
      setState(1697);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1698);
    partial_pathname();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partial_pathnameContext ------------------------------------------------------------------

vhdlParser::Partial_pathnameContext::Partial_pathnameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Partial_pathnameContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

std::vector<vhdlParser::Pathname_elementContext *> vhdlParser::Partial_pathnameContext::pathname_element() {
  return getRuleContexts<vhdlParser::Pathname_elementContext>();
}

vhdlParser::Pathname_elementContext* vhdlParser::Partial_pathnameContext::pathname_element(size_t i) {
  return getRuleContext<vhdlParser::Pathname_elementContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Partial_pathnameContext::DOT() {
  return getTokens(vhdlParser::DOT);
}

tree::TerminalNode* vhdlParser::Partial_pathnameContext::DOT(size_t i) {
  return getToken(vhdlParser::DOT, i);
}


size_t vhdlParser::Partial_pathnameContext::getRuleIndex() const {
  return vhdlParser::RulePartial_pathname;
}

void vhdlParser::Partial_pathnameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartial_pathname(this);
}

void vhdlParser::Partial_pathnameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartial_pathname(this);
}


std::any vhdlParser::Partial_pathnameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPartial_pathname(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Partial_pathnameContext* vhdlParser::partial_pathname() {
  Partial_pathnameContext *_localctx = _tracker.createInstance<Partial_pathnameContext>(_ctx, getState());
  enterRule(_localctx, 308, vhdlParser::RulePartial_pathname);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1705);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1700);
        pathname_element();
        setState(1701);
        match(vhdlParser::DOT); 
      }
      setState(1707);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    }
    setState(1708);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pathname_elementContext ------------------------------------------------------------------

vhdlParser::Pathname_elementContext::Pathname_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::LabelContext* vhdlParser::Pathname_elementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}

tree::TerminalNode* vhdlParser::Pathname_elementContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Pathname_elementContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Pathname_elementContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}


size_t vhdlParser::Pathname_elementContext::getRuleIndex() const {
  return vhdlParser::RulePathname_element;
}

void vhdlParser::Pathname_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPathname_element(this);
}

void vhdlParser::Pathname_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPathname_element(this);
}


std::any vhdlParser::Pathname_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPathname_element(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Pathname_elementContext* vhdlParser::pathname_element() {
  Pathname_elementContext *_localctx = _tracker.createInstance<Pathname_elementContext>(_ctx, getState());
  enterRule(_localctx, 310, vhdlParser::RulePathname_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1710);
    label();
    setState(1715);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::LPAREN) {
      setState(1711);
      match(vhdlParser::LPAREN);
      setState(1712);
      expression(0);
      setState(1713);
      match(vhdlParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

vhdlParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::ExpressionContext::COND_OP() {
  return getToken(vhdlParser::COND_OP, 0);
}

vhdlParser::PrimaryContext* vhdlParser::ExpressionContext::primary() {
  return getRuleContext<vhdlParser::PrimaryContext>(0);
}

vhdlParser::Simple_expressionContext* vhdlParser::ExpressionContext::simple_expression() {
  return getRuleContext<vhdlParser::Simple_expressionContext>(0);
}

std::vector<vhdlParser::ExpressionContext *> vhdlParser::ExpressionContext::expression() {
  return getRuleContexts<vhdlParser::ExpressionContext>();
}

vhdlParser::ExpressionContext* vhdlParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<vhdlParser::ExpressionContext>(i);
}

vhdlParser::Shift_operatorContext* vhdlParser::ExpressionContext::shift_operator() {
  return getRuleContext<vhdlParser::Shift_operatorContext>(0);
}

vhdlParser::Relational_operatorContext* vhdlParser::ExpressionContext::relational_operator() {
  return getRuleContext<vhdlParser::Relational_operatorContext>(0);
}

vhdlParser::Logical_operatorContext* vhdlParser::ExpressionContext::logical_operator() {
  return getRuleContext<vhdlParser::Logical_operatorContext>(0);
}


size_t vhdlParser::ExpressionContext::getRuleIndex() const {
  return vhdlParser::RuleExpression;
}

void vhdlParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void vhdlParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


std::any vhdlParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}


vhdlParser::ExpressionContext* vhdlParser::expression() {
   return expression(0);
}

vhdlParser::ExpressionContext* vhdlParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  vhdlParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  vhdlParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 312;
  enterRecursionRule(_localctx, 312, vhdlParser::RuleExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1721);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::COND_OP: {
        setState(1718);
        match(vhdlParser::COND_OP);
        setState(1719);
        primary();
        break;
      }

      case vhdlParser::KW_ABS:
      case vhdlParser::KW_XNOR:
      case vhdlParser::KW_XOR:
      case vhdlParser::KW_NEW:
      case vhdlParser::KW_OR:
      case vhdlParser::KW_NOR:
      case vhdlParser::KW_AND:
      case vhdlParser::KW_NAND:
      case vhdlParser::KW_NOT:
      case vhdlParser::KW_NULL:
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::DECIMAL_LITERAL:
      case vhdlParser::BASED_LITERAL:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::BIT_STRING_LITERAL:
      case vhdlParser::LPAREN:
      case vhdlParser::SHIFT_LEFT:
      case vhdlParser::PLUS:
      case vhdlParser::MINUS: {
        setState(1720);
        simple_expression(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1737);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1735);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1723);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1724);
          shift_operator();
          setState(1725);
          expression(4);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1727);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1728);
          relational_operator();
          setState(1729);
          expression(3);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1731);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1732);
          logical_operator();
          setState(1733);
          expression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(1739);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Simple_expressionContext ------------------------------------------------------------------

vhdlParser::Simple_expressionContext::Simple_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::PrimaryContext *> vhdlParser::Simple_expressionContext::primary() {
  return getRuleContexts<vhdlParser::PrimaryContext>();
}

vhdlParser::PrimaryContext* vhdlParser::Simple_expressionContext::primary(size_t i) {
  return getRuleContext<vhdlParser::PrimaryContext>(i);
}

tree::TerminalNode* vhdlParser::Simple_expressionContext::DOUBLESTAR() {
  return getToken(vhdlParser::DOUBLESTAR, 0);
}

std::vector<vhdlParser::Simple_expressionContext *> vhdlParser::Simple_expressionContext::simple_expression() {
  return getRuleContexts<vhdlParser::Simple_expressionContext>();
}

vhdlParser::Simple_expressionContext* vhdlParser::Simple_expressionContext::simple_expression(size_t i) {
  return getRuleContext<vhdlParser::Simple_expressionContext>(i);
}

tree::TerminalNode* vhdlParser::Simple_expressionContext::KW_ABS() {
  return getToken(vhdlParser::KW_ABS, 0);
}

tree::TerminalNode* vhdlParser::Simple_expressionContext::KW_NOT() {
  return getToken(vhdlParser::KW_NOT, 0);
}

vhdlParser::Logical_operatorContext* vhdlParser::Simple_expressionContext::logical_operator() {
  return getRuleContext<vhdlParser::Logical_operatorContext>(0);
}

vhdlParser::SignContext* vhdlParser::Simple_expressionContext::sign() {
  return getRuleContext<vhdlParser::SignContext>(0);
}

vhdlParser::Multiplying_operatorContext* vhdlParser::Simple_expressionContext::multiplying_operator() {
  return getRuleContext<vhdlParser::Multiplying_operatorContext>(0);
}

vhdlParser::Adding_operatorContext* vhdlParser::Simple_expressionContext::adding_operator() {
  return getRuleContext<vhdlParser::Adding_operatorContext>(0);
}


size_t vhdlParser::Simple_expressionContext::getRuleIndex() const {
  return vhdlParser::RuleSimple_expression;
}

void vhdlParser::Simple_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_expression(this);
}

void vhdlParser::Simple_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_expression(this);
}


std::any vhdlParser::Simple_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSimple_expression(this);
  else
    return visitor->visitChildren(this);
}


vhdlParser::Simple_expressionContext* vhdlParser::simple_expression() {
   return simple_expression(0);
}

vhdlParser::Simple_expressionContext* vhdlParser::simple_expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  vhdlParser::Simple_expressionContext *_localctx = _tracker.createInstance<Simple_expressionContext>(_ctx, parentState);
  vhdlParser::Simple_expressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 314;
  enterRecursionRule(_localctx, 314, vhdlParser::RuleSimple_expression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1755);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_NEW:
      case vhdlParser::KW_NULL:
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::DECIMAL_LITERAL:
      case vhdlParser::BASED_LITERAL:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::BIT_STRING_LITERAL:
      case vhdlParser::LPAREN:
      case vhdlParser::SHIFT_LEFT: {
        setState(1741);
        primary();
        setState(1744);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
        case 1: {
          setState(1742);
          match(vhdlParser::DOUBLESTAR);
          setState(1743);
          primary();
          break;
        }

        default:
          break;
        }
        break;
      }

      case vhdlParser::KW_ABS:
      case vhdlParser::KW_XNOR:
      case vhdlParser::KW_XOR:
      case vhdlParser::KW_OR:
      case vhdlParser::KW_NOR:
      case vhdlParser::KW_AND:
      case vhdlParser::KW_NAND:
      case vhdlParser::KW_NOT: {
        setState(1749);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case vhdlParser::KW_ABS: {
            setState(1746);
            match(vhdlParser::KW_ABS);
            break;
          }

          case vhdlParser::KW_NOT: {
            setState(1747);
            match(vhdlParser::KW_NOT);
            break;
          }

          case vhdlParser::KW_XNOR:
          case vhdlParser::KW_XOR:
          case vhdlParser::KW_OR:
          case vhdlParser::KW_NOR:
          case vhdlParser::KW_AND:
          case vhdlParser::KW_NAND: {
            setState(1748);
            logical_operator();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1751);
        simple_expression(4);
        break;
      }

      case vhdlParser::PLUS:
      case vhdlParser::MINUS: {
        setState(1752);
        sign();
        setState(1753);
        simple_expression(2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1767);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1765);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Simple_expressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSimple_expression);
          setState(1757);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1758);
          multiplying_operator();
          setState(1759);
          simple_expression(4);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Simple_expressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSimple_expression);
          setState(1761);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1762);
          adding_operator();
          setState(1763);
          simple_expression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(1769);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

vhdlParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Numeric_literalContext* vhdlParser::PrimaryContext::numeric_literal() {
  return getRuleContext<vhdlParser::Numeric_literalContext>(0);
}

tree::TerminalNode* vhdlParser::PrimaryContext::BIT_STRING_LITERAL() {
  return getToken(vhdlParser::BIT_STRING_LITERAL, 0);
}

tree::TerminalNode* vhdlParser::PrimaryContext::KW_NULL() {
  return getToken(vhdlParser::KW_NULL, 0);
}

vhdlParser::AllocatorContext* vhdlParser::PrimaryContext::allocator() {
  return getRuleContext<vhdlParser::AllocatorContext>(0);
}

vhdlParser::AggregateContext* vhdlParser::PrimaryContext::aggregate() {
  return getRuleContext<vhdlParser::AggregateContext>(0);
}

vhdlParser::Qualified_expressionContext* vhdlParser::PrimaryContext::qualified_expression() {
  return getRuleContext<vhdlParser::Qualified_expressionContext>(0);
}


size_t vhdlParser::PrimaryContext::getRuleIndex() const {
  return vhdlParser::RulePrimary;
}

void vhdlParser::PrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary(this);
}

void vhdlParser::PrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary(this);
}


std::any vhdlParser::PrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPrimary(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::PrimaryContext* vhdlParser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 316, vhdlParser::RulePrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1776);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1770);
      numeric_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1771);
      match(vhdlParser::BIT_STRING_LITERAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1772);
      match(vhdlParser::KW_NULL);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1773);
      allocator();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1774);
      aggregate();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1775);
      qualified_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logical_operatorContext ------------------------------------------------------------------

vhdlParser::Logical_operatorContext::Logical_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Logical_operatorContext::KW_AND() {
  return getToken(vhdlParser::KW_AND, 0);
}

tree::TerminalNode* vhdlParser::Logical_operatorContext::KW_OR() {
  return getToken(vhdlParser::KW_OR, 0);
}

tree::TerminalNode* vhdlParser::Logical_operatorContext::KW_NAND() {
  return getToken(vhdlParser::KW_NAND, 0);
}

tree::TerminalNode* vhdlParser::Logical_operatorContext::KW_NOR() {
  return getToken(vhdlParser::KW_NOR, 0);
}

tree::TerminalNode* vhdlParser::Logical_operatorContext::KW_XOR() {
  return getToken(vhdlParser::KW_XOR, 0);
}

tree::TerminalNode* vhdlParser::Logical_operatorContext::KW_XNOR() {
  return getToken(vhdlParser::KW_XNOR, 0);
}


size_t vhdlParser::Logical_operatorContext::getRuleIndex() const {
  return vhdlParser::RuleLogical_operator;
}

void vhdlParser::Logical_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogical_operator(this);
}

void vhdlParser::Logical_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogical_operator(this);
}


std::any vhdlParser::Logical_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitLogical_operator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Logical_operatorContext* vhdlParser::logical_operator() {
  Logical_operatorContext *_localctx = _tracker.createInstance<Logical_operatorContext>(_ctx, getState());
  enterRule(_localctx, 318, vhdlParser::RuleLogical_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1778);
    _la = _input->LA(1);
    if (!((((_la - 16) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 16)) & 2596325734968459265) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relational_operatorContext ------------------------------------------------------------------

vhdlParser::Relational_operatorContext::Relational_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::EQ() {
  return getToken(vhdlParser::EQ, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::NE() {
  return getToken(vhdlParser::NE, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::LT() {
  return getToken(vhdlParser::LT, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::GT() {
  return getToken(vhdlParser::GT, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::GE() {
  return getToken(vhdlParser::GE, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::EQ_MATCH() {
  return getToken(vhdlParser::EQ_MATCH, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::NE_MATCH() {
  return getToken(vhdlParser::NE_MATCH, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::LT_MATCH() {
  return getToken(vhdlParser::LT_MATCH, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::LE_MATCH() {
  return getToken(vhdlParser::LE_MATCH, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::GT_MATCH() {
  return getToken(vhdlParser::GT_MATCH, 0);
}

tree::TerminalNode* vhdlParser::Relational_operatorContext::GE_MATCH() {
  return getToken(vhdlParser::GE_MATCH, 0);
}


size_t vhdlParser::Relational_operatorContext::getRuleIndex() const {
  return vhdlParser::RuleRelational_operator;
}

void vhdlParser::Relational_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelational_operator(this);
}

void vhdlParser::Relational_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelational_operator(this);
}


std::any vhdlParser::Relational_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitRelational_operator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Relational_operatorContext* vhdlParser::relational_operator() {
  Relational_operatorContext *_localctx = _tracker.createInstance<Relational_operatorContext>(_ctx, getState());
  enterRule(_localctx, 320, vhdlParser::RuleRelational_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1780);
    _la = _input->LA(1);
    if (!((((_la - 139) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 139)) & 526335) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Shift_operatorContext ------------------------------------------------------------------

vhdlParser::Shift_operatorContext::Shift_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Shift_operatorContext::KW_SLL() {
  return getToken(vhdlParser::KW_SLL, 0);
}

tree::TerminalNode* vhdlParser::Shift_operatorContext::KW_SRL() {
  return getToken(vhdlParser::KW_SRL, 0);
}

tree::TerminalNode* vhdlParser::Shift_operatorContext::KW_SLA() {
  return getToken(vhdlParser::KW_SLA, 0);
}

tree::TerminalNode* vhdlParser::Shift_operatorContext::KW_SRA() {
  return getToken(vhdlParser::KW_SRA, 0);
}

tree::TerminalNode* vhdlParser::Shift_operatorContext::KW_ROL() {
  return getToken(vhdlParser::KW_ROL, 0);
}

tree::TerminalNode* vhdlParser::Shift_operatorContext::KW_ROR() {
  return getToken(vhdlParser::KW_ROR, 0);
}


size_t vhdlParser::Shift_operatorContext::getRuleIndex() const {
  return vhdlParser::RuleShift_operator;
}

void vhdlParser::Shift_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShift_operator(this);
}

void vhdlParser::Shift_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShift_operator(this);
}


std::any vhdlParser::Shift_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitShift_operator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Shift_operatorContext* vhdlParser::shift_operator() {
  Shift_operatorContext *_localctx = _tracker.createInstance<Shift_operatorContext>(_ctx, getState());
  enterRule(_localctx, 322, vhdlParser::RuleShift_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1782);
    _la = _input->LA(1);
    if (!((((_la - 31) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 31)) & 2594073386036494353) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Adding_operatorContext ------------------------------------------------------------------

vhdlParser::Adding_operatorContext::Adding_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Adding_operatorContext::PLUS() {
  return getToken(vhdlParser::PLUS, 0);
}

tree::TerminalNode* vhdlParser::Adding_operatorContext::MINUS() {
  return getToken(vhdlParser::MINUS, 0);
}

tree::TerminalNode* vhdlParser::Adding_operatorContext::AMPERSAND() {
  return getToken(vhdlParser::AMPERSAND, 0);
}


size_t vhdlParser::Adding_operatorContext::getRuleIndex() const {
  return vhdlParser::RuleAdding_operator;
}

void vhdlParser::Adding_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdding_operator(this);
}

void vhdlParser::Adding_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdding_operator(this);
}


std::any vhdlParser::Adding_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAdding_operator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Adding_operatorContext* vhdlParser::adding_operator() {
  Adding_operatorContext *_localctx = _tracker.createInstance<Adding_operatorContext>(_ctx, getState());
  enterRule(_localctx, 324, vhdlParser::RuleAdding_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1784);
    _la = _input->LA(1);
    if (!((((_la - 150) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 150)) & 7) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignContext ------------------------------------------------------------------

vhdlParser::SignContext::SignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::SignContext::PLUS() {
  return getToken(vhdlParser::PLUS, 0);
}

tree::TerminalNode* vhdlParser::SignContext::MINUS() {
  return getToken(vhdlParser::MINUS, 0);
}


size_t vhdlParser::SignContext::getRuleIndex() const {
  return vhdlParser::RuleSign;
}

void vhdlParser::SignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSign(this);
}

void vhdlParser::SignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSign(this);
}


std::any vhdlParser::SignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSign(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::SignContext* vhdlParser::sign() {
  SignContext *_localctx = _tracker.createInstance<SignContext>(_ctx, getState());
  enterRule(_localctx, 326, vhdlParser::RuleSign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1786);
    _la = _input->LA(1);
    if (!(_la == vhdlParser::PLUS

    || _la == vhdlParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplying_operatorContext ------------------------------------------------------------------

vhdlParser::Multiplying_operatorContext::Multiplying_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Multiplying_operatorContext::MUL() {
  return getToken(vhdlParser::MUL, 0);
}

tree::TerminalNode* vhdlParser::Multiplying_operatorContext::DIV() {
  return getToken(vhdlParser::DIV, 0);
}

tree::TerminalNode* vhdlParser::Multiplying_operatorContext::KW_MOD() {
  return getToken(vhdlParser::KW_MOD, 0);
}

tree::TerminalNode* vhdlParser::Multiplying_operatorContext::KW_REM() {
  return getToken(vhdlParser::KW_REM, 0);
}


size_t vhdlParser::Multiplying_operatorContext::getRuleIndex() const {
  return vhdlParser::RuleMultiplying_operator;
}

void vhdlParser::Multiplying_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplying_operator(this);
}

void vhdlParser::Multiplying_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplying_operator(this);
}


std::any vhdlParser::Multiplying_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitMultiplying_operator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Multiplying_operatorContext* vhdlParser::multiplying_operator() {
  Multiplying_operatorContext *_localctx = _tracker.createInstance<Multiplying_operatorContext>(_ctx, getState());
  enterRule(_localctx, 328, vhdlParser::RuleMultiplying_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1788);
    _la = _input->LA(1);
    if (!(_la == vhdlParser::KW_REM

    || _la == vhdlParser::KW_MOD || _la == vhdlParser::MUL

    || _la == vhdlParser::DIV)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Miscellaneous_operatorContext ------------------------------------------------------------------

vhdlParser::Miscellaneous_operatorContext::Miscellaneous_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Miscellaneous_operatorContext::DOUBLESTAR() {
  return getToken(vhdlParser::DOUBLESTAR, 0);
}

tree::TerminalNode* vhdlParser::Miscellaneous_operatorContext::KW_ABS() {
  return getToken(vhdlParser::KW_ABS, 0);
}

tree::TerminalNode* vhdlParser::Miscellaneous_operatorContext::KW_NOT() {
  return getToken(vhdlParser::KW_NOT, 0);
}


size_t vhdlParser::Miscellaneous_operatorContext::getRuleIndex() const {
  return vhdlParser::RuleMiscellaneous_operator;
}

void vhdlParser::Miscellaneous_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMiscellaneous_operator(this);
}

void vhdlParser::Miscellaneous_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMiscellaneous_operator(this);
}


std::any vhdlParser::Miscellaneous_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitMiscellaneous_operator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Miscellaneous_operatorContext* vhdlParser::miscellaneous_operator() {
  Miscellaneous_operatorContext *_localctx = _tracker.createInstance<Miscellaneous_operatorContext>(_ctx, getState());
  enterRule(_localctx, 330, vhdlParser::RuleMiscellaneous_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1790);
    _la = _input->LA(1);
    if (!(_la == vhdlParser::KW_ABS || _la == vhdlParser::KW_NOT

    || _la == vhdlParser::DOUBLESTAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Numeric_literalContext ------------------------------------------------------------------

vhdlParser::Numeric_literalContext::Numeric_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Numeric_literalContext::DECIMAL_LITERAL() {
  return getToken(vhdlParser::DECIMAL_LITERAL, 0);
}

vhdlParser::NameContext* vhdlParser::Numeric_literalContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Numeric_literalContext::BASED_LITERAL() {
  return getToken(vhdlParser::BASED_LITERAL, 0);
}


size_t vhdlParser::Numeric_literalContext::getRuleIndex() const {
  return vhdlParser::RuleNumeric_literal;
}

void vhdlParser::Numeric_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumeric_literal(this);
}

void vhdlParser::Numeric_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumeric_literal(this);
}


std::any vhdlParser::Numeric_literalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitNumeric_literal(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Numeric_literalContext* vhdlParser::numeric_literal() {
  Numeric_literalContext *_localctx = _tracker.createInstance<Numeric_literalContext>(_ctx, getState());
  enterRule(_localctx, 332, vhdlParser::RuleNumeric_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1801);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1792);
        match(vhdlParser::DECIMAL_LITERAL);
        setState(1794);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
        case 1: {
          setState(1793);
          name(0);
          break;
        }

        default:
          break;
        }
        break;
      }

      case vhdlParser::BASED_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1796);
        match(vhdlParser::BASED_LITERAL);
        setState(1798);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
        case 1: {
          setState(1797);
          name(0);
          break;
        }

        default:
          break;
        }
        break;
      }

      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::SHIFT_LEFT: {
        enterOuterAlt(_localctx, 3);
        setState(1800);
        name(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Physical_literalContext ------------------------------------------------------------------

vhdlParser::Physical_literalContext::Physical_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::Physical_literalContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Physical_literalContext::DECIMAL_LITERAL() {
  return getToken(vhdlParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* vhdlParser::Physical_literalContext::BASED_LITERAL() {
  return getToken(vhdlParser::BASED_LITERAL, 0);
}


size_t vhdlParser::Physical_literalContext::getRuleIndex() const {
  return vhdlParser::RulePhysical_literal;
}

void vhdlParser::Physical_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPhysical_literal(this);
}

void vhdlParser::Physical_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPhysical_literal(this);
}


std::any vhdlParser::Physical_literalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPhysical_literal(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Physical_literalContext* vhdlParser::physical_literal() {
  Physical_literalContext *_localctx = _tracker.createInstance<Physical_literalContext>(_ctx, getState());
  enterRule(_localctx, 334, vhdlParser::RulePhysical_literal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1804);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::DECIMAL_LITERAL

    || _la == vhdlParser::BASED_LITERAL) {
      setState(1803);
      _la = _input->LA(1);
      if (!(_la == vhdlParser::DECIMAL_LITERAL

      || _la == vhdlParser::BASED_LITERAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1806);
    name(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateContext ------------------------------------------------------------------

vhdlParser::AggregateContext::AggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::AggregateContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

std::vector<vhdlParser::Element_associationContext *> vhdlParser::AggregateContext::element_association() {
  return getRuleContexts<vhdlParser::Element_associationContext>();
}

vhdlParser::Element_associationContext* vhdlParser::AggregateContext::element_association(size_t i) {
  return getRuleContext<vhdlParser::Element_associationContext>(i);
}

tree::TerminalNode* vhdlParser::AggregateContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::AggregateContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::AggregateContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::AggregateContext::getRuleIndex() const {
  return vhdlParser::RuleAggregate;
}

void vhdlParser::AggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate(this);
}

void vhdlParser::AggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate(this);
}


std::any vhdlParser::AggregateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAggregate(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::AggregateContext* vhdlParser::aggregate() {
  AggregateContext *_localctx = _tracker.createInstance<AggregateContext>(_ctx, getState());
  enterRule(_localctx, 336, vhdlParser::RuleAggregate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1808);
    match(vhdlParser::LPAREN);
    setState(1809);
    element_association();
    setState(1814);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1810);
      match(vhdlParser::COMMA);
      setState(1811);
      element_association();
      setState(1816);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1817);
    match(vhdlParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_associationContext ------------------------------------------------------------------

vhdlParser::Element_associationContext::Element_associationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::ExpressionContext* vhdlParser::Element_associationContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

vhdlParser::ChoicesContext* vhdlParser::Element_associationContext::choices() {
  return getRuleContext<vhdlParser::ChoicesContext>(0);
}

tree::TerminalNode* vhdlParser::Element_associationContext::ARROW() {
  return getToken(vhdlParser::ARROW, 0);
}


size_t vhdlParser::Element_associationContext::getRuleIndex() const {
  return vhdlParser::RuleElement_association;
}

void vhdlParser::Element_associationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_association(this);
}

void vhdlParser::Element_associationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_association(this);
}


std::any vhdlParser::Element_associationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitElement_association(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Element_associationContext* vhdlParser::element_association() {
  Element_associationContext *_localctx = _tracker.createInstance<Element_associationContext>(_ctx, getState());
  enterRule(_localctx, 338, vhdlParser::RuleElement_association);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1822);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(1819);
      choices();
      setState(1820);
      match(vhdlParser::ARROW);
      break;
    }

    default:
      break;
    }
    setState(1824);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChoicesContext ------------------------------------------------------------------

vhdlParser::ChoicesContext::ChoicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::ChoiceContext *> vhdlParser::ChoicesContext::choice() {
  return getRuleContexts<vhdlParser::ChoiceContext>();
}

vhdlParser::ChoiceContext* vhdlParser::ChoicesContext::choice(size_t i) {
  return getRuleContext<vhdlParser::ChoiceContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::ChoicesContext::BAR() {
  return getTokens(vhdlParser::BAR);
}

tree::TerminalNode* vhdlParser::ChoicesContext::BAR(size_t i) {
  return getToken(vhdlParser::BAR, i);
}


size_t vhdlParser::ChoicesContext::getRuleIndex() const {
  return vhdlParser::RuleChoices;
}

void vhdlParser::ChoicesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoices(this);
}

void vhdlParser::ChoicesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoices(this);
}


std::any vhdlParser::ChoicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitChoices(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::ChoicesContext* vhdlParser::choices() {
  ChoicesContext *_localctx = _tracker.createInstance<ChoicesContext>(_ctx, getState());
  enterRule(_localctx, 340, vhdlParser::RuleChoices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1826);
    choice();
    setState(1831);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::BAR) {
      setState(1827);
      match(vhdlParser::BAR);
      setState(1828);
      choice();
      setState(1833);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChoiceContext ------------------------------------------------------------------

vhdlParser::ChoiceContext::ChoiceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Discrete_rangeContext* vhdlParser::ChoiceContext::discrete_range() {
  return getRuleContext<vhdlParser::Discrete_rangeContext>(0);
}

vhdlParser::Simple_expressionContext* vhdlParser::ChoiceContext::simple_expression() {
  return getRuleContext<vhdlParser::Simple_expressionContext>(0);
}

tree::TerminalNode* vhdlParser::ChoiceContext::KW_OTHERS() {
  return getToken(vhdlParser::KW_OTHERS, 0);
}


size_t vhdlParser::ChoiceContext::getRuleIndex() const {
  return vhdlParser::RuleChoice;
}

void vhdlParser::ChoiceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice(this);
}

void vhdlParser::ChoiceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice(this);
}


std::any vhdlParser::ChoiceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitChoice(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::ChoiceContext* vhdlParser::choice() {
  ChoiceContext *_localctx = _tracker.createInstance<ChoiceContext>(_ctx, getState());
  enterRule(_localctx, 342, vhdlParser::RuleChoice);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1837);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1834);
      discrete_range();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1835);
      simple_expression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1836);
      match(vhdlParser::KW_OTHERS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_expressionContext ------------------------------------------------------------------

vhdlParser::Qualified_expressionContext::Qualified_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Type_markContext* vhdlParser::Qualified_expressionContext::type_mark() {
  return getRuleContext<vhdlParser::Type_markContext>(0);
}

tree::TerminalNode* vhdlParser::Qualified_expressionContext::APOSTROPHE() {
  return getToken(vhdlParser::APOSTROPHE, 0);
}

vhdlParser::AggregateContext* vhdlParser::Qualified_expressionContext::aggregate() {
  return getRuleContext<vhdlParser::AggregateContext>(0);
}


size_t vhdlParser::Qualified_expressionContext::getRuleIndex() const {
  return vhdlParser::RuleQualified_expression;
}

void vhdlParser::Qualified_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_expression(this);
}

void vhdlParser::Qualified_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_expression(this);
}


std::any vhdlParser::Qualified_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitQualified_expression(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Qualified_expressionContext* vhdlParser::qualified_expression() {
  Qualified_expressionContext *_localctx = _tracker.createInstance<Qualified_expressionContext>(_ctx, getState());
  enterRule(_localctx, 344, vhdlParser::RuleQualified_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1839);
    type_mark();
    setState(1840);
    match(vhdlParser::APOSTROPHE);
    setState(1841);
    aggregate();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocatorContext ------------------------------------------------------------------

vhdlParser::AllocatorContext::AllocatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::AllocatorContext::KW_NEW() {
  return getToken(vhdlParser::KW_NEW, 0);
}

vhdlParser::Subtype_indicationContext* vhdlParser::AllocatorContext::subtype_indication() {
  return getRuleContext<vhdlParser::Subtype_indicationContext>(0);
}

vhdlParser::Qualified_expressionContext* vhdlParser::AllocatorContext::qualified_expression() {
  return getRuleContext<vhdlParser::Qualified_expressionContext>(0);
}


size_t vhdlParser::AllocatorContext::getRuleIndex() const {
  return vhdlParser::RuleAllocator;
}

void vhdlParser::AllocatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocator(this);
}

void vhdlParser::AllocatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocator(this);
}


std::any vhdlParser::AllocatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAllocator(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::AllocatorContext* vhdlParser::allocator() {
  AllocatorContext *_localctx = _tracker.createInstance<AllocatorContext>(_ctx, getState());
  enterRule(_localctx, 346, vhdlParser::RuleAllocator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1843);
    match(vhdlParser::KW_NEW);
    setState(1846);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
    case 1: {
      setState(1844);
      subtype_indication();
      break;
    }

    case 2: {
      setState(1845);
      qualified_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_of_statementsContext ------------------------------------------------------------------

vhdlParser::Sequence_of_statementsContext::Sequence_of_statementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::Sequential_statementContext *> vhdlParser::Sequence_of_statementsContext::sequential_statement() {
  return getRuleContexts<vhdlParser::Sequential_statementContext>();
}

vhdlParser::Sequential_statementContext* vhdlParser::Sequence_of_statementsContext::sequential_statement(size_t i) {
  return getRuleContext<vhdlParser::Sequential_statementContext>(i);
}


size_t vhdlParser::Sequence_of_statementsContext::getRuleIndex() const {
  return vhdlParser::RuleSequence_of_statements;
}

void vhdlParser::Sequence_of_statementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_of_statements(this);
}

void vhdlParser::Sequence_of_statementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_of_statements(this);
}


std::any vhdlParser::Sequence_of_statementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSequence_of_statements(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Sequence_of_statementsContext* vhdlParser::sequence_of_statements() {
  Sequence_of_statementsContext *_localctx = _tracker.createInstance<Sequence_of_statementsContext>(_ctx, getState());
  enterRule(_localctx, 348, vhdlParser::RuleSequence_of_statements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1851);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1848);
        sequential_statement(); 
      }
      setState(1853);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequential_statementContext ------------------------------------------------------------------

vhdlParser::Sequential_statementContext::Sequential_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Wait_statementContext* vhdlParser::Sequential_statementContext::wait_statement() {
  return getRuleContext<vhdlParser::Wait_statementContext>(0);
}

vhdlParser::Assertion_statementContext* vhdlParser::Sequential_statementContext::assertion_statement() {
  return getRuleContext<vhdlParser::Assertion_statementContext>(0);
}

vhdlParser::Report_statementContext* vhdlParser::Sequential_statementContext::report_statement() {
  return getRuleContext<vhdlParser::Report_statementContext>(0);
}

vhdlParser::Signal_assignment_statementContext* vhdlParser::Sequential_statementContext::signal_assignment_statement() {
  return getRuleContext<vhdlParser::Signal_assignment_statementContext>(0);
}

vhdlParser::Variable_assignment_statementContext* vhdlParser::Sequential_statementContext::variable_assignment_statement() {
  return getRuleContext<vhdlParser::Variable_assignment_statementContext>(0);
}

vhdlParser::Procedure_call_statementContext* vhdlParser::Sequential_statementContext::procedure_call_statement() {
  return getRuleContext<vhdlParser::Procedure_call_statementContext>(0);
}

vhdlParser::If_statementContext* vhdlParser::Sequential_statementContext::if_statement() {
  return getRuleContext<vhdlParser::If_statementContext>(0);
}

vhdlParser::Case_statementContext* vhdlParser::Sequential_statementContext::case_statement() {
  return getRuleContext<vhdlParser::Case_statementContext>(0);
}

vhdlParser::Loop_statementContext* vhdlParser::Sequential_statementContext::loop_statement() {
  return getRuleContext<vhdlParser::Loop_statementContext>(0);
}

vhdlParser::Next_statementContext* vhdlParser::Sequential_statementContext::next_statement() {
  return getRuleContext<vhdlParser::Next_statementContext>(0);
}

vhdlParser::Exit_statementContext* vhdlParser::Sequential_statementContext::exit_statement() {
  return getRuleContext<vhdlParser::Exit_statementContext>(0);
}

vhdlParser::Return_statementContext* vhdlParser::Sequential_statementContext::return_statement() {
  return getRuleContext<vhdlParser::Return_statementContext>(0);
}

vhdlParser::Null_statementContext* vhdlParser::Sequential_statementContext::null_statement() {
  return getRuleContext<vhdlParser::Null_statementContext>(0);
}

vhdlParser::LabelContext* vhdlParser::Sequential_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}

tree::TerminalNode* vhdlParser::Sequential_statementContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}


size_t vhdlParser::Sequential_statementContext::getRuleIndex() const {
  return vhdlParser::RuleSequential_statement;
}

void vhdlParser::Sequential_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequential_statement(this);
}

void vhdlParser::Sequential_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequential_statement(this);
}


std::any vhdlParser::Sequential_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSequential_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Sequential_statementContext* vhdlParser::sequential_statement() {
  Sequential_statementContext *_localctx = _tracker.createInstance<Sequential_statementContext>(_ctx, getState());
  enterRule(_localctx, 350, vhdlParser::RuleSequential_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1857);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
    case 1: {
      setState(1854);
      label();
      setState(1855);
      match(vhdlParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(1872);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      setState(1859);
      wait_statement();
      break;
    }

    case 2: {
      setState(1860);
      assertion_statement();
      break;
    }

    case 3: {
      setState(1861);
      report_statement();
      break;
    }

    case 4: {
      setState(1862);
      signal_assignment_statement();
      break;
    }

    case 5: {
      setState(1863);
      variable_assignment_statement();
      break;
    }

    case 6: {
      setState(1864);
      procedure_call_statement();
      break;
    }

    case 7: {
      setState(1865);
      if_statement();
      break;
    }

    case 8: {
      setState(1866);
      case_statement();
      break;
    }

    case 9: {
      setState(1867);
      loop_statement();
      break;
    }

    case 10: {
      setState(1868);
      next_statement();
      break;
    }

    case 11: {
      setState(1869);
      exit_statement();
      break;
    }

    case 12: {
      setState(1870);
      return_statement();
      break;
    }

    case 13: {
      setState(1871);
      null_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wait_statementContext ------------------------------------------------------------------

vhdlParser::Wait_statementContext::Wait_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Wait_statementContext::KW_WAIT() {
  return getToken(vhdlParser::KW_WAIT, 0);
}

tree::TerminalNode* vhdlParser::Wait_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Sensitivity_clauseContext* vhdlParser::Wait_statementContext::sensitivity_clause() {
  return getRuleContext<vhdlParser::Sensitivity_clauseContext>(0);
}

vhdlParser::Condition_clauseContext* vhdlParser::Wait_statementContext::condition_clause() {
  return getRuleContext<vhdlParser::Condition_clauseContext>(0);
}

vhdlParser::Timeout_clauseContext* vhdlParser::Wait_statementContext::timeout_clause() {
  return getRuleContext<vhdlParser::Timeout_clauseContext>(0);
}


size_t vhdlParser::Wait_statementContext::getRuleIndex() const {
  return vhdlParser::RuleWait_statement;
}

void vhdlParser::Wait_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait_statement(this);
}

void vhdlParser::Wait_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait_statement(this);
}


std::any vhdlParser::Wait_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitWait_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Wait_statementContext* vhdlParser::wait_statement() {
  Wait_statementContext *_localctx = _tracker.createInstance<Wait_statementContext>(_ctx, getState());
  enterRule(_localctx, 352, vhdlParser::RuleWait_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1874);
    match(vhdlParser::KW_WAIT);
    setState(1876);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_ON) {
      setState(1875);
      sensitivity_clause();
    }
    setState(1879);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_UNTIL) {
      setState(1878);
      condition_clause();
    }
    setState(1882);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_FOR) {
      setState(1881);
      timeout_clause();
    }
    setState(1884);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sensitivity_clauseContext ------------------------------------------------------------------

vhdlParser::Sensitivity_clauseContext::Sensitivity_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Sensitivity_clauseContext::KW_ON() {
  return getToken(vhdlParser::KW_ON, 0);
}

vhdlParser::Sensitivity_listContext* vhdlParser::Sensitivity_clauseContext::sensitivity_list() {
  return getRuleContext<vhdlParser::Sensitivity_listContext>(0);
}


size_t vhdlParser::Sensitivity_clauseContext::getRuleIndex() const {
  return vhdlParser::RuleSensitivity_clause;
}

void vhdlParser::Sensitivity_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSensitivity_clause(this);
}

void vhdlParser::Sensitivity_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSensitivity_clause(this);
}


std::any vhdlParser::Sensitivity_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSensitivity_clause(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Sensitivity_clauseContext* vhdlParser::sensitivity_clause() {
  Sensitivity_clauseContext *_localctx = _tracker.createInstance<Sensitivity_clauseContext>(_ctx, getState());
  enterRule(_localctx, 354, vhdlParser::RuleSensitivity_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1886);
    match(vhdlParser::KW_ON);
    setState(1887);
    sensitivity_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sensitivity_listContext ------------------------------------------------------------------

vhdlParser::Sensitivity_listContext::Sensitivity_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::NameContext *> vhdlParser::Sensitivity_listContext::name() {
  return getRuleContexts<vhdlParser::NameContext>();
}

vhdlParser::NameContext* vhdlParser::Sensitivity_listContext::name(size_t i) {
  return getRuleContext<vhdlParser::NameContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Sensitivity_listContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Sensitivity_listContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Sensitivity_listContext::getRuleIndex() const {
  return vhdlParser::RuleSensitivity_list;
}

void vhdlParser::Sensitivity_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSensitivity_list(this);
}

void vhdlParser::Sensitivity_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSensitivity_list(this);
}


std::any vhdlParser::Sensitivity_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSensitivity_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Sensitivity_listContext* vhdlParser::sensitivity_list() {
  Sensitivity_listContext *_localctx = _tracker.createInstance<Sensitivity_listContext>(_ctx, getState());
  enterRule(_localctx, 356, vhdlParser::RuleSensitivity_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1889);
    name(0);
    setState(1894);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(1890);
      match(vhdlParser::COMMA);
      setState(1891);
      name(0);
      setState(1896);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Condition_clauseContext ------------------------------------------------------------------

vhdlParser::Condition_clauseContext::Condition_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Condition_clauseContext::KW_UNTIL() {
  return getToken(vhdlParser::KW_UNTIL, 0);
}

vhdlParser::ConditionContext* vhdlParser::Condition_clauseContext::condition() {
  return getRuleContext<vhdlParser::ConditionContext>(0);
}


size_t vhdlParser::Condition_clauseContext::getRuleIndex() const {
  return vhdlParser::RuleCondition_clause;
}

void vhdlParser::Condition_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCondition_clause(this);
}

void vhdlParser::Condition_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCondition_clause(this);
}


std::any vhdlParser::Condition_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitCondition_clause(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Condition_clauseContext* vhdlParser::condition_clause() {
  Condition_clauseContext *_localctx = _tracker.createInstance<Condition_clauseContext>(_ctx, getState());
  enterRule(_localctx, 358, vhdlParser::RuleCondition_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1897);
    match(vhdlParser::KW_UNTIL);
    setState(1898);
    condition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionContext ------------------------------------------------------------------

vhdlParser::ConditionContext::ConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::ExpressionContext* vhdlParser::ConditionContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::ConditionContext::getRuleIndex() const {
  return vhdlParser::RuleCondition;
}

void vhdlParser::ConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCondition(this);
}

void vhdlParser::ConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCondition(this);
}


std::any vhdlParser::ConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitCondition(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::ConditionContext* vhdlParser::condition() {
  ConditionContext *_localctx = _tracker.createInstance<ConditionContext>(_ctx, getState());
  enterRule(_localctx, 360, vhdlParser::RuleCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1900);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Timeout_clauseContext ------------------------------------------------------------------

vhdlParser::Timeout_clauseContext::Timeout_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Timeout_clauseContext::KW_FOR() {
  return getToken(vhdlParser::KW_FOR, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Timeout_clauseContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::Timeout_clauseContext::getRuleIndex() const {
  return vhdlParser::RuleTimeout_clause;
}

void vhdlParser::Timeout_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimeout_clause(this);
}

void vhdlParser::Timeout_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimeout_clause(this);
}


std::any vhdlParser::Timeout_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitTimeout_clause(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Timeout_clauseContext* vhdlParser::timeout_clause() {
  Timeout_clauseContext *_localctx = _tracker.createInstance<Timeout_clauseContext>(_ctx, getState());
  enterRule(_localctx, 362, vhdlParser::RuleTimeout_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1902);
    match(vhdlParser::KW_FOR);
    setState(1903);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assertion_statementContext ------------------------------------------------------------------

vhdlParser::Assertion_statementContext::Assertion_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::AssertionContext* vhdlParser::Assertion_statementContext::assertion() {
  return getRuleContext<vhdlParser::AssertionContext>(0);
}

tree::TerminalNode* vhdlParser::Assertion_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Assertion_statementContext::getRuleIndex() const {
  return vhdlParser::RuleAssertion_statement;
}

void vhdlParser::Assertion_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertion_statement(this);
}

void vhdlParser::Assertion_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertion_statement(this);
}


std::any vhdlParser::Assertion_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAssertion_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Assertion_statementContext* vhdlParser::assertion_statement() {
  Assertion_statementContext *_localctx = _tracker.createInstance<Assertion_statementContext>(_ctx, getState());
  enterRule(_localctx, 364, vhdlParser::RuleAssertion_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1905);
    assertion();
    setState(1906);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertionContext ------------------------------------------------------------------

vhdlParser::AssertionContext::AssertionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::AssertionContext::KW_ASSERT() {
  return getToken(vhdlParser::KW_ASSERT, 0);
}

vhdlParser::ConditionContext* vhdlParser::AssertionContext::condition() {
  return getRuleContext<vhdlParser::ConditionContext>(0);
}

tree::TerminalNode* vhdlParser::AssertionContext::KW_REPORT() {
  return getToken(vhdlParser::KW_REPORT, 0);
}

std::vector<vhdlParser::ExpressionContext *> vhdlParser::AssertionContext::expression() {
  return getRuleContexts<vhdlParser::ExpressionContext>();
}

vhdlParser::ExpressionContext* vhdlParser::AssertionContext::expression(size_t i) {
  return getRuleContext<vhdlParser::ExpressionContext>(i);
}

tree::TerminalNode* vhdlParser::AssertionContext::KW_SEVERITY() {
  return getToken(vhdlParser::KW_SEVERITY, 0);
}


size_t vhdlParser::AssertionContext::getRuleIndex() const {
  return vhdlParser::RuleAssertion;
}

void vhdlParser::AssertionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertion(this);
}

void vhdlParser::AssertionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertion(this);
}


std::any vhdlParser::AssertionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitAssertion(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::AssertionContext* vhdlParser::assertion() {
  AssertionContext *_localctx = _tracker.createInstance<AssertionContext>(_ctx, getState());
  enterRule(_localctx, 366, vhdlParser::RuleAssertion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1908);
    match(vhdlParser::KW_ASSERT);
    setState(1909);
    condition();
    setState(1912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_REPORT) {
      setState(1910);
      match(vhdlParser::KW_REPORT);
      setState(1911);
      expression(0);
    }
    setState(1916);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_SEVERITY) {
      setState(1914);
      match(vhdlParser::KW_SEVERITY);
      setState(1915);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Report_statementContext ------------------------------------------------------------------

vhdlParser::Report_statementContext::Report_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Report_statementContext::KW_REPORT() {
  return getToken(vhdlParser::KW_REPORT, 0);
}

std::vector<vhdlParser::ExpressionContext *> vhdlParser::Report_statementContext::expression() {
  return getRuleContexts<vhdlParser::ExpressionContext>();
}

vhdlParser::ExpressionContext* vhdlParser::Report_statementContext::expression(size_t i) {
  return getRuleContext<vhdlParser::ExpressionContext>(i);
}

tree::TerminalNode* vhdlParser::Report_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Report_statementContext::KW_SEVERITY() {
  return getToken(vhdlParser::KW_SEVERITY, 0);
}


size_t vhdlParser::Report_statementContext::getRuleIndex() const {
  return vhdlParser::RuleReport_statement;
}

void vhdlParser::Report_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReport_statement(this);
}

void vhdlParser::Report_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReport_statement(this);
}


std::any vhdlParser::Report_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitReport_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Report_statementContext* vhdlParser::report_statement() {
  Report_statementContext *_localctx = _tracker.createInstance<Report_statementContext>(_ctx, getState());
  enterRule(_localctx, 368, vhdlParser::RuleReport_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1918);
    match(vhdlParser::KW_REPORT);
    setState(1919);
    expression(0);
    setState(1922);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_SEVERITY) {
      setState(1920);
      match(vhdlParser::KW_SEVERITY);
      setState(1921);
      expression(0);
    }
    setState(1924);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signal_assignment_statementContext ------------------------------------------------------------------

vhdlParser::Signal_assignment_statementContext::Signal_assignment_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Simple_signal_assignmentContext* vhdlParser::Signal_assignment_statementContext::simple_signal_assignment() {
  return getRuleContext<vhdlParser::Simple_signal_assignmentContext>(0);
}

vhdlParser::Conditional_signal_assignmentContext* vhdlParser::Signal_assignment_statementContext::conditional_signal_assignment() {
  return getRuleContext<vhdlParser::Conditional_signal_assignmentContext>(0);
}

vhdlParser::Selected_signal_assignmentContext* vhdlParser::Signal_assignment_statementContext::selected_signal_assignment() {
  return getRuleContext<vhdlParser::Selected_signal_assignmentContext>(0);
}


size_t vhdlParser::Signal_assignment_statementContext::getRuleIndex() const {
  return vhdlParser::RuleSignal_assignment_statement;
}

void vhdlParser::Signal_assignment_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSignal_assignment_statement(this);
}

void vhdlParser::Signal_assignment_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSignal_assignment_statement(this);
}


std::any vhdlParser::Signal_assignment_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSignal_assignment_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Signal_assignment_statementContext* vhdlParser::signal_assignment_statement() {
  Signal_assignment_statementContext *_localctx = _tracker.createInstance<Signal_assignment_statementContext>(_ctx, getState());
  enterRule(_localctx, 370, vhdlParser::RuleSignal_assignment_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1929);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1926);
      simple_signal_assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1927);
      conditional_signal_assignment();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1928);
      selected_signal_assignment();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_signal_assignmentContext ------------------------------------------------------------------

vhdlParser::Simple_signal_assignmentContext::Simple_signal_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Simple_waveform_assignmentContext* vhdlParser::Simple_signal_assignmentContext::simple_waveform_assignment() {
  return getRuleContext<vhdlParser::Simple_waveform_assignmentContext>(0);
}

vhdlParser::Simple_force_assignmentContext* vhdlParser::Simple_signal_assignmentContext::simple_force_assignment() {
  return getRuleContext<vhdlParser::Simple_force_assignmentContext>(0);
}

vhdlParser::Simple_release_assignmentContext* vhdlParser::Simple_signal_assignmentContext::simple_release_assignment() {
  return getRuleContext<vhdlParser::Simple_release_assignmentContext>(0);
}


size_t vhdlParser::Simple_signal_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleSimple_signal_assignment;
}

void vhdlParser::Simple_signal_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_signal_assignment(this);
}

void vhdlParser::Simple_signal_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_signal_assignment(this);
}


std::any vhdlParser::Simple_signal_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSimple_signal_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Simple_signal_assignmentContext* vhdlParser::simple_signal_assignment() {
  Simple_signal_assignmentContext *_localctx = _tracker.createInstance<Simple_signal_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 372, vhdlParser::RuleSimple_signal_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1934);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1931);
      simple_waveform_assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1932);
      simple_force_assignment();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1933);
      simple_release_assignment();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_waveform_assignmentContext ------------------------------------------------------------------

vhdlParser::Simple_waveform_assignmentContext::Simple_waveform_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::TargetContext* vhdlParser::Simple_waveform_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Simple_waveform_assignmentContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

vhdlParser::WaveformContext* vhdlParser::Simple_waveform_assignmentContext::waveform() {
  return getRuleContext<vhdlParser::WaveformContext>(0);
}

tree::TerminalNode* vhdlParser::Simple_waveform_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Delay_mechanismContext* vhdlParser::Simple_waveform_assignmentContext::delay_mechanism() {
  return getRuleContext<vhdlParser::Delay_mechanismContext>(0);
}


size_t vhdlParser::Simple_waveform_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleSimple_waveform_assignment;
}

void vhdlParser::Simple_waveform_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_waveform_assignment(this);
}

void vhdlParser::Simple_waveform_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_waveform_assignment(this);
}


std::any vhdlParser::Simple_waveform_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSimple_waveform_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Simple_waveform_assignmentContext* vhdlParser::simple_waveform_assignment() {
  Simple_waveform_assignmentContext *_localctx = _tracker.createInstance<Simple_waveform_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 374, vhdlParser::RuleSimple_waveform_assignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1936);
    target();
    setState(1937);
    match(vhdlParser::CONASGN);
    setState(1939);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251800350558208) != 0) {
      setState(1938);
      delay_mechanism();
    }
    setState(1941);
    waveform();
    setState(1942);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_force_assignmentContext ------------------------------------------------------------------

vhdlParser::Simple_force_assignmentContext::Simple_force_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::TargetContext* vhdlParser::Simple_force_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Simple_force_assignmentContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

tree::TerminalNode* vhdlParser::Simple_force_assignmentContext::KW_FORCE() {
  return getToken(vhdlParser::KW_FORCE, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Simple_force_assignmentContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Simple_force_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Force_modeContext* vhdlParser::Simple_force_assignmentContext::force_mode() {
  return getRuleContext<vhdlParser::Force_modeContext>(0);
}


size_t vhdlParser::Simple_force_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleSimple_force_assignment;
}

void vhdlParser::Simple_force_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_force_assignment(this);
}

void vhdlParser::Simple_force_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_force_assignment(this);
}


std::any vhdlParser::Simple_force_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSimple_force_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Simple_force_assignmentContext* vhdlParser::simple_force_assignment() {
  Simple_force_assignmentContext *_localctx = _tracker.createInstance<Simple_force_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 376, vhdlParser::RuleSimple_force_assignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1944);
    target();
    setState(1945);
    match(vhdlParser::CONASGN);
    setState(1946);
    match(vhdlParser::KW_FORCE);
    setState(1948);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IN

    || _la == vhdlParser::KW_OUT) {
      setState(1947);
      force_mode();
    }
    setState(1950);
    expression(0);
    setState(1951);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_release_assignmentContext ------------------------------------------------------------------

vhdlParser::Simple_release_assignmentContext::Simple_release_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::TargetContext* vhdlParser::Simple_release_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Simple_release_assignmentContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

tree::TerminalNode* vhdlParser::Simple_release_assignmentContext::KW_RELEASE() {
  return getToken(vhdlParser::KW_RELEASE, 0);
}

tree::TerminalNode* vhdlParser::Simple_release_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Force_modeContext* vhdlParser::Simple_release_assignmentContext::force_mode() {
  return getRuleContext<vhdlParser::Force_modeContext>(0);
}


size_t vhdlParser::Simple_release_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleSimple_release_assignment;
}

void vhdlParser::Simple_release_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_release_assignment(this);
}

void vhdlParser::Simple_release_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_release_assignment(this);
}


std::any vhdlParser::Simple_release_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSimple_release_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Simple_release_assignmentContext* vhdlParser::simple_release_assignment() {
  Simple_release_assignmentContext *_localctx = _tracker.createInstance<Simple_release_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 378, vhdlParser::RuleSimple_release_assignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1953);
    target();
    setState(1954);
    match(vhdlParser::CONASGN);
    setState(1955);
    match(vhdlParser::KW_RELEASE);
    setState(1957);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IN

    || _la == vhdlParser::KW_OUT) {
      setState(1956);
      force_mode();
    }
    setState(1959);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Force_modeContext ------------------------------------------------------------------

vhdlParser::Force_modeContext::Force_modeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Force_modeContext::KW_IN() {
  return getToken(vhdlParser::KW_IN, 0);
}

tree::TerminalNode* vhdlParser::Force_modeContext::KW_OUT() {
  return getToken(vhdlParser::KW_OUT, 0);
}


size_t vhdlParser::Force_modeContext::getRuleIndex() const {
  return vhdlParser::RuleForce_mode;
}

void vhdlParser::Force_modeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForce_mode(this);
}

void vhdlParser::Force_modeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForce_mode(this);
}


std::any vhdlParser::Force_modeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitForce_mode(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Force_modeContext* vhdlParser::force_mode() {
  Force_modeContext *_localctx = _tracker.createInstance<Force_modeContext>(_ctx, getState());
  enterRule(_localctx, 380, vhdlParser::RuleForce_mode);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1961);
    _la = _input->LA(1);
    if (!(_la == vhdlParser::KW_IN

    || _la == vhdlParser::KW_OUT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_mechanismContext ------------------------------------------------------------------

vhdlParser::Delay_mechanismContext::Delay_mechanismContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Delay_mechanismContext::KW_TRANSPORT() {
  return getToken(vhdlParser::KW_TRANSPORT, 0);
}

tree::TerminalNode* vhdlParser::Delay_mechanismContext::KW_INERTIAL() {
  return getToken(vhdlParser::KW_INERTIAL, 0);
}

tree::TerminalNode* vhdlParser::Delay_mechanismContext::KW_REJECT() {
  return getToken(vhdlParser::KW_REJECT, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Delay_mechanismContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::Delay_mechanismContext::getRuleIndex() const {
  return vhdlParser::RuleDelay_mechanism;
}

void vhdlParser::Delay_mechanismContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_mechanism(this);
}

void vhdlParser::Delay_mechanismContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_mechanism(this);
}


std::any vhdlParser::Delay_mechanismContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitDelay_mechanism(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Delay_mechanismContext* vhdlParser::delay_mechanism() {
  Delay_mechanismContext *_localctx = _tracker.createInstance<Delay_mechanismContext>(_ctx, getState());
  enterRule(_localctx, 382, vhdlParser::RuleDelay_mechanism);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1969);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_TRANSPORT: {
        enterOuterAlt(_localctx, 1);
        setState(1963);
        match(vhdlParser::KW_TRANSPORT);
        break;
      }

      case vhdlParser::KW_INERTIAL:
      case vhdlParser::KW_REJECT: {
        enterOuterAlt(_localctx, 2);
        setState(1966);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == vhdlParser::KW_REJECT) {
          setState(1964);
          match(vhdlParser::KW_REJECT);
          setState(1965);
          expression(0);
        }
        setState(1968);
        match(vhdlParser::KW_INERTIAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TargetContext ------------------------------------------------------------------

vhdlParser::TargetContext::TargetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::TargetContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

vhdlParser::AggregateContext* vhdlParser::TargetContext::aggregate() {
  return getRuleContext<vhdlParser::AggregateContext>(0);
}


size_t vhdlParser::TargetContext::getRuleIndex() const {
  return vhdlParser::RuleTarget;
}

void vhdlParser::TargetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTarget(this);
}

void vhdlParser::TargetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTarget(this);
}


std::any vhdlParser::TargetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitTarget(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::TargetContext* vhdlParser::target() {
  TargetContext *_localctx = _tracker.createInstance<TargetContext>(_ctx, getState());
  enterRule(_localctx, 384, vhdlParser::RuleTarget);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1973);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::SHIFT_LEFT: {
        enterOuterAlt(_localctx, 1);
        setState(1971);
        name(0);
        break;
      }

      case vhdlParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(1972);
        aggregate();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WaveformContext ------------------------------------------------------------------

vhdlParser::WaveformContext::WaveformContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::Waveform_elementContext *> vhdlParser::WaveformContext::waveform_element() {
  return getRuleContexts<vhdlParser::Waveform_elementContext>();
}

vhdlParser::Waveform_elementContext* vhdlParser::WaveformContext::waveform_element(size_t i) {
  return getRuleContext<vhdlParser::Waveform_elementContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::WaveformContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::WaveformContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}

tree::TerminalNode* vhdlParser::WaveformContext::KW_UNAFFECTED() {
  return getToken(vhdlParser::KW_UNAFFECTED, 0);
}


size_t vhdlParser::WaveformContext::getRuleIndex() const {
  return vhdlParser::RuleWaveform;
}

void vhdlParser::WaveformContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWaveform(this);
}

void vhdlParser::WaveformContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWaveform(this);
}


std::any vhdlParser::WaveformContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitWaveform(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::WaveformContext* vhdlParser::waveform() {
  WaveformContext *_localctx = _tracker.createInstance<WaveformContext>(_ctx, getState());
  enterRule(_localctx, 386, vhdlParser::RuleWaveform);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1984);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_ABS:
      case vhdlParser::KW_XNOR:
      case vhdlParser::KW_XOR:
      case vhdlParser::KW_NEW:
      case vhdlParser::KW_OR:
      case vhdlParser::KW_NOR:
      case vhdlParser::KW_AND:
      case vhdlParser::KW_NAND:
      case vhdlParser::KW_NOT:
      case vhdlParser::KW_NULL:
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::DECIMAL_LITERAL:
      case vhdlParser::BASED_LITERAL:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::BIT_STRING_LITERAL:
      case vhdlParser::LPAREN:
      case vhdlParser::SHIFT_LEFT:
      case vhdlParser::PLUS:
      case vhdlParser::MINUS:
      case vhdlParser::COND_OP: {
        enterOuterAlt(_localctx, 1);
        setState(1975);
        waveform_element();
        setState(1980);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == vhdlParser::COMMA) {
          setState(1976);
          match(vhdlParser::COMMA);
          setState(1977);
          waveform_element();
          setState(1982);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case vhdlParser::KW_UNAFFECTED: {
        enterOuterAlt(_localctx, 2);
        setState(1983);
        match(vhdlParser::KW_UNAFFECTED);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Waveform_elementContext ------------------------------------------------------------------

vhdlParser::Waveform_elementContext::Waveform_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::ExpressionContext *> vhdlParser::Waveform_elementContext::expression() {
  return getRuleContexts<vhdlParser::ExpressionContext>();
}

vhdlParser::ExpressionContext* vhdlParser::Waveform_elementContext::expression(size_t i) {
  return getRuleContext<vhdlParser::ExpressionContext>(i);
}

tree::TerminalNode* vhdlParser::Waveform_elementContext::KW_AFTER() {
  return getToken(vhdlParser::KW_AFTER, 0);
}

tree::TerminalNode* vhdlParser::Waveform_elementContext::KW_NULL() {
  return getToken(vhdlParser::KW_NULL, 0);
}


size_t vhdlParser::Waveform_elementContext::getRuleIndex() const {
  return vhdlParser::RuleWaveform_element;
}

void vhdlParser::Waveform_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWaveform_element(this);
}

void vhdlParser::Waveform_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWaveform_element(this);
}


std::any vhdlParser::Waveform_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitWaveform_element(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Waveform_elementContext* vhdlParser::waveform_element() {
  Waveform_elementContext *_localctx = _tracker.createInstance<Waveform_elementContext>(_ctx, getState());
  enterRule(_localctx, 388, vhdlParser::RuleWaveform_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1996);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1986);
      expression(0);
      setState(1989);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_AFTER) {
        setState(1987);
        match(vhdlParser::KW_AFTER);
        setState(1988);
        expression(0);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1991);
      match(vhdlParser::KW_NULL);
      setState(1994);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_AFTER) {
        setState(1992);
        match(vhdlParser::KW_AFTER);
        setState(1993);
        expression(0);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_signal_assignmentContext ------------------------------------------------------------------

vhdlParser::Conditional_signal_assignmentContext::Conditional_signal_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Conditional_waveform_assignmentContext* vhdlParser::Conditional_signal_assignmentContext::conditional_waveform_assignment() {
  return getRuleContext<vhdlParser::Conditional_waveform_assignmentContext>(0);
}

vhdlParser::Conditional_force_assignmentContext* vhdlParser::Conditional_signal_assignmentContext::conditional_force_assignment() {
  return getRuleContext<vhdlParser::Conditional_force_assignmentContext>(0);
}


size_t vhdlParser::Conditional_signal_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleConditional_signal_assignment;
}

void vhdlParser::Conditional_signal_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_signal_assignment(this);
}

void vhdlParser::Conditional_signal_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_signal_assignment(this);
}


std::any vhdlParser::Conditional_signal_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConditional_signal_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Conditional_signal_assignmentContext* vhdlParser::conditional_signal_assignment() {
  Conditional_signal_assignmentContext *_localctx = _tracker.createInstance<Conditional_signal_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 390, vhdlParser::RuleConditional_signal_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2000);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1998);
      conditional_waveform_assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1999);
      conditional_force_assignment();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_waveform_assignmentContext ------------------------------------------------------------------

vhdlParser::Conditional_waveform_assignmentContext::Conditional_waveform_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::TargetContext* vhdlParser::Conditional_waveform_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Conditional_waveform_assignmentContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

vhdlParser::Conditional_waveformsContext* vhdlParser::Conditional_waveform_assignmentContext::conditional_waveforms() {
  return getRuleContext<vhdlParser::Conditional_waveformsContext>(0);
}

tree::TerminalNode* vhdlParser::Conditional_waveform_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Delay_mechanismContext* vhdlParser::Conditional_waveform_assignmentContext::delay_mechanism() {
  return getRuleContext<vhdlParser::Delay_mechanismContext>(0);
}


size_t vhdlParser::Conditional_waveform_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleConditional_waveform_assignment;
}

void vhdlParser::Conditional_waveform_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_waveform_assignment(this);
}

void vhdlParser::Conditional_waveform_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_waveform_assignment(this);
}


std::any vhdlParser::Conditional_waveform_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConditional_waveform_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Conditional_waveform_assignmentContext* vhdlParser::conditional_waveform_assignment() {
  Conditional_waveform_assignmentContext *_localctx = _tracker.createInstance<Conditional_waveform_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 392, vhdlParser::RuleConditional_waveform_assignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2002);
    target();
    setState(2003);
    match(vhdlParser::CONASGN);
    setState(2005);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251800350558208) != 0) {
      setState(2004);
      delay_mechanism();
    }
    setState(2007);
    conditional_waveforms();
    setState(2008);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_waveformsContext ------------------------------------------------------------------

vhdlParser::Conditional_waveformsContext::Conditional_waveformsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::WaveformContext *> vhdlParser::Conditional_waveformsContext::waveform() {
  return getRuleContexts<vhdlParser::WaveformContext>();
}

vhdlParser::WaveformContext* vhdlParser::Conditional_waveformsContext::waveform(size_t i) {
  return getRuleContext<vhdlParser::WaveformContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Conditional_waveformsContext::KW_WHEN() {
  return getTokens(vhdlParser::KW_WHEN);
}

tree::TerminalNode* vhdlParser::Conditional_waveformsContext::KW_WHEN(size_t i) {
  return getToken(vhdlParser::KW_WHEN, i);
}

std::vector<vhdlParser::ConditionContext *> vhdlParser::Conditional_waveformsContext::condition() {
  return getRuleContexts<vhdlParser::ConditionContext>();
}

vhdlParser::ConditionContext* vhdlParser::Conditional_waveformsContext::condition(size_t i) {
  return getRuleContext<vhdlParser::ConditionContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Conditional_waveformsContext::KW_ELSE() {
  return getTokens(vhdlParser::KW_ELSE);
}

tree::TerminalNode* vhdlParser::Conditional_waveformsContext::KW_ELSE(size_t i) {
  return getToken(vhdlParser::KW_ELSE, i);
}


size_t vhdlParser::Conditional_waveformsContext::getRuleIndex() const {
  return vhdlParser::RuleConditional_waveforms;
}

void vhdlParser::Conditional_waveformsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_waveforms(this);
}

void vhdlParser::Conditional_waveformsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_waveforms(this);
}


std::any vhdlParser::Conditional_waveformsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConditional_waveforms(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Conditional_waveformsContext* vhdlParser::conditional_waveforms() {
  Conditional_waveformsContext *_localctx = _tracker.createInstance<Conditional_waveformsContext>(_ctx, getState());
  enterRule(_localctx, 394, vhdlParser::RuleConditional_waveforms);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2010);
    waveform();
    setState(2011);
    match(vhdlParser::KW_WHEN);
    setState(2012);
    condition();
    setState(2020);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2013);
        match(vhdlParser::KW_ELSE);
        setState(2014);
        waveform();
        setState(2015);
        match(vhdlParser::KW_WHEN);
        setState(2016);
        condition(); 
      }
      setState(2022);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
    }
    setState(2026);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      setState(2023);
      match(vhdlParser::KW_ELSE);
      setState(2024);
      waveform();
      break;
    }

    case 2: {
      setState(2025);

      if (!(_input->LA(1) != KW_ELSE)) throw FailedPredicateException(this, "_input->LA(1) != KW_ELSE");
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_force_assignmentContext ------------------------------------------------------------------

vhdlParser::Conditional_force_assignmentContext::Conditional_force_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::TargetContext* vhdlParser::Conditional_force_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Conditional_force_assignmentContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

tree::TerminalNode* vhdlParser::Conditional_force_assignmentContext::KW_FORCE() {
  return getToken(vhdlParser::KW_FORCE, 0);
}

vhdlParser::Conditional_expressionsContext* vhdlParser::Conditional_force_assignmentContext::conditional_expressions() {
  return getRuleContext<vhdlParser::Conditional_expressionsContext>(0);
}

tree::TerminalNode* vhdlParser::Conditional_force_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Force_modeContext* vhdlParser::Conditional_force_assignmentContext::force_mode() {
  return getRuleContext<vhdlParser::Force_modeContext>(0);
}


size_t vhdlParser::Conditional_force_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleConditional_force_assignment;
}

void vhdlParser::Conditional_force_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_force_assignment(this);
}

void vhdlParser::Conditional_force_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_force_assignment(this);
}


std::any vhdlParser::Conditional_force_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConditional_force_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Conditional_force_assignmentContext* vhdlParser::conditional_force_assignment() {
  Conditional_force_assignmentContext *_localctx = _tracker.createInstance<Conditional_force_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 396, vhdlParser::RuleConditional_force_assignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2028);
    target();
    setState(2029);
    match(vhdlParser::CONASGN);
    setState(2030);
    match(vhdlParser::KW_FORCE);
    setState(2032);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IN

    || _la == vhdlParser::KW_OUT) {
      setState(2031);
      force_mode();
    }
    setState(2034);
    conditional_expressions();
    setState(2035);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_expressionsContext ------------------------------------------------------------------

vhdlParser::Conditional_expressionsContext::Conditional_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::ExpressionContext *> vhdlParser::Conditional_expressionsContext::expression() {
  return getRuleContexts<vhdlParser::ExpressionContext>();
}

vhdlParser::ExpressionContext* vhdlParser::Conditional_expressionsContext::expression(size_t i) {
  return getRuleContext<vhdlParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Conditional_expressionsContext::KW_WHEN() {
  return getTokens(vhdlParser::KW_WHEN);
}

tree::TerminalNode* vhdlParser::Conditional_expressionsContext::KW_WHEN(size_t i) {
  return getToken(vhdlParser::KW_WHEN, i);
}

std::vector<vhdlParser::ConditionContext *> vhdlParser::Conditional_expressionsContext::condition() {
  return getRuleContexts<vhdlParser::ConditionContext>();
}

vhdlParser::ConditionContext* vhdlParser::Conditional_expressionsContext::condition(size_t i) {
  return getRuleContext<vhdlParser::ConditionContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Conditional_expressionsContext::KW_ELSE() {
  return getTokens(vhdlParser::KW_ELSE);
}

tree::TerminalNode* vhdlParser::Conditional_expressionsContext::KW_ELSE(size_t i) {
  return getToken(vhdlParser::KW_ELSE, i);
}


size_t vhdlParser::Conditional_expressionsContext::getRuleIndex() const {
  return vhdlParser::RuleConditional_expressions;
}

void vhdlParser::Conditional_expressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_expressions(this);
}

void vhdlParser::Conditional_expressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_expressions(this);
}


std::any vhdlParser::Conditional_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConditional_expressions(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Conditional_expressionsContext* vhdlParser::conditional_expressions() {
  Conditional_expressionsContext *_localctx = _tracker.createInstance<Conditional_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 398, vhdlParser::RuleConditional_expressions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2037);
    expression(0);
    setState(2038);
    match(vhdlParser::KW_WHEN);
    setState(2039);
    condition();
    setState(2047);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2040);
        match(vhdlParser::KW_ELSE);
        setState(2041);
        expression(0);
        setState(2042);
        match(vhdlParser::KW_WHEN);
        setState(2043);
        condition(); 
      }
      setState(2049);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx);
    }
    setState(2053);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
    case 1: {
      setState(2050);
      match(vhdlParser::KW_ELSE);
      setState(2051);
      expression(0);
      break;
    }

    case 2: {
      setState(2052);

      if (!(_input->LA(1) != KW_ELSE)) throw FailedPredicateException(this, "_input->LA(1) != KW_ELSE");
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selected_signal_assignmentContext ------------------------------------------------------------------

vhdlParser::Selected_signal_assignmentContext::Selected_signal_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Selected_waveform_assignmentContext* vhdlParser::Selected_signal_assignmentContext::selected_waveform_assignment() {
  return getRuleContext<vhdlParser::Selected_waveform_assignmentContext>(0);
}

vhdlParser::Selected_force_assignmentContext* vhdlParser::Selected_signal_assignmentContext::selected_force_assignment() {
  return getRuleContext<vhdlParser::Selected_force_assignmentContext>(0);
}


size_t vhdlParser::Selected_signal_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleSelected_signal_assignment;
}

void vhdlParser::Selected_signal_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelected_signal_assignment(this);
}

void vhdlParser::Selected_signal_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelected_signal_assignment(this);
}


std::any vhdlParser::Selected_signal_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSelected_signal_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Selected_signal_assignmentContext* vhdlParser::selected_signal_assignment() {
  Selected_signal_assignmentContext *_localctx = _tracker.createInstance<Selected_signal_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 400, vhdlParser::RuleSelected_signal_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2057);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2055);
      selected_waveform_assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2056);
      selected_force_assignment();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selected_waveform_assignmentContext ------------------------------------------------------------------

vhdlParser::Selected_waveform_assignmentContext::Selected_waveform_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Selected_waveform_assignmentContext::KW_WITH() {
  return getToken(vhdlParser::KW_WITH, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Selected_waveform_assignmentContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Selected_waveform_assignmentContext::KW_SELECT() {
  return getToken(vhdlParser::KW_SELECT, 0);
}

vhdlParser::TargetContext* vhdlParser::Selected_waveform_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Selected_waveform_assignmentContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

vhdlParser::Selected_waveformsContext* vhdlParser::Selected_waveform_assignmentContext::selected_waveforms() {
  return getRuleContext<vhdlParser::Selected_waveformsContext>(0);
}

tree::TerminalNode* vhdlParser::Selected_waveform_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Selected_waveform_assignmentContext::QUESTIONMARK() {
  return getToken(vhdlParser::QUESTIONMARK, 0);
}

vhdlParser::Delay_mechanismContext* vhdlParser::Selected_waveform_assignmentContext::delay_mechanism() {
  return getRuleContext<vhdlParser::Delay_mechanismContext>(0);
}


size_t vhdlParser::Selected_waveform_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleSelected_waveform_assignment;
}

void vhdlParser::Selected_waveform_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelected_waveform_assignment(this);
}

void vhdlParser::Selected_waveform_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelected_waveform_assignment(this);
}


std::any vhdlParser::Selected_waveform_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSelected_waveform_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Selected_waveform_assignmentContext* vhdlParser::selected_waveform_assignment() {
  Selected_waveform_assignmentContext *_localctx = _tracker.createInstance<Selected_waveform_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 402, vhdlParser::RuleSelected_waveform_assignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2059);
    match(vhdlParser::KW_WITH);
    setState(2060);
    expression(0);
    setState(2061);
    match(vhdlParser::KW_SELECT);
    setState(2063);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::QUESTIONMARK) {
      setState(2062);
      match(vhdlParser::QUESTIONMARK);
    }
    setState(2065);
    target();
    setState(2066);
    match(vhdlParser::CONASGN);
    setState(2068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251800350558208) != 0) {
      setState(2067);
      delay_mechanism();
    }
    setState(2070);
    selected_waveforms();
    setState(2071);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selected_waveformsContext ------------------------------------------------------------------

vhdlParser::Selected_waveformsContext::Selected_waveformsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::WaveformContext *> vhdlParser::Selected_waveformsContext::waveform() {
  return getRuleContexts<vhdlParser::WaveformContext>();
}

vhdlParser::WaveformContext* vhdlParser::Selected_waveformsContext::waveform(size_t i) {
  return getRuleContext<vhdlParser::WaveformContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Selected_waveformsContext::KW_WHEN() {
  return getTokens(vhdlParser::KW_WHEN);
}

tree::TerminalNode* vhdlParser::Selected_waveformsContext::KW_WHEN(size_t i) {
  return getToken(vhdlParser::KW_WHEN, i);
}

std::vector<vhdlParser::ChoicesContext *> vhdlParser::Selected_waveformsContext::choices() {
  return getRuleContexts<vhdlParser::ChoicesContext>();
}

vhdlParser::ChoicesContext* vhdlParser::Selected_waveformsContext::choices(size_t i) {
  return getRuleContext<vhdlParser::ChoicesContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Selected_waveformsContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Selected_waveformsContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Selected_waveformsContext::getRuleIndex() const {
  return vhdlParser::RuleSelected_waveforms;
}

void vhdlParser::Selected_waveformsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelected_waveforms(this);
}

void vhdlParser::Selected_waveformsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelected_waveforms(this);
}


std::any vhdlParser::Selected_waveformsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSelected_waveforms(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Selected_waveformsContext* vhdlParser::selected_waveforms() {
  Selected_waveformsContext *_localctx = _tracker.createInstance<Selected_waveformsContext>(_ctx, getState());
  enterRule(_localctx, 404, vhdlParser::RuleSelected_waveforms);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2073);
    waveform();
    setState(2074);
    match(vhdlParser::KW_WHEN);
    setState(2075);
    choices();
    setState(2083);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(2076);
      match(vhdlParser::COMMA);
      setState(2077);
      waveform();
      setState(2078);
      match(vhdlParser::KW_WHEN);
      setState(2079);
      choices();
      setState(2085);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selected_force_assignmentContext ------------------------------------------------------------------

vhdlParser::Selected_force_assignmentContext::Selected_force_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Selected_force_assignmentContext::KW_WITH() {
  return getToken(vhdlParser::KW_WITH, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Selected_force_assignmentContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Selected_force_assignmentContext::KW_SELECT() {
  return getToken(vhdlParser::KW_SELECT, 0);
}

vhdlParser::TargetContext* vhdlParser::Selected_force_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Selected_force_assignmentContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

tree::TerminalNode* vhdlParser::Selected_force_assignmentContext::KW_FORCE() {
  return getToken(vhdlParser::KW_FORCE, 0);
}

vhdlParser::Selected_expressionsContext* vhdlParser::Selected_force_assignmentContext::selected_expressions() {
  return getRuleContext<vhdlParser::Selected_expressionsContext>(0);
}

tree::TerminalNode* vhdlParser::Selected_force_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Selected_force_assignmentContext::QUESTIONMARK() {
  return getToken(vhdlParser::QUESTIONMARK, 0);
}

vhdlParser::Force_modeContext* vhdlParser::Selected_force_assignmentContext::force_mode() {
  return getRuleContext<vhdlParser::Force_modeContext>(0);
}


size_t vhdlParser::Selected_force_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleSelected_force_assignment;
}

void vhdlParser::Selected_force_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelected_force_assignment(this);
}

void vhdlParser::Selected_force_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelected_force_assignment(this);
}


std::any vhdlParser::Selected_force_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSelected_force_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Selected_force_assignmentContext* vhdlParser::selected_force_assignment() {
  Selected_force_assignmentContext *_localctx = _tracker.createInstance<Selected_force_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 406, vhdlParser::RuleSelected_force_assignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2086);
    match(vhdlParser::KW_WITH);
    setState(2087);
    expression(0);
    setState(2088);
    match(vhdlParser::KW_SELECT);
    setState(2090);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::QUESTIONMARK) {
      setState(2089);
      match(vhdlParser::QUESTIONMARK);
    }
    setState(2092);
    target();
    setState(2093);
    match(vhdlParser::CONASGN);
    setState(2094);
    match(vhdlParser::KW_FORCE);
    setState(2096);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IN

    || _la == vhdlParser::KW_OUT) {
      setState(2095);
      force_mode();
    }
    setState(2098);
    selected_expressions();
    setState(2099);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selected_expressionsContext ------------------------------------------------------------------

vhdlParser::Selected_expressionsContext::Selected_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::ExpressionContext *> vhdlParser::Selected_expressionsContext::expression() {
  return getRuleContexts<vhdlParser::ExpressionContext>();
}

vhdlParser::ExpressionContext* vhdlParser::Selected_expressionsContext::expression(size_t i) {
  return getRuleContext<vhdlParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Selected_expressionsContext::KW_WHEN() {
  return getTokens(vhdlParser::KW_WHEN);
}

tree::TerminalNode* vhdlParser::Selected_expressionsContext::KW_WHEN(size_t i) {
  return getToken(vhdlParser::KW_WHEN, i);
}

std::vector<vhdlParser::ChoicesContext *> vhdlParser::Selected_expressionsContext::choices() {
  return getRuleContexts<vhdlParser::ChoicesContext>();
}

vhdlParser::ChoicesContext* vhdlParser::Selected_expressionsContext::choices(size_t i) {
  return getRuleContext<vhdlParser::ChoicesContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::Selected_expressionsContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Selected_expressionsContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Selected_expressionsContext::getRuleIndex() const {
  return vhdlParser::RuleSelected_expressions;
}

void vhdlParser::Selected_expressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelected_expressions(this);
}

void vhdlParser::Selected_expressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelected_expressions(this);
}


std::any vhdlParser::Selected_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSelected_expressions(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Selected_expressionsContext* vhdlParser::selected_expressions() {
  Selected_expressionsContext *_localctx = _tracker.createInstance<Selected_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 408, vhdlParser::RuleSelected_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2101);
    expression(0);
    setState(2102);
    match(vhdlParser::KW_WHEN);
    setState(2103);
    choices();
    setState(2111);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(2104);
      match(vhdlParser::COMMA);
      setState(2105);
      expression(0);
      setState(2106);
      match(vhdlParser::KW_WHEN);
      setState(2107);
      choices();
      setState(2113);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_assignment_statementContext ------------------------------------------------------------------

vhdlParser::Variable_assignment_statementContext::Variable_assignment_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Simple_variable_assignmentContext* vhdlParser::Variable_assignment_statementContext::simple_variable_assignment() {
  return getRuleContext<vhdlParser::Simple_variable_assignmentContext>(0);
}

vhdlParser::Conditional_variable_assignmentContext* vhdlParser::Variable_assignment_statementContext::conditional_variable_assignment() {
  return getRuleContext<vhdlParser::Conditional_variable_assignmentContext>(0);
}

vhdlParser::Selected_variable_assignmentContext* vhdlParser::Variable_assignment_statementContext::selected_variable_assignment() {
  return getRuleContext<vhdlParser::Selected_variable_assignmentContext>(0);
}


size_t vhdlParser::Variable_assignment_statementContext::getRuleIndex() const {
  return vhdlParser::RuleVariable_assignment_statement;
}

void vhdlParser::Variable_assignment_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_assignment_statement(this);
}

void vhdlParser::Variable_assignment_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_assignment_statement(this);
}


std::any vhdlParser::Variable_assignment_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitVariable_assignment_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Variable_assignment_statementContext* vhdlParser::variable_assignment_statement() {
  Variable_assignment_statementContext *_localctx = _tracker.createInstance<Variable_assignment_statementContext>(_ctx, getState());
  enterRule(_localctx, 410, vhdlParser::RuleVariable_assignment_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2117);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2114);
      simple_variable_assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2115);
      conditional_variable_assignment();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2116);
      selected_variable_assignment();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_variable_assignmentContext ------------------------------------------------------------------

vhdlParser::Simple_variable_assignmentContext::Simple_variable_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::TargetContext* vhdlParser::Simple_variable_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Simple_variable_assignmentContext::VARASGN() {
  return getToken(vhdlParser::VARASGN, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Simple_variable_assignmentContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Simple_variable_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Simple_variable_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleSimple_variable_assignment;
}

void vhdlParser::Simple_variable_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_variable_assignment(this);
}

void vhdlParser::Simple_variable_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_variable_assignment(this);
}


std::any vhdlParser::Simple_variable_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSimple_variable_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Simple_variable_assignmentContext* vhdlParser::simple_variable_assignment() {
  Simple_variable_assignmentContext *_localctx = _tracker.createInstance<Simple_variable_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 412, vhdlParser::RuleSimple_variable_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2119);
    target();
    setState(2120);
    match(vhdlParser::VARASGN);
    setState(2121);
    expression(0);
    setState(2122);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_variable_assignmentContext ------------------------------------------------------------------

vhdlParser::Conditional_variable_assignmentContext::Conditional_variable_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::TargetContext* vhdlParser::Conditional_variable_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Conditional_variable_assignmentContext::VARASGN() {
  return getToken(vhdlParser::VARASGN, 0);
}

vhdlParser::Conditional_expressionsContext* vhdlParser::Conditional_variable_assignmentContext::conditional_expressions() {
  return getRuleContext<vhdlParser::Conditional_expressionsContext>(0);
}

tree::TerminalNode* vhdlParser::Conditional_variable_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Conditional_variable_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleConditional_variable_assignment;
}

void vhdlParser::Conditional_variable_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_variable_assignment(this);
}

void vhdlParser::Conditional_variable_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_variable_assignment(this);
}


std::any vhdlParser::Conditional_variable_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConditional_variable_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Conditional_variable_assignmentContext* vhdlParser::conditional_variable_assignment() {
  Conditional_variable_assignmentContext *_localctx = _tracker.createInstance<Conditional_variable_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 414, vhdlParser::RuleConditional_variable_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2124);
    target();
    setState(2125);
    match(vhdlParser::VARASGN);
    setState(2126);
    conditional_expressions();
    setState(2127);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selected_variable_assignmentContext ------------------------------------------------------------------

vhdlParser::Selected_variable_assignmentContext::Selected_variable_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Selected_variable_assignmentContext::KW_WITH() {
  return getToken(vhdlParser::KW_WITH, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Selected_variable_assignmentContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Selected_variable_assignmentContext::KW_SELECT() {
  return getToken(vhdlParser::KW_SELECT, 0);
}

vhdlParser::TargetContext* vhdlParser::Selected_variable_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Selected_variable_assignmentContext::VARASGN() {
  return getToken(vhdlParser::VARASGN, 0);
}

vhdlParser::Selected_expressionsContext* vhdlParser::Selected_variable_assignmentContext::selected_expressions() {
  return getRuleContext<vhdlParser::Selected_expressionsContext>(0);
}

tree::TerminalNode* vhdlParser::Selected_variable_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Selected_variable_assignmentContext::QUESTIONMARK() {
  return getToken(vhdlParser::QUESTIONMARK, 0);
}


size_t vhdlParser::Selected_variable_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleSelected_variable_assignment;
}

void vhdlParser::Selected_variable_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelected_variable_assignment(this);
}

void vhdlParser::Selected_variable_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelected_variable_assignment(this);
}


std::any vhdlParser::Selected_variable_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSelected_variable_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Selected_variable_assignmentContext* vhdlParser::selected_variable_assignment() {
  Selected_variable_assignmentContext *_localctx = _tracker.createInstance<Selected_variable_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 416, vhdlParser::RuleSelected_variable_assignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2129);
    match(vhdlParser::KW_WITH);
    setState(2130);
    expression(0);
    setState(2131);
    match(vhdlParser::KW_SELECT);
    setState(2133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::QUESTIONMARK) {
      setState(2132);
      match(vhdlParser::QUESTIONMARK);
    }
    setState(2135);
    target();
    setState(2136);
    match(vhdlParser::VARASGN);
    setState(2137);
    selected_expressions();
    setState(2138);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_call_statementContext ------------------------------------------------------------------

vhdlParser::Procedure_call_statementContext::Procedure_call_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Procedure_callContext* vhdlParser::Procedure_call_statementContext::procedure_call() {
  return getRuleContext<vhdlParser::Procedure_callContext>(0);
}

tree::TerminalNode* vhdlParser::Procedure_call_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Procedure_call_statementContext::getRuleIndex() const {
  return vhdlParser::RuleProcedure_call_statement;
}

void vhdlParser::Procedure_call_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedure_call_statement(this);
}

void vhdlParser::Procedure_call_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedure_call_statement(this);
}


std::any vhdlParser::Procedure_call_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProcedure_call_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Procedure_call_statementContext* vhdlParser::procedure_call_statement() {
  Procedure_call_statementContext *_localctx = _tracker.createInstance<Procedure_call_statementContext>(_ctx, getState());
  enterRule(_localctx, 418, vhdlParser::RuleProcedure_call_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2140);
    procedure_call();
    setState(2141);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_callContext ------------------------------------------------------------------

vhdlParser::Procedure_callContext::Procedure_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::Procedure_callContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}


size_t vhdlParser::Procedure_callContext::getRuleIndex() const {
  return vhdlParser::RuleProcedure_call;
}

void vhdlParser::Procedure_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedure_call(this);
}

void vhdlParser::Procedure_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedure_call(this);
}


std::any vhdlParser::Procedure_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProcedure_call(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Procedure_callContext* vhdlParser::procedure_call() {
  Procedure_callContext *_localctx = _tracker.createInstance<Procedure_callContext>(_ctx, getState());
  enterRule(_localctx, 420, vhdlParser::RuleProcedure_call);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2143);
    name(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_statementContext ------------------------------------------------------------------

vhdlParser::If_statementContext::If_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::If_statementContext::KW_IF() {
  return getTokens(vhdlParser::KW_IF);
}

tree::TerminalNode* vhdlParser::If_statementContext::KW_IF(size_t i) {
  return getToken(vhdlParser::KW_IF, i);
}

std::vector<vhdlParser::ConditionContext *> vhdlParser::If_statementContext::condition() {
  return getRuleContexts<vhdlParser::ConditionContext>();
}

vhdlParser::ConditionContext* vhdlParser::If_statementContext::condition(size_t i) {
  return getRuleContext<vhdlParser::ConditionContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::If_statementContext::KW_THEN() {
  return getTokens(vhdlParser::KW_THEN);
}

tree::TerminalNode* vhdlParser::If_statementContext::KW_THEN(size_t i) {
  return getToken(vhdlParser::KW_THEN, i);
}

std::vector<vhdlParser::Sequence_of_statementsContext *> vhdlParser::If_statementContext::sequence_of_statements() {
  return getRuleContexts<vhdlParser::Sequence_of_statementsContext>();
}

vhdlParser::Sequence_of_statementsContext* vhdlParser::If_statementContext::sequence_of_statements(size_t i) {
  return getRuleContext<vhdlParser::Sequence_of_statementsContext>(i);
}

tree::TerminalNode* vhdlParser::If_statementContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::If_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::If_statementContext::KW_ELSE() {
  return getToken(vhdlParser::KW_ELSE, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::If_statementContext::KW_ELSIF() {
  return getTokens(vhdlParser::KW_ELSIF);
}

tree::TerminalNode* vhdlParser::If_statementContext::KW_ELSIF(size_t i) {
  return getToken(vhdlParser::KW_ELSIF, i);
}

vhdlParser::LabelContext* vhdlParser::If_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}


size_t vhdlParser::If_statementContext::getRuleIndex() const {
  return vhdlParser::RuleIf_statement;
}

void vhdlParser::If_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_statement(this);
}

void vhdlParser::If_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_statement(this);
}


std::any vhdlParser::If_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitIf_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::If_statementContext* vhdlParser::if_statement() {
  If_statementContext *_localctx = _tracker.createInstance<If_statementContext>(_ctx, getState());
  enterRule(_localctx, 422, vhdlParser::RuleIf_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2145);
    match(vhdlParser::KW_IF);
    setState(2146);
    condition();
    setState(2147);
    match(vhdlParser::KW_THEN);
    setState(2148);
    sequence_of_statements();
    setState(2156);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2149);
        match(vhdlParser::KW_ELSIF);
        setState(2150);
        condition();
        setState(2151);
        match(vhdlParser::KW_THEN);
        setState(2152);
        sequence_of_statements(); 
      }
      setState(2158);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
    }
    setState(2163);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      setState(2159);
      match(vhdlParser::KW_ELSE);
      setState(2160);
      sequence_of_statements();
      break;
    }

    case 2: {
      break;
    }

    case 3: {
      setState(2162);

      if (!(_input->LA(1) != KW_ELSE)) throw FailedPredicateException(this, "_input->LA(1) != KW_ELSE");
      break;
    }

    default:
      break;
    }
    setState(2165);
    match(vhdlParser::KW_END);
    setState(2166);
    match(vhdlParser::KW_IF);
    setState(2168);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2167);
      label();
    }
    setState(2170);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_statementContext ------------------------------------------------------------------

vhdlParser::Case_statementContext::Case_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Case_statementContext::KW_CASE() {
  return getTokens(vhdlParser::KW_CASE);
}

tree::TerminalNode* vhdlParser::Case_statementContext::KW_CASE(size_t i) {
  return getToken(vhdlParser::KW_CASE, i);
}

vhdlParser::ExpressionContext* vhdlParser::Case_statementContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Case_statementContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

tree::TerminalNode* vhdlParser::Case_statementContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Case_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Case_statementContext::QUESTIONMARK() {
  return getTokens(vhdlParser::QUESTIONMARK);
}

tree::TerminalNode* vhdlParser::Case_statementContext::QUESTIONMARK(size_t i) {
  return getToken(vhdlParser::QUESTIONMARK, i);
}

std::vector<vhdlParser::Case_statement_alternativeContext *> vhdlParser::Case_statementContext::case_statement_alternative() {
  return getRuleContexts<vhdlParser::Case_statement_alternativeContext>();
}

vhdlParser::Case_statement_alternativeContext* vhdlParser::Case_statementContext::case_statement_alternative(size_t i) {
  return getRuleContext<vhdlParser::Case_statement_alternativeContext>(i);
}

vhdlParser::LabelContext* vhdlParser::Case_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}


size_t vhdlParser::Case_statementContext::getRuleIndex() const {
  return vhdlParser::RuleCase_statement;
}

void vhdlParser::Case_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_statement(this);
}

void vhdlParser::Case_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_statement(this);
}


std::any vhdlParser::Case_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitCase_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Case_statementContext* vhdlParser::case_statement() {
  Case_statementContext *_localctx = _tracker.createInstance<Case_statementContext>(_ctx, getState());
  enterRule(_localctx, 424, vhdlParser::RuleCase_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2172);
    match(vhdlParser::KW_CASE);
    setState(2174);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::QUESTIONMARK) {
      setState(2173);
      match(vhdlParser::QUESTIONMARK);
    }
    setState(2176);
    expression(0);
    setState(2177);
    match(vhdlParser::KW_IS);
    setState(2179); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2178);
      case_statement_alternative();
      setState(2181); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == vhdlParser::KW_WHEN);
    setState(2183);
    match(vhdlParser::KW_END);
    setState(2184);
    match(vhdlParser::KW_CASE);
    setState(2186);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::QUESTIONMARK) {
      setState(2185);
      match(vhdlParser::QUESTIONMARK);
    }
    setState(2189);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2188);
      label();
    }
    setState(2191);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_statement_alternativeContext ------------------------------------------------------------------

vhdlParser::Case_statement_alternativeContext::Case_statement_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Case_statement_alternativeContext::KW_WHEN() {
  return getToken(vhdlParser::KW_WHEN, 0);
}

vhdlParser::ChoicesContext* vhdlParser::Case_statement_alternativeContext::choices() {
  return getRuleContext<vhdlParser::ChoicesContext>(0);
}

tree::TerminalNode* vhdlParser::Case_statement_alternativeContext::ARROW() {
  return getToken(vhdlParser::ARROW, 0);
}

vhdlParser::Sequence_of_statementsContext* vhdlParser::Case_statement_alternativeContext::sequence_of_statements() {
  return getRuleContext<vhdlParser::Sequence_of_statementsContext>(0);
}


size_t vhdlParser::Case_statement_alternativeContext::getRuleIndex() const {
  return vhdlParser::RuleCase_statement_alternative;
}

void vhdlParser::Case_statement_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_statement_alternative(this);
}

void vhdlParser::Case_statement_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_statement_alternative(this);
}


std::any vhdlParser::Case_statement_alternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitCase_statement_alternative(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Case_statement_alternativeContext* vhdlParser::case_statement_alternative() {
  Case_statement_alternativeContext *_localctx = _tracker.createInstance<Case_statement_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 426, vhdlParser::RuleCase_statement_alternative);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2193);
    match(vhdlParser::KW_WHEN);
    setState(2194);
    choices();
    setState(2195);
    match(vhdlParser::ARROW);
    setState(2196);
    sequence_of_statements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Loop_statementContext ------------------------------------------------------------------

vhdlParser::Loop_statementContext::Loop_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Loop_statementContext::KW_LOOP() {
  return getTokens(vhdlParser::KW_LOOP);
}

tree::TerminalNode* vhdlParser::Loop_statementContext::KW_LOOP(size_t i) {
  return getToken(vhdlParser::KW_LOOP, i);
}

vhdlParser::Sequence_of_statementsContext* vhdlParser::Loop_statementContext::sequence_of_statements() {
  return getRuleContext<vhdlParser::Sequence_of_statementsContext>(0);
}

tree::TerminalNode* vhdlParser::Loop_statementContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Loop_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Iteration_schemeContext* vhdlParser::Loop_statementContext::iteration_scheme() {
  return getRuleContext<vhdlParser::Iteration_schemeContext>(0);
}

vhdlParser::LabelContext* vhdlParser::Loop_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}


size_t vhdlParser::Loop_statementContext::getRuleIndex() const {
  return vhdlParser::RuleLoop_statement;
}

void vhdlParser::Loop_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoop_statement(this);
}

void vhdlParser::Loop_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoop_statement(this);
}


std::any vhdlParser::Loop_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitLoop_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Loop_statementContext* vhdlParser::loop_statement() {
  Loop_statementContext *_localctx = _tracker.createInstance<Loop_statementContext>(_ctx, getState());
  enterRule(_localctx, 428, vhdlParser::RuleLoop_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2199);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_WHILE

    || _la == vhdlParser::KW_FOR) {
      setState(2198);
      iteration_scheme();
    }
    setState(2201);
    match(vhdlParser::KW_LOOP);
    setState(2202);
    sequence_of_statements();
    setState(2203);
    match(vhdlParser::KW_END);
    setState(2204);
    match(vhdlParser::KW_LOOP);
    setState(2206);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2205);
      label();
    }
    setState(2208);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Iteration_schemeContext ------------------------------------------------------------------

vhdlParser::Iteration_schemeContext::Iteration_schemeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Iteration_schemeContext::KW_WHILE() {
  return getToken(vhdlParser::KW_WHILE, 0);
}

vhdlParser::ConditionContext* vhdlParser::Iteration_schemeContext::condition() {
  return getRuleContext<vhdlParser::ConditionContext>(0);
}

tree::TerminalNode* vhdlParser::Iteration_schemeContext::KW_FOR() {
  return getToken(vhdlParser::KW_FOR, 0);
}

vhdlParser::Parameter_specificationContext* vhdlParser::Iteration_schemeContext::parameter_specification() {
  return getRuleContext<vhdlParser::Parameter_specificationContext>(0);
}


size_t vhdlParser::Iteration_schemeContext::getRuleIndex() const {
  return vhdlParser::RuleIteration_scheme;
}

void vhdlParser::Iteration_schemeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIteration_scheme(this);
}

void vhdlParser::Iteration_schemeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIteration_scheme(this);
}


std::any vhdlParser::Iteration_schemeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitIteration_scheme(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Iteration_schemeContext* vhdlParser::iteration_scheme() {
  Iteration_schemeContext *_localctx = _tracker.createInstance<Iteration_schemeContext>(_ctx, getState());
  enterRule(_localctx, 430, vhdlParser::RuleIteration_scheme);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2214);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_WHILE: {
        enterOuterAlt(_localctx, 1);
        setState(2210);
        match(vhdlParser::KW_WHILE);
        setState(2211);
        condition();
        break;
      }

      case vhdlParser::KW_FOR: {
        enterOuterAlt(_localctx, 2);
        setState(2212);
        match(vhdlParser::KW_FOR);
        setState(2213);
        parameter_specification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_specificationContext ------------------------------------------------------------------

vhdlParser::Parameter_specificationContext::Parameter_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::Parameter_specificationContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Parameter_specificationContext::KW_IN() {
  return getToken(vhdlParser::KW_IN, 0);
}

vhdlParser::Discrete_rangeContext* vhdlParser::Parameter_specificationContext::discrete_range() {
  return getRuleContext<vhdlParser::Discrete_rangeContext>(0);
}


size_t vhdlParser::Parameter_specificationContext::getRuleIndex() const {
  return vhdlParser::RuleParameter_specification;
}

void vhdlParser::Parameter_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_specification(this);
}

void vhdlParser::Parameter_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_specification(this);
}


std::any vhdlParser::Parameter_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitParameter_specification(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Parameter_specificationContext* vhdlParser::parameter_specification() {
  Parameter_specificationContext *_localctx = _tracker.createInstance<Parameter_specificationContext>(_ctx, getState());
  enterRule(_localctx, 432, vhdlParser::RuleParameter_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2216);
    identifier();
    setState(2217);
    match(vhdlParser::KW_IN);
    setState(2218);
    discrete_range();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Next_statementContext ------------------------------------------------------------------

vhdlParser::Next_statementContext::Next_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Next_statementContext::KW_NEXT() {
  return getToken(vhdlParser::KW_NEXT, 0);
}

tree::TerminalNode* vhdlParser::Next_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::LabelContext* vhdlParser::Next_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}

tree::TerminalNode* vhdlParser::Next_statementContext::KW_WHEN() {
  return getToken(vhdlParser::KW_WHEN, 0);
}

vhdlParser::ConditionContext* vhdlParser::Next_statementContext::condition() {
  return getRuleContext<vhdlParser::ConditionContext>(0);
}


size_t vhdlParser::Next_statementContext::getRuleIndex() const {
  return vhdlParser::RuleNext_statement;
}

void vhdlParser::Next_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNext_statement(this);
}

void vhdlParser::Next_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNext_statement(this);
}


std::any vhdlParser::Next_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitNext_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Next_statementContext* vhdlParser::next_statement() {
  Next_statementContext *_localctx = _tracker.createInstance<Next_statementContext>(_ctx, getState());
  enterRule(_localctx, 434, vhdlParser::RuleNext_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2220);
    match(vhdlParser::KW_NEXT);
    setState(2222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2221);
      label();
    }
    setState(2226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_WHEN) {
      setState(2224);
      match(vhdlParser::KW_WHEN);
      setState(2225);
      condition();
    }
    setState(2228);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exit_statementContext ------------------------------------------------------------------

vhdlParser::Exit_statementContext::Exit_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Exit_statementContext::KW_EXIT() {
  return getToken(vhdlParser::KW_EXIT, 0);
}

tree::TerminalNode* vhdlParser::Exit_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::LabelContext* vhdlParser::Exit_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}

tree::TerminalNode* vhdlParser::Exit_statementContext::KW_WHEN() {
  return getToken(vhdlParser::KW_WHEN, 0);
}

vhdlParser::ConditionContext* vhdlParser::Exit_statementContext::condition() {
  return getRuleContext<vhdlParser::ConditionContext>(0);
}


size_t vhdlParser::Exit_statementContext::getRuleIndex() const {
  return vhdlParser::RuleExit_statement;
}

void vhdlParser::Exit_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExit_statement(this);
}

void vhdlParser::Exit_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExit_statement(this);
}


std::any vhdlParser::Exit_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitExit_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Exit_statementContext* vhdlParser::exit_statement() {
  Exit_statementContext *_localctx = _tracker.createInstance<Exit_statementContext>(_ctx, getState());
  enterRule(_localctx, 436, vhdlParser::RuleExit_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2230);
    match(vhdlParser::KW_EXIT);
    setState(2232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2231);
      label();
    }
    setState(2236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_WHEN) {
      setState(2234);
      match(vhdlParser::KW_WHEN);
      setState(2235);
      condition();
    }
    setState(2238);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_statementContext ------------------------------------------------------------------

vhdlParser::Return_statementContext::Return_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Return_statementContext::KW_RETURN() {
  return getToken(vhdlParser::KW_RETURN, 0);
}

tree::TerminalNode* vhdlParser::Return_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Return_statementContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}


size_t vhdlParser::Return_statementContext::getRuleIndex() const {
  return vhdlParser::RuleReturn_statement;
}

void vhdlParser::Return_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_statement(this);
}

void vhdlParser::Return_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_statement(this);
}


std::any vhdlParser::Return_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitReturn_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Return_statementContext* vhdlParser::return_statement() {
  Return_statementContext *_localctx = _tracker.createInstance<Return_statementContext>(_ctx, getState());
  enterRule(_localctx, 438, vhdlParser::RuleReturn_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2240);
    match(vhdlParser::KW_RETURN);
    setState(2242);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 36066180414373952) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 576732883578782849) != 0 || (((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 8591507457) != 0) {
      setState(2241);
      expression(0);
    }
    setState(2244);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_statementContext ------------------------------------------------------------------

vhdlParser::Null_statementContext::Null_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Null_statementContext::KW_NULL() {
  return getToken(vhdlParser::KW_NULL, 0);
}

tree::TerminalNode* vhdlParser::Null_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Null_statementContext::getRuleIndex() const {
  return vhdlParser::RuleNull_statement;
}

void vhdlParser::Null_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_statement(this);
}

void vhdlParser::Null_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_statement(this);
}


std::any vhdlParser::Null_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitNull_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Null_statementContext* vhdlParser::null_statement() {
  Null_statementContext *_localctx = _tracker.createInstance<Null_statementContext>(_ctx, getState());
  enterRule(_localctx, 440, vhdlParser::RuleNull_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2246);
    match(vhdlParser::KW_NULL);
    setState(2247);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concurrent_statement_with_optional_labelContext ------------------------------------------------------------------

vhdlParser::Concurrent_statement_with_optional_labelContext::Concurrent_statement_with_optional_labelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Process_statementContext* vhdlParser::Concurrent_statement_with_optional_labelContext::process_statement() {
  return getRuleContext<vhdlParser::Process_statementContext>(0);
}

vhdlParser::Concurrent_procedure_call_statementContext* vhdlParser::Concurrent_statement_with_optional_labelContext::concurrent_procedure_call_statement() {
  return getRuleContext<vhdlParser::Concurrent_procedure_call_statementContext>(0);
}

vhdlParser::Concurrent_assertion_statementContext* vhdlParser::Concurrent_statement_with_optional_labelContext::concurrent_assertion_statement() {
  return getRuleContext<vhdlParser::Concurrent_assertion_statementContext>(0);
}

vhdlParser::Concurrent_signal_assignment_statementContext* vhdlParser::Concurrent_statement_with_optional_labelContext::concurrent_signal_assignment_statement() {
  return getRuleContext<vhdlParser::Concurrent_signal_assignment_statementContext>(0);
}


size_t vhdlParser::Concurrent_statement_with_optional_labelContext::getRuleIndex() const {
  return vhdlParser::RuleConcurrent_statement_with_optional_label;
}

void vhdlParser::Concurrent_statement_with_optional_labelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcurrent_statement_with_optional_label(this);
}

void vhdlParser::Concurrent_statement_with_optional_labelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcurrent_statement_with_optional_label(this);
}


std::any vhdlParser::Concurrent_statement_with_optional_labelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConcurrent_statement_with_optional_label(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Concurrent_statement_with_optional_labelContext* vhdlParser::concurrent_statement_with_optional_label() {
  Concurrent_statement_with_optional_labelContext *_localctx = _tracker.createInstance<Concurrent_statement_with_optional_labelContext>(_ctx, getState());
  enterRule(_localctx, 442, vhdlParser::RuleConcurrent_statement_with_optional_label);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2253);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2249);
      process_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2250);
      concurrent_procedure_call_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2251);
      concurrent_assertion_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2252);
      concurrent_signal_assignment_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concurrent_statementContext ------------------------------------------------------------------

vhdlParser::Concurrent_statementContext::Concurrent_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::LabelContext* vhdlParser::Concurrent_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}

tree::TerminalNode* vhdlParser::Concurrent_statementContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}

vhdlParser::Block_statementContext* vhdlParser::Concurrent_statementContext::block_statement() {
  return getRuleContext<vhdlParser::Block_statementContext>(0);
}

vhdlParser::Component_instantiation_statementContext* vhdlParser::Concurrent_statementContext::component_instantiation_statement() {
  return getRuleContext<vhdlParser::Component_instantiation_statementContext>(0);
}

vhdlParser::Generate_statementContext* vhdlParser::Concurrent_statementContext::generate_statement() {
  return getRuleContext<vhdlParser::Generate_statementContext>(0);
}

vhdlParser::Concurrent_statement_with_optional_labelContext* vhdlParser::Concurrent_statementContext::concurrent_statement_with_optional_label() {
  return getRuleContext<vhdlParser::Concurrent_statement_with_optional_labelContext>(0);
}


size_t vhdlParser::Concurrent_statementContext::getRuleIndex() const {
  return vhdlParser::RuleConcurrent_statement;
}

void vhdlParser::Concurrent_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcurrent_statement(this);
}

void vhdlParser::Concurrent_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcurrent_statement(this);
}


std::any vhdlParser::Concurrent_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConcurrent_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Concurrent_statementContext* vhdlParser::concurrent_statement() {
  Concurrent_statementContext *_localctx = _tracker.createInstance<Concurrent_statementContext>(_ctx, getState());
  enterRule(_localctx, 444, vhdlParser::RuleConcurrent_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2264);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2255);
      label();
      setState(2256);
      match(vhdlParser::COLON);
      setState(2261);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
      case 1: {
        setState(2257);
        block_statement();
        break;
      }

      case 2: {
        setState(2258);
        component_instantiation_statement();
        break;
      }

      case 3: {
        setState(2259);
        generate_statement();
        break;
      }

      case 4: {
        setState(2260);
        concurrent_statement_with_optional_label();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2263);
      concurrent_statement_with_optional_label();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_statementContext ------------------------------------------------------------------

vhdlParser::Block_statementContext::Block_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Block_statementContext::KW_BLOCK() {
  return getTokens(vhdlParser::KW_BLOCK);
}

tree::TerminalNode* vhdlParser::Block_statementContext::KW_BLOCK(size_t i) {
  return getToken(vhdlParser::KW_BLOCK, i);
}

vhdlParser::Block_headerContext* vhdlParser::Block_statementContext::block_header() {
  return getRuleContext<vhdlParser::Block_headerContext>(0);
}

tree::TerminalNode* vhdlParser::Block_statementContext::KW_BEGIN() {
  return getToken(vhdlParser::KW_BEGIN, 0);
}

tree::TerminalNode* vhdlParser::Block_statementContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Block_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Block_statementContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::ConditionContext* vhdlParser::Block_statementContext::condition() {
  return getRuleContext<vhdlParser::ConditionContext>(0);
}

tree::TerminalNode* vhdlParser::Block_statementContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Block_statementContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

std::vector<vhdlParser::Block_declarative_itemContext *> vhdlParser::Block_statementContext::block_declarative_item() {
  return getRuleContexts<vhdlParser::Block_declarative_itemContext>();
}

vhdlParser::Block_declarative_itemContext* vhdlParser::Block_statementContext::block_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Block_declarative_itemContext>(i);
}

std::vector<vhdlParser::Concurrent_statementContext *> vhdlParser::Block_statementContext::concurrent_statement() {
  return getRuleContexts<vhdlParser::Concurrent_statementContext>();
}

vhdlParser::Concurrent_statementContext* vhdlParser::Block_statementContext::concurrent_statement(size_t i) {
  return getRuleContext<vhdlParser::Concurrent_statementContext>(i);
}

vhdlParser::LabelContext* vhdlParser::Block_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}


size_t vhdlParser::Block_statementContext::getRuleIndex() const {
  return vhdlParser::RuleBlock_statement;
}

void vhdlParser::Block_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_statement(this);
}

void vhdlParser::Block_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_statement(this);
}


std::any vhdlParser::Block_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitBlock_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Block_statementContext* vhdlParser::block_statement() {
  Block_statementContext *_localctx = _tracker.createInstance<Block_statementContext>(_ctx, getState());
  enterRule(_localctx, 446, vhdlParser::RuleBlock_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2266);
    match(vhdlParser::KW_BLOCK);
    setState(2271);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::LPAREN) {
      setState(2267);
      match(vhdlParser::LPAREN);
      setState(2268);
      condition();
      setState(2269);
      match(vhdlParser::RPAREN);
    }
    setState(2274);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IS) {
      setState(2273);
      match(vhdlParser::KW_IS);
    }
    setState(2276);
    block_header();
    setState(2280);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4653567294472224) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2156068865) != 0) {
      setState(2277);
      block_declarative_item();
      setState(2282);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2283);
    match(vhdlParser::KW_BEGIN);
    setState(2287);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::KW_PROCESS

    || _la == vhdlParser::KW_POSTPONED || (((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 594478552427008001) != 0) {
      setState(2284);
      concurrent_statement();
      setState(2289);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2290);
    match(vhdlParser::KW_END);
    setState(2291);
    match(vhdlParser::KW_BLOCK);
    setState(2293);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2292);
      label();
    }
    setState(2295);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_headerContext ------------------------------------------------------------------

vhdlParser::Block_headerContext::Block_headerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Generic_clauseContext* vhdlParser::Block_headerContext::generic_clause() {
  return getRuleContext<vhdlParser::Generic_clauseContext>(0);
}

vhdlParser::Port_clauseContext* vhdlParser::Block_headerContext::port_clause() {
  return getRuleContext<vhdlParser::Port_clauseContext>(0);
}

vhdlParser::Generic_map_aspectContext* vhdlParser::Block_headerContext::generic_map_aspect() {
  return getRuleContext<vhdlParser::Generic_map_aspectContext>(0);
}

std::vector<tree::TerminalNode *> vhdlParser::Block_headerContext::SEMI() {
  return getTokens(vhdlParser::SEMI);
}

tree::TerminalNode* vhdlParser::Block_headerContext::SEMI(size_t i) {
  return getToken(vhdlParser::SEMI, i);
}

vhdlParser::Port_map_aspectContext* vhdlParser::Block_headerContext::port_map_aspect() {
  return getRuleContext<vhdlParser::Port_map_aspectContext>(0);
}


size_t vhdlParser::Block_headerContext::getRuleIndex() const {
  return vhdlParser::RuleBlock_header;
}

void vhdlParser::Block_headerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_header(this);
}

void vhdlParser::Block_headerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_header(this);
}


std::any vhdlParser::Block_headerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitBlock_header(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Block_headerContext* vhdlParser::block_header() {
  Block_headerContext *_localctx = _tracker.createInstance<Block_headerContext>(_ctx, getState());
  enterRule(_localctx, 448, vhdlParser::RuleBlock_header);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2303);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(2297);
      generic_clause();
      setState(2301);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_GENERIC) {
        setState(2298);
        generic_map_aspect();
        setState(2299);
        match(vhdlParser::SEMI);
      }
    }
    setState(2311);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PORT) {
      setState(2305);
      port_clause();
      setState(2309);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::KW_PORT) {
        setState(2306);
        port_map_aspect();
        setState(2307);
        match(vhdlParser::SEMI);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Process_statementContext ------------------------------------------------------------------

vhdlParser::Process_statementContext::Process_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Process_statementContext::KW_PROCESS() {
  return getTokens(vhdlParser::KW_PROCESS);
}

tree::TerminalNode* vhdlParser::Process_statementContext::KW_PROCESS(size_t i) {
  return getToken(vhdlParser::KW_PROCESS, i);
}

tree::TerminalNode* vhdlParser::Process_statementContext::KW_BEGIN() {
  return getToken(vhdlParser::KW_BEGIN, 0);
}

tree::TerminalNode* vhdlParser::Process_statementContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Process_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Process_statementContext::KW_POSTPONED() {
  return getTokens(vhdlParser::KW_POSTPONED);
}

tree::TerminalNode* vhdlParser::Process_statementContext::KW_POSTPONED(size_t i) {
  return getToken(vhdlParser::KW_POSTPONED, i);
}

tree::TerminalNode* vhdlParser::Process_statementContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::Process_sensitivity_listContext* vhdlParser::Process_statementContext::process_sensitivity_list() {
  return getRuleContext<vhdlParser::Process_sensitivity_listContext>(0);
}

tree::TerminalNode* vhdlParser::Process_statementContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Process_statementContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

std::vector<vhdlParser::Process_declarative_itemContext *> vhdlParser::Process_statementContext::process_declarative_item() {
  return getRuleContexts<vhdlParser::Process_declarative_itemContext>();
}

vhdlParser::Process_declarative_itemContext* vhdlParser::Process_statementContext::process_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Process_declarative_itemContext>(i);
}

std::vector<vhdlParser::Sequential_statementContext *> vhdlParser::Process_statementContext::sequential_statement() {
  return getRuleContexts<vhdlParser::Sequential_statementContext>();
}

vhdlParser::Sequential_statementContext* vhdlParser::Process_statementContext::sequential_statement(size_t i) {
  return getRuleContext<vhdlParser::Sequential_statementContext>(i);
}

vhdlParser::LabelContext* vhdlParser::Process_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}


size_t vhdlParser::Process_statementContext::getRuleIndex() const {
  return vhdlParser::RuleProcess_statement;
}

void vhdlParser::Process_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcess_statement(this);
}

void vhdlParser::Process_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcess_statement(this);
}


std::any vhdlParser::Process_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProcess_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Process_statementContext* vhdlParser::process_statement() {
  Process_statementContext *_localctx = _tracker.createInstance<Process_statementContext>(_ctx, getState());
  enterRule(_localctx, 450, vhdlParser::RuleProcess_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2314);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_POSTPONED) {
      setState(2313);
      match(vhdlParser::KW_POSTPONED);
    }
    setState(2316);
    match(vhdlParser::KW_PROCESS);
    setState(2321);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::LPAREN) {
      setState(2317);
      match(vhdlParser::LPAREN);
      setState(2318);
      process_sensitivity_list();
      setState(2319);
      match(vhdlParser::RPAREN);
    }
    setState(2324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_IS) {
      setState(2323);
      match(vhdlParser::KW_IS);
    }
    setState(2329);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4653562731069440) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2147680257) != 0) {
      setState(2326);
      process_declarative_item();
      setState(2331);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2332);
    match(vhdlParser::KW_BEGIN);
    setState(2336);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70368811290624) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 2377914278563038279) != 0) {
      setState(2333);
      sequential_statement();
      setState(2338);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2339);
    match(vhdlParser::KW_END);
    setState(2341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_POSTPONED) {
      setState(2340);
      match(vhdlParser::KW_POSTPONED);
    }
    setState(2343);
    match(vhdlParser::KW_PROCESS);
    setState(2345);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2344);
      label();
    }
    setState(2347);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Process_sensitivity_listContext ------------------------------------------------------------------

vhdlParser::Process_sensitivity_listContext::Process_sensitivity_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Process_sensitivity_listContext::KW_ALL() {
  return getToken(vhdlParser::KW_ALL, 0);
}

vhdlParser::Sensitivity_listContext* vhdlParser::Process_sensitivity_listContext::sensitivity_list() {
  return getRuleContext<vhdlParser::Sensitivity_listContext>(0);
}


size_t vhdlParser::Process_sensitivity_listContext::getRuleIndex() const {
  return vhdlParser::RuleProcess_sensitivity_list;
}

void vhdlParser::Process_sensitivity_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcess_sensitivity_list(this);
}

void vhdlParser::Process_sensitivity_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcess_sensitivity_list(this);
}


std::any vhdlParser::Process_sensitivity_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProcess_sensitivity_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Process_sensitivity_listContext* vhdlParser::process_sensitivity_list() {
  Process_sensitivity_listContext *_localctx = _tracker.createInstance<Process_sensitivity_listContext>(_ctx, getState());
  enterRule(_localctx, 452, vhdlParser::RuleProcess_sensitivity_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2351);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_ALL: {
        enterOuterAlt(_localctx, 1);
        setState(2349);
        match(vhdlParser::KW_ALL);
        break;
      }

      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::SHIFT_LEFT: {
        enterOuterAlt(_localctx, 2);
        setState(2350);
        sensitivity_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Process_or_package_declarative_itemContext ------------------------------------------------------------------

vhdlParser::Process_or_package_declarative_itemContext::Process_or_package_declarative_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Subprogram_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::subprogram_declaration() {
  return getRuleContext<vhdlParser::Subprogram_declarationContext>(0);
}

vhdlParser::Subprogram_instantiation_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::subprogram_instantiation_declaration() {
  return getRuleContext<vhdlParser::Subprogram_instantiation_declarationContext>(0);
}

vhdlParser::Package_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::package_declaration() {
  return getRuleContext<vhdlParser::Package_declarationContext>(0);
}

vhdlParser::Package_instantiation_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::package_instantiation_declaration() {
  return getRuleContext<vhdlParser::Package_instantiation_declarationContext>(0);
}

vhdlParser::Type_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::type_declaration() {
  return getRuleContext<vhdlParser::Type_declarationContext>(0);
}

vhdlParser::Subtype_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::subtype_declaration() {
  return getRuleContext<vhdlParser::Subtype_declarationContext>(0);
}

vhdlParser::Constant_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::constant_declaration() {
  return getRuleContext<vhdlParser::Constant_declarationContext>(0);
}

vhdlParser::Variable_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::variable_declaration() {
  return getRuleContext<vhdlParser::Variable_declarationContext>(0);
}

vhdlParser::File_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::file_declaration() {
  return getRuleContext<vhdlParser::File_declarationContext>(0);
}

vhdlParser::Alias_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::alias_declaration() {
  return getRuleContext<vhdlParser::Alias_declarationContext>(0);
}

vhdlParser::Attribute_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::attribute_declaration() {
  return getRuleContext<vhdlParser::Attribute_declarationContext>(0);
}

vhdlParser::Attribute_specificationContext* vhdlParser::Process_or_package_declarative_itemContext::attribute_specification() {
  return getRuleContext<vhdlParser::Attribute_specificationContext>(0);
}

vhdlParser::Use_clauseContext* vhdlParser::Process_or_package_declarative_itemContext::use_clause() {
  return getRuleContext<vhdlParser::Use_clauseContext>(0);
}

vhdlParser::Group_template_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::group_template_declaration() {
  return getRuleContext<vhdlParser::Group_template_declarationContext>(0);
}

vhdlParser::Group_declarationContext* vhdlParser::Process_or_package_declarative_itemContext::group_declaration() {
  return getRuleContext<vhdlParser::Group_declarationContext>(0);
}


size_t vhdlParser::Process_or_package_declarative_itemContext::getRuleIndex() const {
  return vhdlParser::RuleProcess_or_package_declarative_item;
}

void vhdlParser::Process_or_package_declarative_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcess_or_package_declarative_item(this);
}

void vhdlParser::Process_or_package_declarative_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcess_or_package_declarative_item(this);
}


std::any vhdlParser::Process_or_package_declarative_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProcess_or_package_declarative_item(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Process_or_package_declarative_itemContext* vhdlParser::process_or_package_declarative_item() {
  Process_or_package_declarative_itemContext *_localctx = _tracker.createInstance<Process_or_package_declarative_itemContext>(_ctx, getState());
  enterRule(_localctx, 454, vhdlParser::RuleProcess_or_package_declarative_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2368);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2353);
      subprogram_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2354);
      subprogram_instantiation_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2355);
      package_declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2356);
      package_instantiation_declaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2357);
      type_declaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2358);
      subtype_declaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2359);
      constant_declaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2360);
      variable_declaration();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2361);
      file_declaration();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2362);
      alias_declaration();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2363);
      attribute_declaration();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2364);
      attribute_specification();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2365);
      use_clause();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2366);
      group_template_declaration();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(2367);
      group_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Process_declarative_itemContext ------------------------------------------------------------------

vhdlParser::Process_declarative_itemContext::Process_declarative_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Process_or_package_declarative_itemContext* vhdlParser::Process_declarative_itemContext::process_or_package_declarative_item() {
  return getRuleContext<vhdlParser::Process_or_package_declarative_itemContext>(0);
}

vhdlParser::Subprogram_bodyContext* vhdlParser::Process_declarative_itemContext::subprogram_body() {
  return getRuleContext<vhdlParser::Subprogram_bodyContext>(0);
}

vhdlParser::Package_bodyContext* vhdlParser::Process_declarative_itemContext::package_body() {
  return getRuleContext<vhdlParser::Package_bodyContext>(0);
}


size_t vhdlParser::Process_declarative_itemContext::getRuleIndex() const {
  return vhdlParser::RuleProcess_declarative_item;
}

void vhdlParser::Process_declarative_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcess_declarative_item(this);
}

void vhdlParser::Process_declarative_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcess_declarative_item(this);
}


std::any vhdlParser::Process_declarative_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitProcess_declarative_item(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Process_declarative_itemContext* vhdlParser::process_declarative_item() {
  Process_declarative_itemContext *_localctx = _tracker.createInstance<Process_declarative_itemContext>(_ctx, getState());
  enterRule(_localctx, 456, vhdlParser::RuleProcess_declarative_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2373);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2370);
      process_or_package_declarative_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2371);
      subprogram_body();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2372);
      package_body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concurrent_procedure_call_statementContext ------------------------------------------------------------------

vhdlParser::Concurrent_procedure_call_statementContext::Concurrent_procedure_call_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Procedure_call_statementContext* vhdlParser::Concurrent_procedure_call_statementContext::procedure_call_statement() {
  return getRuleContext<vhdlParser::Procedure_call_statementContext>(0);
}

tree::TerminalNode* vhdlParser::Concurrent_procedure_call_statementContext::KW_POSTPONED() {
  return getToken(vhdlParser::KW_POSTPONED, 0);
}


size_t vhdlParser::Concurrent_procedure_call_statementContext::getRuleIndex() const {
  return vhdlParser::RuleConcurrent_procedure_call_statement;
}

void vhdlParser::Concurrent_procedure_call_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcurrent_procedure_call_statement(this);
}

void vhdlParser::Concurrent_procedure_call_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcurrent_procedure_call_statement(this);
}


std::any vhdlParser::Concurrent_procedure_call_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConcurrent_procedure_call_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Concurrent_procedure_call_statementContext* vhdlParser::concurrent_procedure_call_statement() {
  Concurrent_procedure_call_statementContext *_localctx = _tracker.createInstance<Concurrent_procedure_call_statementContext>(_ctx, getState());
  enterRule(_localctx, 458, vhdlParser::RuleConcurrent_procedure_call_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_POSTPONED) {
      setState(2375);
      match(vhdlParser::KW_POSTPONED);
    }
    setState(2378);
    procedure_call_statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concurrent_assertion_statementContext ------------------------------------------------------------------

vhdlParser::Concurrent_assertion_statementContext::Concurrent_assertion_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Assertion_statementContext* vhdlParser::Concurrent_assertion_statementContext::assertion_statement() {
  return getRuleContext<vhdlParser::Assertion_statementContext>(0);
}

tree::TerminalNode* vhdlParser::Concurrent_assertion_statementContext::KW_POSTPONED() {
  return getToken(vhdlParser::KW_POSTPONED, 0);
}


size_t vhdlParser::Concurrent_assertion_statementContext::getRuleIndex() const {
  return vhdlParser::RuleConcurrent_assertion_statement;
}

void vhdlParser::Concurrent_assertion_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcurrent_assertion_statement(this);
}

void vhdlParser::Concurrent_assertion_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcurrent_assertion_statement(this);
}


std::any vhdlParser::Concurrent_assertion_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConcurrent_assertion_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Concurrent_assertion_statementContext* vhdlParser::concurrent_assertion_statement() {
  Concurrent_assertion_statementContext *_localctx = _tracker.createInstance<Concurrent_assertion_statementContext>(_ctx, getState());
  enterRule(_localctx, 460, vhdlParser::RuleConcurrent_assertion_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2381);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_POSTPONED) {
      setState(2380);
      match(vhdlParser::KW_POSTPONED);
    }
    setState(2383);
    assertion_statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concurrent_signal_assignment_statementContext ------------------------------------------------------------------

vhdlParser::Concurrent_signal_assignment_statementContext::Concurrent_signal_assignment_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Concurrent_signal_assignment_anyContext* vhdlParser::Concurrent_signal_assignment_statementContext::concurrent_signal_assignment_any() {
  return getRuleContext<vhdlParser::Concurrent_signal_assignment_anyContext>(0);
}

vhdlParser::Concurrent_selected_signal_assignmentContext* vhdlParser::Concurrent_signal_assignment_statementContext::concurrent_selected_signal_assignment() {
  return getRuleContext<vhdlParser::Concurrent_selected_signal_assignmentContext>(0);
}

tree::TerminalNode* vhdlParser::Concurrent_signal_assignment_statementContext::KW_POSTPONED() {
  return getToken(vhdlParser::KW_POSTPONED, 0);
}


size_t vhdlParser::Concurrent_signal_assignment_statementContext::getRuleIndex() const {
  return vhdlParser::RuleConcurrent_signal_assignment_statement;
}

void vhdlParser::Concurrent_signal_assignment_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcurrent_signal_assignment_statement(this);
}

void vhdlParser::Concurrent_signal_assignment_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcurrent_signal_assignment_statement(this);
}


std::any vhdlParser::Concurrent_signal_assignment_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConcurrent_signal_assignment_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Concurrent_signal_assignment_statementContext* vhdlParser::concurrent_signal_assignment_statement() {
  Concurrent_signal_assignment_statementContext *_localctx = _tracker.createInstance<Concurrent_signal_assignment_statementContext>(_ctx, getState());
  enterRule(_localctx, 462, vhdlParser::RuleConcurrent_signal_assignment_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2386);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_POSTPONED) {
      setState(2385);
      match(vhdlParser::KW_POSTPONED);
    }
    setState(2390);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::LPAREN:
      case vhdlParser::SHIFT_LEFT: {
        setState(2388);
        concurrent_signal_assignment_any();
        break;
      }

      case vhdlParser::KW_WITH: {
        setState(2389);
        concurrent_selected_signal_assignment();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concurrent_signal_assignment_anyContext ------------------------------------------------------------------

vhdlParser::Concurrent_signal_assignment_anyContext::Concurrent_signal_assignment_anyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::TargetContext* vhdlParser::Concurrent_signal_assignment_anyContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Concurrent_signal_assignment_anyContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

tree::TerminalNode* vhdlParser::Concurrent_signal_assignment_anyContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::WaveformContext* vhdlParser::Concurrent_signal_assignment_anyContext::waveform() {
  return getRuleContext<vhdlParser::WaveformContext>(0);
}

vhdlParser::Conditional_waveformsContext* vhdlParser::Concurrent_signal_assignment_anyContext::conditional_waveforms() {
  return getRuleContext<vhdlParser::Conditional_waveformsContext>(0);
}

tree::TerminalNode* vhdlParser::Concurrent_signal_assignment_anyContext::KW_GUARDED() {
  return getToken(vhdlParser::KW_GUARDED, 0);
}

vhdlParser::Delay_mechanismContext* vhdlParser::Concurrent_signal_assignment_anyContext::delay_mechanism() {
  return getRuleContext<vhdlParser::Delay_mechanismContext>(0);
}


size_t vhdlParser::Concurrent_signal_assignment_anyContext::getRuleIndex() const {
  return vhdlParser::RuleConcurrent_signal_assignment_any;
}

void vhdlParser::Concurrent_signal_assignment_anyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcurrent_signal_assignment_any(this);
}

void vhdlParser::Concurrent_signal_assignment_anyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcurrent_signal_assignment_any(this);
}


std::any vhdlParser::Concurrent_signal_assignment_anyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConcurrent_signal_assignment_any(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Concurrent_signal_assignment_anyContext* vhdlParser::concurrent_signal_assignment_any() {
  Concurrent_signal_assignment_anyContext *_localctx = _tracker.createInstance<Concurrent_signal_assignment_anyContext>(_ctx, getState());
  enterRule(_localctx, 464, vhdlParser::RuleConcurrent_signal_assignment_any);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2392);
    target();
    setState(2393);
    match(vhdlParser::CONASGN);
    setState(2395);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GUARDED) {
      setState(2394);
      match(vhdlParser::KW_GUARDED);
    }
    setState(2398);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251800350558208) != 0) {
      setState(2397);
      delay_mechanism();
    }
    setState(2402);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
    case 1: {
      setState(2400);
      waveform();
      break;
    }

    case 2: {
      setState(2401);
      conditional_waveforms();
      break;
    }

    default:
      break;
    }
    setState(2404);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concurrent_selected_signal_assignmentContext ------------------------------------------------------------------

vhdlParser::Concurrent_selected_signal_assignmentContext::Concurrent_selected_signal_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Concurrent_selected_signal_assignmentContext::KW_WITH() {
  return getToken(vhdlParser::KW_WITH, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Concurrent_selected_signal_assignmentContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

tree::TerminalNode* vhdlParser::Concurrent_selected_signal_assignmentContext::KW_SELECT() {
  return getToken(vhdlParser::KW_SELECT, 0);
}

vhdlParser::TargetContext* vhdlParser::Concurrent_selected_signal_assignmentContext::target() {
  return getRuleContext<vhdlParser::TargetContext>(0);
}

tree::TerminalNode* vhdlParser::Concurrent_selected_signal_assignmentContext::CONASGN() {
  return getToken(vhdlParser::CONASGN, 0);
}

vhdlParser::Selected_waveformsContext* vhdlParser::Concurrent_selected_signal_assignmentContext::selected_waveforms() {
  return getRuleContext<vhdlParser::Selected_waveformsContext>(0);
}

tree::TerminalNode* vhdlParser::Concurrent_selected_signal_assignmentContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::Concurrent_selected_signal_assignmentContext::QUESTIONMARK() {
  return getToken(vhdlParser::QUESTIONMARK, 0);
}

tree::TerminalNode* vhdlParser::Concurrent_selected_signal_assignmentContext::KW_GUARDED() {
  return getToken(vhdlParser::KW_GUARDED, 0);
}

vhdlParser::Delay_mechanismContext* vhdlParser::Concurrent_selected_signal_assignmentContext::delay_mechanism() {
  return getRuleContext<vhdlParser::Delay_mechanismContext>(0);
}


size_t vhdlParser::Concurrent_selected_signal_assignmentContext::getRuleIndex() const {
  return vhdlParser::RuleConcurrent_selected_signal_assignment;
}

void vhdlParser::Concurrent_selected_signal_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcurrent_selected_signal_assignment(this);
}

void vhdlParser::Concurrent_selected_signal_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcurrent_selected_signal_assignment(this);
}


std::any vhdlParser::Concurrent_selected_signal_assignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitConcurrent_selected_signal_assignment(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Concurrent_selected_signal_assignmentContext* vhdlParser::concurrent_selected_signal_assignment() {
  Concurrent_selected_signal_assignmentContext *_localctx = _tracker.createInstance<Concurrent_selected_signal_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 466, vhdlParser::RuleConcurrent_selected_signal_assignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2406);
    match(vhdlParser::KW_WITH);
    setState(2407);
    expression(0);
    setState(2408);
    match(vhdlParser::KW_SELECT);
    setState(2410);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::QUESTIONMARK) {
      setState(2409);
      match(vhdlParser::QUESTIONMARK);
    }
    setState(2412);
    target();
    setState(2413);
    match(vhdlParser::CONASGN);
    setState(2415);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GUARDED) {
      setState(2414);
      match(vhdlParser::KW_GUARDED);
    }
    setState(2418);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251800350558208) != 0) {
      setState(2417);
      delay_mechanism();
    }
    setState(2420);
    selected_waveforms();
    setState(2421);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_instantiation_statementContext ------------------------------------------------------------------

vhdlParser::Component_instantiation_statementContext::Component_instantiation_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Instantiated_unitContext* vhdlParser::Component_instantiation_statementContext::instantiated_unit() {
  return getRuleContext<vhdlParser::Instantiated_unitContext>(0);
}

tree::TerminalNode* vhdlParser::Component_instantiation_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::Generic_map_aspectContext* vhdlParser::Component_instantiation_statementContext::generic_map_aspect() {
  return getRuleContext<vhdlParser::Generic_map_aspectContext>(0);
}

vhdlParser::Port_map_aspectContext* vhdlParser::Component_instantiation_statementContext::port_map_aspect() {
  return getRuleContext<vhdlParser::Port_map_aspectContext>(0);
}


size_t vhdlParser::Component_instantiation_statementContext::getRuleIndex() const {
  return vhdlParser::RuleComponent_instantiation_statement;
}

void vhdlParser::Component_instantiation_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_instantiation_statement(this);
}

void vhdlParser::Component_instantiation_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_instantiation_statement(this);
}


std::any vhdlParser::Component_instantiation_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitComponent_instantiation_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Component_instantiation_statementContext* vhdlParser::component_instantiation_statement() {
  Component_instantiation_statementContext *_localctx = _tracker.createInstance<Component_instantiation_statementContext>(_ctx, getState());
  enterRule(_localctx, 468, vhdlParser::RuleComponent_instantiation_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2423);
    instantiated_unit();
    setState(2425);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_GENERIC) {
      setState(2424);
      generic_map_aspect();
    }
    setState(2428);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_PORT) {
      setState(2427);
      port_map_aspect();
    }
    setState(2430);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Instantiated_unitContext ------------------------------------------------------------------

vhdlParser::Instantiated_unitContext::Instantiated_unitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::NameContext* vhdlParser::Instantiated_unitContext::name() {
  return getRuleContext<vhdlParser::NameContext>(0);
}

tree::TerminalNode* vhdlParser::Instantiated_unitContext::KW_COMPONENT() {
  return getToken(vhdlParser::KW_COMPONENT, 0);
}

tree::TerminalNode* vhdlParser::Instantiated_unitContext::KW_ENTITY() {
  return getToken(vhdlParser::KW_ENTITY, 0);
}

tree::TerminalNode* vhdlParser::Instantiated_unitContext::LPAREN() {
  return getToken(vhdlParser::LPAREN, 0);
}

vhdlParser::IdentifierContext* vhdlParser::Instantiated_unitContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}

tree::TerminalNode* vhdlParser::Instantiated_unitContext::RPAREN() {
  return getToken(vhdlParser::RPAREN, 0);
}

tree::TerminalNode* vhdlParser::Instantiated_unitContext::KW_CONFIGURATION() {
  return getToken(vhdlParser::KW_CONFIGURATION, 0);
}


size_t vhdlParser::Instantiated_unitContext::getRuleIndex() const {
  return vhdlParser::RuleInstantiated_unit;
}

void vhdlParser::Instantiated_unitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstantiated_unit(this);
}

void vhdlParser::Instantiated_unitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstantiated_unit(this);
}


std::any vhdlParser::Instantiated_unitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitInstantiated_unit(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Instantiated_unitContext* vhdlParser::instantiated_unit() {
  Instantiated_unitContext *_localctx = _tracker.createInstance<Instantiated_unitContext>(_ctx, getState());
  enterRule(_localctx, 470, vhdlParser::RuleInstantiated_unit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2446);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_COMPONENT:
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::SHIFT_LEFT: {
        enterOuterAlt(_localctx, 1);
        setState(2433);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == vhdlParser::KW_COMPONENT) {
          setState(2432);
          match(vhdlParser::KW_COMPONENT);
        }
        setState(2435);
        name(0);
        break;
      }

      case vhdlParser::KW_ENTITY: {
        enterOuterAlt(_localctx, 2);
        setState(2436);
        match(vhdlParser::KW_ENTITY);
        setState(2437);
        name(0);
        setState(2442);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == vhdlParser::LPAREN) {
          setState(2438);
          match(vhdlParser::LPAREN);
          setState(2439);
          identifier();
          setState(2440);
          match(vhdlParser::RPAREN);
        }
        break;
      }

      case vhdlParser::KW_CONFIGURATION: {
        enterOuterAlt(_localctx, 3);
        setState(2444);
        match(vhdlParser::KW_CONFIGURATION);
        setState(2445);
        name(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generate_statementContext ------------------------------------------------------------------

vhdlParser::Generate_statementContext::Generate_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::For_generate_statementContext* vhdlParser::Generate_statementContext::for_generate_statement() {
  return getRuleContext<vhdlParser::For_generate_statementContext>(0);
}

vhdlParser::If_generate_statementContext* vhdlParser::Generate_statementContext::if_generate_statement() {
  return getRuleContext<vhdlParser::If_generate_statementContext>(0);
}

vhdlParser::Case_generate_statementContext* vhdlParser::Generate_statementContext::case_generate_statement() {
  return getRuleContext<vhdlParser::Case_generate_statementContext>(0);
}


size_t vhdlParser::Generate_statementContext::getRuleIndex() const {
  return vhdlParser::RuleGenerate_statement;
}

void vhdlParser::Generate_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerate_statement(this);
}

void vhdlParser::Generate_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerate_statement(this);
}


std::any vhdlParser::Generate_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGenerate_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Generate_statementContext* vhdlParser::generate_statement() {
  Generate_statementContext *_localctx = _tracker.createInstance<Generate_statementContext>(_ctx, getState());
  enterRule(_localctx, 472, vhdlParser::RuleGenerate_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2451);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_FOR: {
        enterOuterAlt(_localctx, 1);
        setState(2448);
        for_generate_statement();
        break;
      }

      case vhdlParser::KW_IF: {
        enterOuterAlt(_localctx, 2);
        setState(2449);
        if_generate_statement();
        break;
      }

      case vhdlParser::KW_CASE: {
        enterOuterAlt(_localctx, 3);
        setState(2450);
        case_generate_statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_generate_statementContext ------------------------------------------------------------------

vhdlParser::For_generate_statementContext::For_generate_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::For_generate_statementContext::KW_FOR() {
  return getToken(vhdlParser::KW_FOR, 0);
}

vhdlParser::Parameter_specificationContext* vhdlParser::For_generate_statementContext::parameter_specification() {
  return getRuleContext<vhdlParser::Parameter_specificationContext>(0);
}

std::vector<tree::TerminalNode *> vhdlParser::For_generate_statementContext::KW_GENERATE() {
  return getTokens(vhdlParser::KW_GENERATE);
}

tree::TerminalNode* vhdlParser::For_generate_statementContext::KW_GENERATE(size_t i) {
  return getToken(vhdlParser::KW_GENERATE, i);
}

vhdlParser::Generate_statement_bodyContext* vhdlParser::For_generate_statementContext::generate_statement_body() {
  return getRuleContext<vhdlParser::Generate_statement_bodyContext>(0);
}

tree::TerminalNode* vhdlParser::For_generate_statementContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::For_generate_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

vhdlParser::LabelContext* vhdlParser::For_generate_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}


size_t vhdlParser::For_generate_statementContext::getRuleIndex() const {
  return vhdlParser::RuleFor_generate_statement;
}

void vhdlParser::For_generate_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_generate_statement(this);
}

void vhdlParser::For_generate_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_generate_statement(this);
}


std::any vhdlParser::For_generate_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitFor_generate_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::For_generate_statementContext* vhdlParser::for_generate_statement() {
  For_generate_statementContext *_localctx = _tracker.createInstance<For_generate_statementContext>(_ctx, getState());
  enterRule(_localctx, 474, vhdlParser::RuleFor_generate_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2453);
    match(vhdlParser::KW_FOR);
    setState(2454);
    parameter_specification();
    setState(2455);
    match(vhdlParser::KW_GENERATE);
    setState(2456);
    generate_statement_body();
    setState(2457);
    match(vhdlParser::KW_END);
    setState(2458);
    match(vhdlParser::KW_GENERATE);
    setState(2460);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2459);
      label();
    }
    setState(2462);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_generate_statementContext ------------------------------------------------------------------

vhdlParser::If_generate_statementContext::If_generate_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::If_generate_statementContext::KW_IF() {
  return getToken(vhdlParser::KW_IF, 0);
}

std::vector<vhdlParser::ConditionContext *> vhdlParser::If_generate_statementContext::condition() {
  return getRuleContexts<vhdlParser::ConditionContext>();
}

vhdlParser::ConditionContext* vhdlParser::If_generate_statementContext::condition(size_t i) {
  return getRuleContext<vhdlParser::ConditionContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::If_generate_statementContext::KW_GENERATE() {
  return getTokens(vhdlParser::KW_GENERATE);
}

tree::TerminalNode* vhdlParser::If_generate_statementContext::KW_GENERATE(size_t i) {
  return getToken(vhdlParser::KW_GENERATE, i);
}

std::vector<vhdlParser::Generate_statement_bodyContext *> vhdlParser::If_generate_statementContext::generate_statement_body() {
  return getRuleContexts<vhdlParser::Generate_statement_bodyContext>();
}

vhdlParser::Generate_statement_bodyContext* vhdlParser::If_generate_statementContext::generate_statement_body(size_t i) {
  return getRuleContext<vhdlParser::Generate_statement_bodyContext>(i);
}

tree::TerminalNode* vhdlParser::If_generate_statementContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::If_generate_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

tree::TerminalNode* vhdlParser::If_generate_statementContext::KW_ELSE() {
  return getToken(vhdlParser::KW_ELSE, 0);
}

std::vector<vhdlParser::LabelContext *> vhdlParser::If_generate_statementContext::label() {
  return getRuleContexts<vhdlParser::LabelContext>();
}

vhdlParser::LabelContext* vhdlParser::If_generate_statementContext::label(size_t i) {
  return getRuleContext<vhdlParser::LabelContext>(i);
}

std::vector<tree::TerminalNode *> vhdlParser::If_generate_statementContext::COLON() {
  return getTokens(vhdlParser::COLON);
}

tree::TerminalNode* vhdlParser::If_generate_statementContext::COLON(size_t i) {
  return getToken(vhdlParser::COLON, i);
}

std::vector<tree::TerminalNode *> vhdlParser::If_generate_statementContext::KW_ELSIF() {
  return getTokens(vhdlParser::KW_ELSIF);
}

tree::TerminalNode* vhdlParser::If_generate_statementContext::KW_ELSIF(size_t i) {
  return getToken(vhdlParser::KW_ELSIF, i);
}


size_t vhdlParser::If_generate_statementContext::getRuleIndex() const {
  return vhdlParser::RuleIf_generate_statement;
}

void vhdlParser::If_generate_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_generate_statement(this);
}

void vhdlParser::If_generate_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_generate_statement(this);
}


std::any vhdlParser::If_generate_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitIf_generate_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::If_generate_statementContext* vhdlParser::if_generate_statement() {
  If_generate_statementContext *_localctx = _tracker.createInstance<If_generate_statementContext>(_ctx, getState());
  enterRule(_localctx, 476, vhdlParser::RuleIf_generate_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2464);
    match(vhdlParser::KW_IF);
    setState(2468);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
    case 1: {
      setState(2465);
      label();
      setState(2466);
      match(vhdlParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(2470);
    condition();
    setState(2471);
    match(vhdlParser::KW_GENERATE);
    setState(2472);
    generate_statement_body();
    setState(2485);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2473);
        match(vhdlParser::KW_ELSIF);
        setState(2477);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
        case 1: {
          setState(2474);
          label();
          setState(2475);
          match(vhdlParser::COLON);
          break;
        }

        default:
          break;
        }
        setState(2479);
        condition();
        setState(2480);
        match(vhdlParser::KW_GENERATE);
        setState(2481);
        generate_statement_body(); 
      }
      setState(2487);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx);
    }
    setState(2497);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx)) {
    case 1: {
      setState(2488);
      match(vhdlParser::KW_ELSE);
      setState(2492);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == vhdlParser::BASIC_IDENTIFIER

      || _la == vhdlParser::EXTENDED_IDENTIFIER) {
        setState(2489);
        label();
        setState(2490);
        match(vhdlParser::COLON);
      }
      setState(2494);
      match(vhdlParser::KW_GENERATE);
      setState(2495);
      generate_statement_body();
      break;
    }

    case 2: {
      setState(2496);

      if (!(_input->LA(1) != KW_ELSE)) throw FailedPredicateException(this, "_input->LA(1) != KW_ELSE");
      break;
    }

    default:
      break;
    }
    setState(2499);
    match(vhdlParser::KW_END);
    setState(2500);
    match(vhdlParser::KW_GENERATE);
    setState(2502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2501);
      label();
    }
    setState(2504);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_generate_statementContext ------------------------------------------------------------------

vhdlParser::Case_generate_statementContext::Case_generate_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Case_generate_statementContext::KW_CASE() {
  return getToken(vhdlParser::KW_CASE, 0);
}

vhdlParser::ExpressionContext* vhdlParser::Case_generate_statementContext::expression() {
  return getRuleContext<vhdlParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> vhdlParser::Case_generate_statementContext::KW_GENERATE() {
  return getTokens(vhdlParser::KW_GENERATE);
}

tree::TerminalNode* vhdlParser::Case_generate_statementContext::KW_GENERATE(size_t i) {
  return getToken(vhdlParser::KW_GENERATE, i);
}

tree::TerminalNode* vhdlParser::Case_generate_statementContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Case_generate_statementContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<vhdlParser::Case_generate_alternativeContext *> vhdlParser::Case_generate_statementContext::case_generate_alternative() {
  return getRuleContexts<vhdlParser::Case_generate_alternativeContext>();
}

vhdlParser::Case_generate_alternativeContext* vhdlParser::Case_generate_statementContext::case_generate_alternative(size_t i) {
  return getRuleContext<vhdlParser::Case_generate_alternativeContext>(i);
}

vhdlParser::LabelContext* vhdlParser::Case_generate_statementContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}


size_t vhdlParser::Case_generate_statementContext::getRuleIndex() const {
  return vhdlParser::RuleCase_generate_statement;
}

void vhdlParser::Case_generate_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_generate_statement(this);
}

void vhdlParser::Case_generate_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_generate_statement(this);
}


std::any vhdlParser::Case_generate_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitCase_generate_statement(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Case_generate_statementContext* vhdlParser::case_generate_statement() {
  Case_generate_statementContext *_localctx = _tracker.createInstance<Case_generate_statementContext>(_ctx, getState());
  enterRule(_localctx, 478, vhdlParser::RuleCase_generate_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2506);
    match(vhdlParser::KW_CASE);
    setState(2507);
    expression(0);
    setState(2508);
    match(vhdlParser::KW_GENERATE);
    setState(2510); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2509);
      case_generate_alternative();
      setState(2512); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == vhdlParser::KW_WHEN);
    setState(2514);
    match(vhdlParser::KW_END);
    setState(2515);
    match(vhdlParser::KW_GENERATE);
    setState(2517);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2516);
      label();
    }
    setState(2519);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_generate_alternativeContext ------------------------------------------------------------------

vhdlParser::Case_generate_alternativeContext::Case_generate_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Case_generate_alternativeContext::KW_WHEN() {
  return getToken(vhdlParser::KW_WHEN, 0);
}

vhdlParser::ChoicesContext* vhdlParser::Case_generate_alternativeContext::choices() {
  return getRuleContext<vhdlParser::ChoicesContext>(0);
}

tree::TerminalNode* vhdlParser::Case_generate_alternativeContext::ARROW() {
  return getToken(vhdlParser::ARROW, 0);
}

vhdlParser::Generate_statement_body_with_begin_endContext* vhdlParser::Case_generate_alternativeContext::generate_statement_body_with_begin_end() {
  return getRuleContext<vhdlParser::Generate_statement_body_with_begin_endContext>(0);
}

vhdlParser::LabelContext* vhdlParser::Case_generate_alternativeContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}

tree::TerminalNode* vhdlParser::Case_generate_alternativeContext::COLON() {
  return getToken(vhdlParser::COLON, 0);
}


size_t vhdlParser::Case_generate_alternativeContext::getRuleIndex() const {
  return vhdlParser::RuleCase_generate_alternative;
}

void vhdlParser::Case_generate_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_generate_alternative(this);
}

void vhdlParser::Case_generate_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_generate_alternative(this);
}


std::any vhdlParser::Case_generate_alternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitCase_generate_alternative(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Case_generate_alternativeContext* vhdlParser::case_generate_alternative() {
  Case_generate_alternativeContext *_localctx = _tracker.createInstance<Case_generate_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 480, vhdlParser::RuleCase_generate_alternative);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2521);
    match(vhdlParser::KW_WHEN);
    setState(2525);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx)) {
    case 1: {
      setState(2522);
      label();
      setState(2523);
      match(vhdlParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(2527);
    choices();
    setState(2528);
    match(vhdlParser::ARROW);
    setState(2529);
    generate_statement_body_with_begin_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generate_statement_body_with_begin_endContext ------------------------------------------------------------------

vhdlParser::Generate_statement_body_with_begin_endContext::Generate_statement_body_with_begin_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Generate_statement_body_with_begin_endContext::KW_BEGIN() {
  return getToken(vhdlParser::KW_BEGIN, 0);
}

tree::TerminalNode* vhdlParser::Generate_statement_body_with_begin_endContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Generate_statement_body_with_begin_endContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<vhdlParser::Block_declarative_itemContext *> vhdlParser::Generate_statement_body_with_begin_endContext::block_declarative_item() {
  return getRuleContexts<vhdlParser::Block_declarative_itemContext>();
}

vhdlParser::Block_declarative_itemContext* vhdlParser::Generate_statement_body_with_begin_endContext::block_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Block_declarative_itemContext>(i);
}

std::vector<vhdlParser::Concurrent_statementContext *> vhdlParser::Generate_statement_body_with_begin_endContext::concurrent_statement() {
  return getRuleContexts<vhdlParser::Concurrent_statementContext>();
}

vhdlParser::Concurrent_statementContext* vhdlParser::Generate_statement_body_with_begin_endContext::concurrent_statement(size_t i) {
  return getRuleContext<vhdlParser::Concurrent_statementContext>(i);
}

vhdlParser::LabelContext* vhdlParser::Generate_statement_body_with_begin_endContext::label() {
  return getRuleContext<vhdlParser::LabelContext>(0);
}


size_t vhdlParser::Generate_statement_body_with_begin_endContext::getRuleIndex() const {
  return vhdlParser::RuleGenerate_statement_body_with_begin_end;
}

void vhdlParser::Generate_statement_body_with_begin_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerate_statement_body_with_begin_end(this);
}

void vhdlParser::Generate_statement_body_with_begin_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerate_statement_body_with_begin_end(this);
}


std::any vhdlParser::Generate_statement_body_with_begin_endContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGenerate_statement_body_with_begin_end(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Generate_statement_body_with_begin_endContext* vhdlParser::generate_statement_body_with_begin_end() {
  Generate_statement_body_with_begin_endContext *_localctx = _tracker.createInstance<Generate_statement_body_with_begin_endContext>(_ctx, getState());
  enterRule(_localctx, 482, vhdlParser::RuleGenerate_statement_body_with_begin_end);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2555);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_COMPONENT:
      case vhdlParser::KW_GROUP:
      case vhdlParser::KW_FILE:
      case vhdlParser::KW_PURE:
      case vhdlParser::KW_USE:
      case vhdlParser::KW_SHARED:
      case vhdlParser::KW_SIGNAL:
      case vhdlParser::KW_BEGIN:
      case vhdlParser::KW_DISCONNECT:
      case vhdlParser::KW_PROCEDURE:
      case vhdlParser::KW_ATTRIBUTE:
      case vhdlParser::KW_VARIABLE:
      case vhdlParser::KW_SUBTYPE:
      case vhdlParser::KW_CONSTANT:
      case vhdlParser::KW_FUNCTION:
      case vhdlParser::KW_ALIAS:
      case vhdlParser::KW_IMPURE:
      case vhdlParser::KW_PACKAGE:
      case vhdlParser::KW_FOR:
      case vhdlParser::KW_TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(2534);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 4653567294472224) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 2156068865) != 0) {
          setState(2531);
          block_declarative_item();
          setState(2536);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2537);
        match(vhdlParser::KW_BEGIN);
        setState(2541);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == vhdlParser::KW_PROCESS

        || _la == vhdlParser::KW_POSTPONED || (((_la - 72) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 72)) & 594478552427008001) != 0) {
          setState(2538);
          concurrent_statement();
          setState(2543);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2544);
        match(vhdlParser::KW_END);
        setState(2546);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == vhdlParser::BASIC_IDENTIFIER

        || _la == vhdlParser::EXTENDED_IDENTIFIER) {
          setState(2545);
          label();
        }
        setState(2548);
        match(vhdlParser::SEMI);
        break;
      }

      case vhdlParser::KW_PROCESS:
      case vhdlParser::KW_POSTPONED:
      case vhdlParser::KW_END:
      case vhdlParser::KW_WITH:
      case vhdlParser::KW_ASSERT:
      case vhdlParser::KW_WHEN:
      case vhdlParser::BASIC_IDENTIFIER:
      case vhdlParser::EXTENDED_IDENTIFIER:
      case vhdlParser::CHARACTER_LITERAL:
      case vhdlParser::STRING_LITERAL:
      case vhdlParser::LPAREN:
      case vhdlParser::SHIFT_LEFT: {
        enterOuterAlt(_localctx, 2);
        setState(2552);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == vhdlParser::KW_PROCESS

        || _la == vhdlParser::KW_POSTPONED || (((_la - 72) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 72)) & 594478552427008001) != 0) {
          setState(2549);
          concurrent_statement();
          setState(2554);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generate_statement_bodyContext ------------------------------------------------------------------

vhdlParser::Generate_statement_bodyContext::Generate_statement_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Generate_statement_bodyContext::KW_BEGIN() {
  return getToken(vhdlParser::KW_BEGIN, 0);
}

std::vector<vhdlParser::Block_declarative_itemContext *> vhdlParser::Generate_statement_bodyContext::block_declarative_item() {
  return getRuleContexts<vhdlParser::Block_declarative_itemContext>();
}

vhdlParser::Block_declarative_itemContext* vhdlParser::Generate_statement_bodyContext::block_declarative_item(size_t i) {
  return getRuleContext<vhdlParser::Block_declarative_itemContext>(i);
}

std::vector<vhdlParser::Concurrent_statementContext *> vhdlParser::Generate_statement_bodyContext::concurrent_statement() {
  return getRuleContexts<vhdlParser::Concurrent_statementContext>();
}

vhdlParser::Concurrent_statementContext* vhdlParser::Generate_statement_bodyContext::concurrent_statement(size_t i) {
  return getRuleContext<vhdlParser::Concurrent_statementContext>(i);
}


size_t vhdlParser::Generate_statement_bodyContext::getRuleIndex() const {
  return vhdlParser::RuleGenerate_statement_body;
}

void vhdlParser::Generate_statement_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerate_statement_body(this);
}

void vhdlParser::Generate_statement_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerate_statement_body(this);
}


std::any vhdlParser::Generate_statement_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitGenerate_statement_body(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Generate_statement_bodyContext* vhdlParser::generate_statement_body() {
  Generate_statement_bodyContext *_localctx = _tracker.createInstance<Generate_statement_bodyContext>(_ctx, getState());
  enterRule(_localctx, 484, vhdlParser::RuleGenerate_statement_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2576);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2560);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4653567294472224) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 2156068865) != 0) {
        setState(2557);
        block_declarative_item();
        setState(2562);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2563);
      match(vhdlParser::KW_BEGIN);
      setState(2567);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2564);
          concurrent_statement(); 
        }
        setState(2569);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2573);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2570);
          concurrent_statement(); 
        }
        setState(2575);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

vhdlParser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::IdentifierContext* vhdlParser::LabelContext::identifier() {
  return getRuleContext<vhdlParser::IdentifierContext>(0);
}


size_t vhdlParser::LabelContext::getRuleIndex() const {
  return vhdlParser::RuleLabel;
}

void vhdlParser::LabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabel(this);
}

void vhdlParser::LabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabel(this);
}


std::any vhdlParser::LabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitLabel(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::LabelContext* vhdlParser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 486, vhdlParser::RuleLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2578);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Use_clauseContext ------------------------------------------------------------------

vhdlParser::Use_clauseContext::Use_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Use_clauseContext::KW_USE() {
  return getToken(vhdlParser::KW_USE, 0);
}

std::vector<vhdlParser::Selected_nameContext *> vhdlParser::Use_clauseContext::selected_name() {
  return getRuleContexts<vhdlParser::Selected_nameContext>();
}

vhdlParser::Selected_nameContext* vhdlParser::Use_clauseContext::selected_name(size_t i) {
  return getRuleContext<vhdlParser::Selected_nameContext>(i);
}

tree::TerminalNode* vhdlParser::Use_clauseContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Use_clauseContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Use_clauseContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Use_clauseContext::getRuleIndex() const {
  return vhdlParser::RuleUse_clause;
}

void vhdlParser::Use_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUse_clause(this);
}

void vhdlParser::Use_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUse_clause(this);
}


std::any vhdlParser::Use_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitUse_clause(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Use_clauseContext* vhdlParser::use_clause() {
  Use_clauseContext *_localctx = _tracker.createInstance<Use_clauseContext>(_ctx, getState());
  enterRule(_localctx, 488, vhdlParser::RuleUse_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2580);
    match(vhdlParser::KW_USE);
    setState(2581);
    selected_name();
    setState(2586);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(2582);
      match(vhdlParser::COMMA);
      setState(2583);
      selected_name();
      setState(2588);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2589);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Design_fileContext ------------------------------------------------------------------

vhdlParser::Design_fileContext::Design_fileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Design_fileContext::EOF() {
  return getToken(vhdlParser::EOF, 0);
}

std::vector<vhdlParser::Design_unitContext *> vhdlParser::Design_fileContext::design_unit() {
  return getRuleContexts<vhdlParser::Design_unitContext>();
}

vhdlParser::Design_unitContext* vhdlParser::Design_fileContext::design_unit(size_t i) {
  return getRuleContext<vhdlParser::Design_unitContext>(i);
}


size_t vhdlParser::Design_fileContext::getRuleIndex() const {
  return vhdlParser::RuleDesign_file;
}

void vhdlParser::Design_fileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesign_file(this);
}

void vhdlParser::Design_fileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesign_file(this);
}


std::any vhdlParser::Design_fileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitDesign_file(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Design_fileContext* vhdlParser::design_file() {
  Design_fileContext *_localctx = _tracker.createInstance<Design_fileContext>(_ctx, getState());
  enterRule(_localctx, 490, vhdlParser::RuleDesign_file);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2594);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 72057594046324740) != 0 || (((_la - 82) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 82)) & 655361) != 0) {
      setState(2591);
      design_unit();
      setState(2596);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2597);
    match(vhdlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Design_unitContext ------------------------------------------------------------------

vhdlParser::Design_unitContext::Design_unitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Context_clauseContext* vhdlParser::Design_unitContext::context_clause() {
  return getRuleContext<vhdlParser::Context_clauseContext>(0);
}

vhdlParser::Library_unitContext* vhdlParser::Design_unitContext::library_unit() {
  return getRuleContext<vhdlParser::Library_unitContext>(0);
}


size_t vhdlParser::Design_unitContext::getRuleIndex() const {
  return vhdlParser::RuleDesign_unit;
}

void vhdlParser::Design_unitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesign_unit(this);
}

void vhdlParser::Design_unitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesign_unit(this);
}


std::any vhdlParser::Design_unitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitDesign_unit(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Design_unitContext* vhdlParser::design_unit() {
  Design_unitContext *_localctx = _tracker.createInstance<Design_unitContext>(_ctx, getState());
  enterRule(_localctx, 492, vhdlParser::RuleDesign_unit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2599);
    context_clause();
    setState(2600);
    library_unit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Library_unitContext ------------------------------------------------------------------

vhdlParser::Library_unitContext::Library_unitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Primary_unitContext* vhdlParser::Library_unitContext::primary_unit() {
  return getRuleContext<vhdlParser::Primary_unitContext>(0);
}

vhdlParser::Secondary_unitContext* vhdlParser::Library_unitContext::secondary_unit() {
  return getRuleContext<vhdlParser::Secondary_unitContext>(0);
}


size_t vhdlParser::Library_unitContext::getRuleIndex() const {
  return vhdlParser::RuleLibrary_unit;
}

void vhdlParser::Library_unitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibrary_unit(this);
}

void vhdlParser::Library_unitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibrary_unit(this);
}


std::any vhdlParser::Library_unitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitLibrary_unit(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Library_unitContext* vhdlParser::library_unit() {
  Library_unitContext *_localctx = _tracker.createInstance<Library_unitContext>(_ctx, getState());
  enterRule(_localctx, 494, vhdlParser::RuleLibrary_unit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2604);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2602);
      primary_unit();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2603);
      secondary_unit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_unitContext ------------------------------------------------------------------

vhdlParser::Primary_unitContext::Primary_unitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Entity_declarationContext* vhdlParser::Primary_unitContext::entity_declaration() {
  return getRuleContext<vhdlParser::Entity_declarationContext>(0);
}

vhdlParser::Configuration_declarationContext* vhdlParser::Primary_unitContext::configuration_declaration() {
  return getRuleContext<vhdlParser::Configuration_declarationContext>(0);
}

vhdlParser::Package_declarationContext* vhdlParser::Primary_unitContext::package_declaration() {
  return getRuleContext<vhdlParser::Package_declarationContext>(0);
}

vhdlParser::Package_instantiation_declarationContext* vhdlParser::Primary_unitContext::package_instantiation_declaration() {
  return getRuleContext<vhdlParser::Package_instantiation_declarationContext>(0);
}

vhdlParser::Context_declarationContext* vhdlParser::Primary_unitContext::context_declaration() {
  return getRuleContext<vhdlParser::Context_declarationContext>(0);
}


size_t vhdlParser::Primary_unitContext::getRuleIndex() const {
  return vhdlParser::RulePrimary_unit;
}

void vhdlParser::Primary_unitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_unit(this);
}

void vhdlParser::Primary_unitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_unit(this);
}


std::any vhdlParser::Primary_unitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitPrimary_unit(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Primary_unitContext* vhdlParser::primary_unit() {
  Primary_unitContext *_localctx = _tracker.createInstance<Primary_unitContext>(_ctx, getState());
  enterRule(_localctx, 496, vhdlParser::RulePrimary_unit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2611);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2606);
      entity_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2607);
      configuration_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2608);
      package_declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2609);
      package_instantiation_declaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2610);
      context_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Secondary_unitContext ------------------------------------------------------------------

vhdlParser::Secondary_unitContext::Secondary_unitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Architecture_bodyContext* vhdlParser::Secondary_unitContext::architecture_body() {
  return getRuleContext<vhdlParser::Architecture_bodyContext>(0);
}

vhdlParser::Package_bodyContext* vhdlParser::Secondary_unitContext::package_body() {
  return getRuleContext<vhdlParser::Package_bodyContext>(0);
}


size_t vhdlParser::Secondary_unitContext::getRuleIndex() const {
  return vhdlParser::RuleSecondary_unit;
}

void vhdlParser::Secondary_unitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSecondary_unit(this);
}

void vhdlParser::Secondary_unitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSecondary_unit(this);
}


std::any vhdlParser::Secondary_unitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitSecondary_unit(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Secondary_unitContext* vhdlParser::secondary_unit() {
  Secondary_unitContext *_localctx = _tracker.createInstance<Secondary_unitContext>(_ctx, getState());
  enterRule(_localctx, 498, vhdlParser::RuleSecondary_unit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2615);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_ARCHITECTURE: {
        enterOuterAlt(_localctx, 1);
        setState(2613);
        architecture_body();
        break;
      }

      case vhdlParser::KW_PACKAGE: {
        enterOuterAlt(_localctx, 2);
        setState(2614);
        package_body();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Library_clauseContext ------------------------------------------------------------------

vhdlParser::Library_clauseContext::Library_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Library_clauseContext::KW_LIBRARY() {
  return getToken(vhdlParser::KW_LIBRARY, 0);
}

vhdlParser::Logical_name_listContext* vhdlParser::Library_clauseContext::logical_name_list() {
  return getRuleContext<vhdlParser::Logical_name_listContext>(0);
}

tree::TerminalNode* vhdlParser::Library_clauseContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Library_clauseContext::getRuleIndex() const {
  return vhdlParser::RuleLibrary_clause;
}

void vhdlParser::Library_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibrary_clause(this);
}

void vhdlParser::Library_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibrary_clause(this);
}


std::any vhdlParser::Library_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitLibrary_clause(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Library_clauseContext* vhdlParser::library_clause() {
  Library_clauseContext *_localctx = _tracker.createInstance<Library_clauseContext>(_ctx, getState());
  enterRule(_localctx, 500, vhdlParser::RuleLibrary_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2617);
    match(vhdlParser::KW_LIBRARY);
    setState(2618);
    logical_name_list();
    setState(2619);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logical_name_listContext ------------------------------------------------------------------

vhdlParser::Logical_name_listContext::Logical_name_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Identifier_listContext* vhdlParser::Logical_name_listContext::identifier_list() {
  return getRuleContext<vhdlParser::Identifier_listContext>(0);
}


size_t vhdlParser::Logical_name_listContext::getRuleIndex() const {
  return vhdlParser::RuleLogical_name_list;
}

void vhdlParser::Logical_name_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogical_name_list(this);
}

void vhdlParser::Logical_name_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogical_name_list(this);
}


std::any vhdlParser::Logical_name_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitLogical_name_list(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Logical_name_listContext* vhdlParser::logical_name_list() {
  Logical_name_listContext *_localctx = _tracker.createInstance<Logical_name_listContext>(_ctx, getState());
  enterRule(_localctx, 502, vhdlParser::RuleLogical_name_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2621);
    identifier_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Context_declarationContext ------------------------------------------------------------------

vhdlParser::Context_declarationContext::Context_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> vhdlParser::Context_declarationContext::KW_CONTEXT() {
  return getTokens(vhdlParser::KW_CONTEXT);
}

tree::TerminalNode* vhdlParser::Context_declarationContext::KW_CONTEXT(size_t i) {
  return getToken(vhdlParser::KW_CONTEXT, i);
}

std::vector<vhdlParser::IdentifierContext *> vhdlParser::Context_declarationContext::identifier() {
  return getRuleContexts<vhdlParser::IdentifierContext>();
}

vhdlParser::IdentifierContext* vhdlParser::Context_declarationContext::identifier(size_t i) {
  return getRuleContext<vhdlParser::IdentifierContext>(i);
}

tree::TerminalNode* vhdlParser::Context_declarationContext::KW_IS() {
  return getToken(vhdlParser::KW_IS, 0);
}

vhdlParser::Context_clauseContext* vhdlParser::Context_declarationContext::context_clause() {
  return getRuleContext<vhdlParser::Context_clauseContext>(0);
}

tree::TerminalNode* vhdlParser::Context_declarationContext::KW_END() {
  return getToken(vhdlParser::KW_END, 0);
}

tree::TerminalNode* vhdlParser::Context_declarationContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}


size_t vhdlParser::Context_declarationContext::getRuleIndex() const {
  return vhdlParser::RuleContext_declaration;
}

void vhdlParser::Context_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContext_declaration(this);
}

void vhdlParser::Context_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContext_declaration(this);
}


std::any vhdlParser::Context_declarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitContext_declaration(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Context_declarationContext* vhdlParser::context_declaration() {
  Context_declarationContext *_localctx = _tracker.createInstance<Context_declarationContext>(_ctx, getState());
  enterRule(_localctx, 504, vhdlParser::RuleContext_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2623);
    match(vhdlParser::KW_CONTEXT);
    setState(2624);
    identifier();
    setState(2625);
    match(vhdlParser::KW_IS);
    setState(2626);
    context_clause();
    setState(2627);
    match(vhdlParser::KW_END);
    setState(2629);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::KW_CONTEXT) {
      setState(2628);
      match(vhdlParser::KW_CONTEXT);
    }
    setState(2632);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER) {
      setState(2631);
      identifier();
    }
    setState(2634);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Context_clauseContext ------------------------------------------------------------------

vhdlParser::Context_clauseContext::Context_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<vhdlParser::Context_itemContext *> vhdlParser::Context_clauseContext::context_item() {
  return getRuleContexts<vhdlParser::Context_itemContext>();
}

vhdlParser::Context_itemContext* vhdlParser::Context_clauseContext::context_item(size_t i) {
  return getRuleContext<vhdlParser::Context_itemContext>(i);
}


size_t vhdlParser::Context_clauseContext::getRuleIndex() const {
  return vhdlParser::RuleContext_clause;
}

void vhdlParser::Context_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContext_clause(this);
}

void vhdlParser::Context_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContext_clause(this);
}


std::any vhdlParser::Context_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitContext_clause(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Context_clauseContext* vhdlParser::context_clause() {
  Context_clauseContext *_localctx = _tracker.createInstance<Context_clauseContext>(_ctx, getState());
  enterRule(_localctx, 506, vhdlParser::RuleContext_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2639);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2636);
        context_item(); 
      }
      setState(2641);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Context_itemContext ------------------------------------------------------------------

vhdlParser::Context_itemContext::Context_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

vhdlParser::Library_clauseContext* vhdlParser::Context_itemContext::library_clause() {
  return getRuleContext<vhdlParser::Library_clauseContext>(0);
}

vhdlParser::Use_clauseContext* vhdlParser::Context_itemContext::use_clause() {
  return getRuleContext<vhdlParser::Use_clauseContext>(0);
}

vhdlParser::Context_referenceContext* vhdlParser::Context_itemContext::context_reference() {
  return getRuleContext<vhdlParser::Context_referenceContext>(0);
}


size_t vhdlParser::Context_itemContext::getRuleIndex() const {
  return vhdlParser::RuleContext_item;
}

void vhdlParser::Context_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContext_item(this);
}

void vhdlParser::Context_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContext_item(this);
}


std::any vhdlParser::Context_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitContext_item(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Context_itemContext* vhdlParser::context_item() {
  Context_itemContext *_localctx = _tracker.createInstance<Context_itemContext>(_ctx, getState());
  enterRule(_localctx, 508, vhdlParser::RuleContext_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2645);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case vhdlParser::KW_LIBRARY: {
        enterOuterAlt(_localctx, 1);
        setState(2642);
        library_clause();
        break;
      }

      case vhdlParser::KW_USE: {
        enterOuterAlt(_localctx, 2);
        setState(2643);
        use_clause();
        break;
      }

      case vhdlParser::KW_CONTEXT: {
        enterOuterAlt(_localctx, 3);
        setState(2644);
        context_reference();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Context_referenceContext ------------------------------------------------------------------

vhdlParser::Context_referenceContext::Context_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::Context_referenceContext::KW_CONTEXT() {
  return getToken(vhdlParser::KW_CONTEXT, 0);
}

std::vector<vhdlParser::Selected_nameContext *> vhdlParser::Context_referenceContext::selected_name() {
  return getRuleContexts<vhdlParser::Selected_nameContext>();
}

vhdlParser::Selected_nameContext* vhdlParser::Context_referenceContext::selected_name(size_t i) {
  return getRuleContext<vhdlParser::Selected_nameContext>(i);
}

tree::TerminalNode* vhdlParser::Context_referenceContext::SEMI() {
  return getToken(vhdlParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> vhdlParser::Context_referenceContext::COMMA() {
  return getTokens(vhdlParser::COMMA);
}

tree::TerminalNode* vhdlParser::Context_referenceContext::COMMA(size_t i) {
  return getToken(vhdlParser::COMMA, i);
}


size_t vhdlParser::Context_referenceContext::getRuleIndex() const {
  return vhdlParser::RuleContext_reference;
}

void vhdlParser::Context_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContext_reference(this);
}

void vhdlParser::Context_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContext_reference(this);
}


std::any vhdlParser::Context_referenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitContext_reference(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::Context_referenceContext* vhdlParser::context_reference() {
  Context_referenceContext *_localctx = _tracker.createInstance<Context_referenceContext>(_ctx, getState());
  enterRule(_localctx, 510, vhdlParser::RuleContext_reference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2647);
    match(vhdlParser::KW_CONTEXT);
    setState(2648);
    selected_name();
    setState(2653);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == vhdlParser::COMMA) {
      setState(2649);
      match(vhdlParser::COMMA);
      setState(2650);
      selected_name();
      setState(2655);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2656);
    match(vhdlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

vhdlParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* vhdlParser::IdentifierContext::BASIC_IDENTIFIER() {
  return getToken(vhdlParser::BASIC_IDENTIFIER, 0);
}

tree::TerminalNode* vhdlParser::IdentifierContext::EXTENDED_IDENTIFIER() {
  return getToken(vhdlParser::EXTENDED_IDENTIFIER, 0);
}


size_t vhdlParser::IdentifierContext::getRuleIndex() const {
  return vhdlParser::RuleIdentifier;
}

void vhdlParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void vhdlParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<vhdlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}


std::any vhdlParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<vhdlParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

vhdlParser::IdentifierContext* vhdlParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 512, vhdlParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2658);
    _la = _input->LA(1);
    if (!(_la == vhdlParser::BASIC_IDENTIFIER

    || _la == vhdlParser::EXTENDED_IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool vhdlParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 2: return nameSempred(antlrcpp::downCast<NameContext *>(context), predicateIndex);
    case 156: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 157: return simple_expressionSempred(antlrcpp::downCast<Simple_expressionContext *>(context), predicateIndex);
    case 197: return conditional_waveformsSempred(antlrcpp::downCast<Conditional_waveformsContext *>(context), predicateIndex);
    case 199: return conditional_expressionsSempred(antlrcpp::downCast<Conditional_expressionsContext *>(context), predicateIndex);
    case 211: return if_statementSempred(antlrcpp::downCast<If_statementContext *>(context), predicateIndex);
    case 238: return if_generate_statementSempred(antlrcpp::downCast<If_generate_statementContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool vhdlParser::nameSempred(NameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool vhdlParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 3);
    case 2: return precpred(_ctx, 2);
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool vhdlParser::simple_expressionSempred(Simple_expressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 3);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool vhdlParser::conditional_waveformsSempred(Conditional_waveformsContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return _input->LA(1) != KW_ELSE;

  default:
    break;
  }
  return true;
}

bool vhdlParser::conditional_expressionsSempred(Conditional_expressionsContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return _input->LA(1) != KW_ELSE;

  default:
    break;
  }
  return true;
}

bool vhdlParser::if_statementSempred(If_statementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return _input->LA(1) != KW_ELSE;

  default:
    break;
  }
  return true;
}

bool vhdlParser::if_generate_statementSempred(If_generate_statementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return _input->LA(1) != KW_ELSE;

  default:
    break;
  }
  return true;
}

void vhdlParser::initialize() {
  ::antlr4::internal::call_once(vhdlparserParserOnceFlag, vhdlparserParserInitialize);
}
